{"version":3,"file":"utils.js","names":["PROJECT_FILE","getModuleRoot","_","memoize","currentDir","path","dirname","resolve","__filename","isAtFsRoot","manifestPath","join","_fs","existsSync","JSON","parse","readFileSync","name","ign","length","Error","BOOTSTRAP_PATH","getPIDsUsingPattern","pattern","args","stdout","exec","split","map","x","parseInt","filter","isInteger","err","log","debug","code","killAppUsingPattern","pgrepPattern","signals","signal","matchedPids","isEmpty","message","last","waitForCondition","pidCheckPromises","pid","then","catch","B","all","every","waitMs","intervalMs","isTvOS","platformName","toLower","PLATFORM_NAME_TVOS","replaceInFile","file","find","replace","contents","fs","readFile","newContents","writeFile","updateProjectFile","agentPath","newBundleId","projectFilePath","copyFile","RegExp","escapeRegExp","WDA_RUNNER_BUNDLE_ID","warn","resetProjectFile","exists","mv","setRealDeviceSecurity","keychainPath","keychainPassword","generateXcodeConfigFile","orgId","signingId","xcconfigPath","tempDir","setXctestrunFile","deviceInfo","sdkVersion","bootstrapPath","wdaRemotePort","xctestrunFilePath","getXctestrunFilePath","xctestRunContent","plist","parsePlistFile","updateWDAPort","getAdditionalRunContent","newXctestRunContent","merge","updatePlistFile","runner","EnvironmentVariables","USE_PORT","sdkBased","udid","platformBased","platformVersion","filePath","version","info","originalXctestrunFile","getXctestrunFileName","errorAndThrow","isRealDevice","killProcess","proc","isRunning","stop","includes","randomInt","low","high","Math","floor","random","getWDAUpgradeTimestamp","packageManifest","mtime","stat","getTime","resetTestProcesses","isSimulator","processPatterns","push","getPIDsListeningOnPort","port","filteringFunc","result","trim","e","stderr","isFunction"],"sources":["../../lib/utils.js"],"sourcesContent":["import { fs, tempDir, plist } from 'appium/support';\nimport { exec } from 'teen_process';\nimport path from 'path';\nimport log from './logger';\nimport _ from 'lodash';\nimport { WDA_RUNNER_BUNDLE_ID, PLATFORM_NAME_TVOS } from './constants';\nimport B from 'bluebird';\nimport _fs from 'fs';\nimport { waitForCondition } from 'asyncbox';\n\nconst PROJECT_FILE = 'project.pbxproj';\n\n/**\n * Calculates the path to the current module's root folder\n *\n * @returns {string} The full path to module root\n * @throws {Error} If the current module root folder cannot be determined\n */\nconst getModuleRoot = _.memoize(function getModuleRoot () {\n  let currentDir = path.dirname(path.resolve(__filename));\n  let isAtFsRoot = false;\n  while (!isAtFsRoot) {\n    const manifestPath = path.join(currentDir, 'package.json');\n    try {\n      if (_fs.existsSync(manifestPath) &&\n          JSON.parse(_fs.readFileSync(manifestPath, 'utf8')).name === 'appium-webdriveragent') {\n        return currentDir;\n      }\n    } catch (ign) {}\n    currentDir = path.dirname(currentDir);\n    isAtFsRoot = currentDir.length <= path.dirname(currentDir).length;\n  }\n  throw new Error('Cannot find the root folder of the appium-webdriveragent Node.js module');\n});\n\nexport const BOOTSTRAP_PATH = getModuleRoot();\n\nasync function getPIDsUsingPattern (pattern) {\n  const args = [\n    '-if', // case insensitive, full cmdline match\n    pattern,\n  ];\n  try {\n    const {stdout} = await exec('pgrep', args);\n    return stdout.split(/\\s+/)\n      .map((x) => parseInt(x, 10))\n      .filter(_.isInteger)\n      .map((x) => `${x}`);\n  } catch (err) {\n    log.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);\n    return [];\n  }\n}\n\nasync function killAppUsingPattern (pgrepPattern) {\n  const signals = [2, 15, 9];\n  for (const signal of signals) {\n    const matchedPids = await getPIDsUsingPattern(pgrepPattern);\n    if (_.isEmpty(matchedPids)) {\n      return;\n    }\n    const args = [`-${signal}`, ...matchedPids];\n    try {\n      await exec('kill', args);\n    } catch (err) {\n      log.debug(`kill ${args.join(' ')} -> ${err.message}`);\n    }\n    if (signal === _.last(signals)) {\n      // there is no need to wait after SIGKILL\n      return;\n    }\n    try {\n      await waitForCondition(async () => {\n        const pidCheckPromises = matchedPids\n          .map((pid) => exec('kill', ['-0', pid])\n            // the process is still alive\n            .then(() => false)\n            // the process is dead\n            .catch(() => true)\n          );\n        return (await B.all(pidCheckPromises))\n          .every((x) => x === true);\n      }, {\n        waitMs: 1000,\n        intervalMs: 100,\n      });\n      return;\n    } catch (ign) {\n      // try the next signal\n    }\n  }\n}\n\n/**\n * Return true if the platformName is tvOS\n * @param {string} platformName The name of the platorm\n * @returns {boolean} Return true if the platformName is tvOS\n */\nfunction isTvOS (platformName) {\n  return _.toLower(platformName) === _.toLower(PLATFORM_NAME_TVOS);\n}\n\nasync function replaceInFile (file, find, replace) {\n  let contents = await fs.readFile(file, 'utf8');\n\n  let newContents = contents.replace(find, replace);\n  if (newContents !== contents) {\n    await fs.writeFile(file, newContents, 'utf8');\n  }\n}\n\n/**\n * Update WebDriverAgentRunner project bundle ID with newBundleId.\n * This method assumes project file is in the correct state.\n * @param {string} agentPath - Path to the .xcodeproj directory.\n * @param {string} newBundleId the new bundle ID used to update.\n */\nasync function updateProjectFile (agentPath, newBundleId) {\n  let projectFilePath = path.resolve(agentPath, PROJECT_FILE);\n  try {\n    // Assuming projectFilePath is in the correct state, create .old from projectFilePath\n    await fs.copyFile(projectFilePath, `${projectFilePath}.old`);\n    await replaceInFile(projectFilePath, new RegExp(_.escapeRegExp(WDA_RUNNER_BUNDLE_ID), 'g'), newBundleId); // eslint-disable-line no-useless-escape\n    log.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);\n  } catch (err) {\n    log.debug(`Error updating project file: ${err.message}`);\n    log.warn(`Unable to update project file '${projectFilePath}' with ` +\n      `bundle id '${newBundleId}'. WebDriverAgent may not start`);\n  }\n}\n\n/**\n * Reset WebDriverAgentRunner project bundle ID to correct state.\n * @param {string} agentPath - Path to the .xcodeproj directory.\n */\nasync function resetProjectFile (agentPath) {\n  const projectFilePath = path.join(agentPath, PROJECT_FILE);\n  try {\n    // restore projectFilePath from .old file\n    if (!await fs.exists(`${projectFilePath}.old`)) {\n      return; // no need to reset\n    }\n    await fs.mv(`${projectFilePath}.old`, projectFilePath);\n    log.debug(`Successfully reset '${projectFilePath}' with bundle id '${WDA_RUNNER_BUNDLE_ID}'`);\n  } catch (err) {\n    log.debug(`Error resetting project file: ${err.message}`);\n    log.warn(`Unable to reset project file '${projectFilePath}' with ` +\n      `bundle id '${WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` +\n      `modified and not returned to the original state.`);\n  }\n}\n\nasync function setRealDeviceSecurity (keychainPath, keychainPassword) {\n  log.debug('Setting security for iOS device');\n  await exec('security', ['-v', 'list-keychains', '-s', keychainPath]);\n  await exec('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]);\n  await exec('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]);\n}\n\nasync function generateXcodeConfigFile (orgId, signingId) {\n  log.debug(`Generating xcode config file for orgId '${orgId}' and signingId ` +\n            `'${signingId}'`);\n  const contents = `DEVELOPMENT_TEAM = ${orgId}\nCODE_SIGN_IDENTITY = ${signingId}\n`;\n  const xcconfigPath = await tempDir.path('appium-temp.xcconfig');\n  log.debug(`Writing xcode config file to ${xcconfigPath}`);\n  await fs.writeFile(xcconfigPath, contents, 'utf8');\n  return xcconfigPath;\n}\n\n/**\n * Information of the device under test\n * @typedef {Object} DeviceInfo\n * @property {string} isRealDevice - Equals to true if the current device is a real device\n * @property {string} udid - The device UDID.\n * @property {string} platformVersion - The platform version of OS.\n * @property {string} platformName - The platform name of iOS, tvOS\n*/\n/**\n * Creates xctestrun file per device & platform version.\n * We expects to have WebDriverAgentRunner_iphoneos${sdkVersion|platformVersion}-arm64.xctestrun for real device\n * and WebDriverAgentRunner_iphonesimulator${sdkVersion|platformVersion}-x86_64.xctestrun for simulator located @bootstrapPath\n * Newer Xcode (Xcode 10.0 at least) generate xctestrun file following sdkVersion.\n * e.g. Xcode which has iOS SDK Version 12.2 generate WebDriverAgentRunner_iphonesimulator.2-x86_64.xctestrun\n *      even if the cap has platform version 11.4\n *\n * @param {DeviceInfo} deviceInfo\n * @param {string} sdkVersion - The Xcode SDK version of OS.\n * @param {string} bootstrapPath - The folder path containing xctestrun file.\n * @param {string} wdaRemotePort - The remote port WDA is listening on.\n * @return {string} returns xctestrunFilePath for given device\n * @throws if WebDriverAgentRunner_iphoneos${sdkVersion|platformVersion}-arm64.xctestrun for real device\n * or WebDriverAgentRunner_iphonesimulator${sdkVersion|platformVersion}-x86_64.xctestrun for simulator is not found @bootstrapPath,\n * then it will throw file not found exception\n */\nasync function setXctestrunFile (deviceInfo, sdkVersion, bootstrapPath, wdaRemotePort) {\n  const xctestrunFilePath = await getXctestrunFilePath(deviceInfo, sdkVersion, bootstrapPath);\n  const xctestRunContent = await plist.parsePlistFile(xctestrunFilePath);\n  const updateWDAPort = getAdditionalRunContent(deviceInfo.platformName, wdaRemotePort);\n  const newXctestRunContent = _.merge(xctestRunContent, updateWDAPort);\n  await plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true);\n\n  return xctestrunFilePath;\n}\n\n/**\n * Return the WDA object which appends existing xctest runner content\n * @param {string} platformName - The name of the platform\n * @param {string} version - The Xcode SDK version of OS.\n * @return {object} returns a runner object which has USE_PORT\n */\nfunction getAdditionalRunContent (platformName, wdaRemotePort) {\n  const runner = `WebDriverAgentRunner${isTvOS(platformName) ? '_tvOS' : ''}`;\n\n  return {\n    [runner]: {\n      EnvironmentVariables: {\n        // USE_PORT must be 'string'\n        USE_PORT: `${wdaRemotePort}`\n      }\n    }\n  };\n}\n\n/**\n * Return the path of xctestrun if it exists\n * @param {DeviceInfo} deviceInfo\n * @param {string} sdkVersion - The Xcode SDK version of OS.\n * @param {string} bootstrapPath - The folder path containing xctestrun file.\n */\nasync function getXctestrunFilePath (deviceInfo, sdkVersion, bootstrapPath) {\n  // First try the SDK path, for Xcode 10 (at least)\n  const sdkBased = [\n    path.resolve(bootstrapPath, `${deviceInfo.udid}_${sdkVersion}.xctestrun`),\n    sdkVersion,\n  ];\n  // Next try Platform path, for earlier Xcode versions\n  const platformBased = [\n    path.resolve(bootstrapPath, `${deviceInfo.udid}_${deviceInfo.platformVersion}.xctestrun`),\n    deviceInfo.platformVersion,\n  ];\n\n  for (const [filePath, version] of [sdkBased, platformBased]) {\n    if (await fs.exists(filePath)) {\n      log.info(`Using '${filePath}' as xctestrun file`);\n      return filePath;\n    }\n    const originalXctestrunFile = path.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, version));\n    if (await fs.exists(originalXctestrunFile)) {\n      // If this is first time run for given device, then first generate xctestrun file for device.\n      // We need to have a xctestrun file **per device** because we cant not have same wda port for all devices.\n      await fs.copyFile(originalXctestrunFile, filePath);\n      log.info(`Using '${filePath}' as xctestrun file copied by '${originalXctestrunFile}'`);\n      return filePath;\n    }\n  }\n\n  log.errorAndThrow(`If you are using 'useXctestrunFile' capability then you ` +\n    `need to have a xctestrun file (expected: ` +\n    `'${path.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, sdkVersion))}')`);\n}\n\n\n/**\n * Return the name of xctestrun file\n * @param {DeviceInfo} deviceInfo\n * @param {string} version - The Xcode SDK version of OS.\n * @return {string} returns xctestrunFilePath for given device\n */\nfunction getXctestrunFileName (deviceInfo, version) {\n  return isTvOS(deviceInfo.platformName)\n    ? `WebDriverAgentRunner_tvOS_appletv${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun`\n    : `WebDriverAgentRunner_iphone${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun`;\n}\n\nasync function killProcess (name, proc) {\n  if (!proc || !proc.isRunning) {\n    return;\n  }\n\n  log.info(`Shutting down '${name}' process (pid '${proc.proc.pid}')`);\n\n  log.info(`Sending 'SIGTERM'...`);\n  try {\n    await proc.stop('SIGTERM', 1000);\n    return;\n  } catch (err) {\n    if (!err.message.includes(`Process didn't end after`)) {\n      throw err;\n    }\n    log.debug(`${name} process did not end in a timely fashion: '${err.message}'.`);\n  }\n\n  log.info(`Sending 'SIGKILL'...`);\n  try {\n    await proc.stop('SIGKILL');\n  } catch (err) {\n    if (err.message.includes('not currently running')) {\n      // the process ended but for some reason we were not informed\n      return;\n    }\n    throw err;\n  }\n}\n\n/**\n * Generate a random integer.\n *\n * @return {number} A random integer number in range [low, hight). `low`` is inclusive and `high` is exclusive.\n */\nfunction randomInt (low, high) {\n  return Math.floor(Math.random() * (high - low) + low);\n}\n\n/**\n * Retrieves WDA upgrade timestamp\n *\n * @return {?number} The UNIX timestamp of the package manifest. The manifest only gets modified on\n * package upgrade.\n */\nasync function getWDAUpgradeTimestamp () {\n  const packageManifest = path.resolve(getModuleRoot(), 'package.json');\n  if (!await fs.exists(packageManifest)) {\n    return null;\n  }\n  const {mtime} = await fs.stat(packageManifest);\n  return mtime.getTime();\n}\n\n/**\n * Kills running XCTest processes for the particular device.\n *\n * @param {string} udid - The device UDID.\n * @param {boolean} isSimulator - Equals to true if the current device is a Simulator\n */\nasync function resetTestProcesses (udid, isSimulator) {\n  const processPatterns = [`xcodebuild.*${udid}`];\n  if (isSimulator) {\n    processPatterns.push(`${udid}.*XCTRunner`);\n    // The pattern to find in case idb was used\n    processPatterns.push(`xctest.*${udid}`);\n  }\n  log.debug(`Killing running processes '${processPatterns.join(', ')}' for the device ${udid}...`);\n  await B.all(processPatterns.map(killAppUsingPattern));\n}\n\n/**\n * Get the IDs of processes listening on the particular system port.\n * It is also possible to apply additional filtering based on the\n * process command line.\n *\n * @param {string|number} port - The port number.\n * @param {?Function} filteringFunc - Optional lambda function, which\n *                                    receives command line string of the particular process\n *                                    listening on given port, and is expected to return\n *                                    either true or false to include/exclude the corresponding PID\n *                                    from the resulting array.\n * @returns {Array<string>} - the list of matched process ids.\n */\nasync function getPIDsListeningOnPort (port, filteringFunc = null) {\n  const result = [];\n  try {\n    // This only works since Mac OS X El Capitan\n    const {stdout} = await exec('lsof', ['-ti', `tcp:${port}`]);\n    result.push(...(stdout.trim().split(/\\n+/)));\n  } catch (e) {\n    if (e.code !== 1) {\n      // code 1 means no processes. Other errors need reporting\n      log.debug(`Error getting processes listening on port '${port}': ${e.stderr || e.message}`);\n    }\n    return result;\n  }\n\n  if (!_.isFunction(filteringFunc)) {\n    return result;\n  }\n  return await B.filter(result, async (pid) => {\n    let stdout;\n    try {\n      ({stdout} = await exec('ps', ['-p', pid, '-o', 'command']));\n    } catch (e) {\n      if (e.code === 1) {\n        // The process does not exist anymore, there's nothing to filter\n        return false;\n      }\n      throw e;\n    }\n    return await filteringFunc(stdout);\n  });\n}\n\nexport { updateProjectFile, resetProjectFile, setRealDeviceSecurity,\n  getAdditionalRunContent, getXctestrunFileName, generateXcodeConfigFile,\n  setXctestrunFile, getXctestrunFilePath, killProcess, randomInt,\n  getWDAUpgradeTimestamp, resetTestProcesses,\n  getPIDsListeningOnPort, killAppUsingPattern, isTvOS\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,YAAY,GAAG,iBAArB;;AAQA,MAAMC,aAAa,GAAGC,eAAA,CAAEC,OAAF,CAAU,SAASF,aAAT,GAA0B;EACxD,IAAIG,UAAU,GAAGC,aAAA,CAAKC,OAAL,CAAaD,aAAA,CAAKE,OAAL,CAAaC,UAAb,CAAb,CAAjB;;EACA,IAAIC,UAAU,GAAG,KAAjB;;EACA,OAAO,CAACA,UAAR,EAAoB;IAClB,MAAMC,YAAY,GAAGL,aAAA,CAAKM,IAAL,CAAUP,UAAV,EAAsB,cAAtB,CAArB;;IACA,IAAI;MACF,IAAIQ,YAAA,CAAIC,UAAJ,CAAeH,YAAf,KACAI,IAAI,CAACC,KAAL,CAAWH,YAAA,CAAII,YAAJ,CAAiBN,YAAjB,EAA+B,MAA/B,CAAX,EAAmDO,IAAnD,KAA4D,uBADhE,EACyF;QACvF,OAAOb,UAAP;MACD;IACF,CALD,CAKE,OAAOc,GAAP,EAAY,CAAE;;IAChBd,UAAU,GAAGC,aAAA,CAAKC,OAAL,CAAaF,UAAb,CAAb;IACAK,UAAU,GAAGL,UAAU,CAACe,MAAX,IAAqBd,aAAA,CAAKC,OAAL,CAAaF,UAAb,EAAyBe,MAA3D;EACD;;EACD,MAAM,IAAIC,KAAJ,CAAU,yEAAV,CAAN;AACD,CAfqB,CAAtB;;AAiBO,MAAMC,cAAc,GAAGpB,aAAa,EAApC;;;AAEP,eAAeqB,mBAAf,CAAoCC,OAApC,EAA6C;EAC3C,MAAMC,IAAI,GAAG,CACX,KADW,EAEXD,OAFW,CAAb;;EAIA,IAAI;IACF,MAAM;MAACE;IAAD,IAAW,MAAM,IAAAC,kBAAA,EAAK,OAAL,EAAcF,IAAd,CAAvB;IACA,OAAOC,MAAM,CAACE,KAAP,CAAa,KAAb,EACJC,GADI,CACCC,CAAD,IAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CADf,EAEJE,MAFI,CAEG7B,eAAA,CAAE8B,SAFL,EAGJJ,GAHI,CAGCC,CAAD,IAAQ,GAAEA,CAAE,EAHZ,CAAP;EAID,CAND,CAME,OAAOI,GAAP,EAAY;IACZC,eAAA,CAAIC,KAAJ,CAAW,UAASX,IAAI,CAACb,IAAL,CAAU,GAAV,CAAe,wDAAuDsB,GAAG,CAACG,IAAK,EAAnG;;IACA,OAAO,EAAP;EACD;AACF;;AAED,eAAeC,mBAAf,CAAoCC,YAApC,EAAkD;EAChD,MAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,CAAhB;;EACA,KAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;IAC5B,MAAME,WAAW,GAAG,MAAMnB,mBAAmB,CAACgB,YAAD,CAA7C;;IACA,IAAIpC,eAAA,CAAEwC,OAAF,CAAUD,WAAV,CAAJ,EAA4B;MAC1B;IACD;;IACD,MAAMjB,IAAI,GAAG,CAAE,IAAGgB,MAAO,EAAZ,EAAe,GAAGC,WAAlB,CAAb;;IACA,IAAI;MACF,MAAM,IAAAf,kBAAA,EAAK,MAAL,EAAaF,IAAb,CAAN;IACD,CAFD,CAEE,OAAOS,GAAP,EAAY;MACZC,eAAA,CAAIC,KAAJ,CAAW,QAAOX,IAAI,CAACb,IAAL,CAAU,GAAV,CAAe,OAAMsB,GAAG,CAACU,OAAQ,EAAnD;IACD;;IACD,IAAIH,MAAM,KAAKtC,eAAA,CAAE0C,IAAF,CAAOL,OAAP,CAAf,EAAgC;MAE9B;IACD;;IACD,IAAI;MACF,MAAM,IAAAM,0BAAA,EAAiB,YAAY;QACjC,MAAMC,gBAAgB,GAAGL,WAAW,CACjCb,GADsB,CACjBmB,GAAD,IAAS,IAAArB,kBAAA,EAAK,MAAL,EAAa,CAAC,IAAD,EAAOqB,GAAP,CAAb,EAEXC,IAFW,CAEN,MAAM,KAFA,EAIXC,KAJW,CAIL,MAAM,IAJD,CADS,CAAzB;QAOA,OAAO,CAAC,MAAMC,iBAAA,CAAEC,GAAF,CAAML,gBAAN,CAAP,EACJM,KADI,CACGvB,CAAD,IAAOA,CAAC,KAAK,IADf,CAAP;MAED,CAVK,EAUH;QACDwB,MAAM,EAAE,IADP;QAEDC,UAAU,EAAE;MAFX,CAVG,CAAN;MAcA;IACD,CAhBD,CAgBE,OAAOpC,GAAP,EAAY,CAEb;EACF;AACF;;AAOD,SAASqC,MAAT,CAAiBC,YAAjB,EAA+B;EAC7B,OAAOtD,eAAA,CAAEuD,OAAF,CAAUD,YAAV,MAA4BtD,eAAA,CAAEuD,OAAF,CAAUC,6BAAV,CAAnC;AACD;;AAED,eAAeC,aAAf,CAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;EACjD,IAAIC,QAAQ,GAAG,MAAMC,WAAA,CAAGC,QAAH,CAAYL,IAAZ,EAAkB,MAAlB,CAArB;EAEA,IAAIM,WAAW,GAAGH,QAAQ,CAACD,OAAT,CAAiBD,IAAjB,EAAuBC,OAAvB,CAAlB;;EACA,IAAII,WAAW,KAAKH,QAApB,EAA8B;IAC5B,MAAMC,WAAA,CAAGG,SAAH,CAAaP,IAAb,EAAmBM,WAAnB,EAAgC,MAAhC,CAAN;EACD;AACF;;AAQD,eAAeE,iBAAf,CAAkCC,SAAlC,EAA6CC,WAA7C,EAA0D;EACxD,IAAIC,eAAe,GAAGlE,aAAA,CAAKE,OAAL,CAAa8D,SAAb,EAAwBrE,YAAxB,CAAtB;;EACA,IAAI;IAEF,MAAMgE,WAAA,CAAGQ,QAAH,CAAYD,eAAZ,EAA8B,GAAEA,eAAgB,MAAhD,CAAN;IACA,MAAMZ,aAAa,CAACY,eAAD,EAAkB,IAAIE,MAAJ,CAAWvE,eAAA,CAAEwE,YAAF,CAAeC,+BAAf,CAAX,EAAiD,GAAjD,CAAlB,EAAyEL,WAAzE,CAAnB;;IACApC,eAAA,CAAIC,KAAJ,CAAW,yBAAwBoC,eAAgB,qBAAoBD,WAAY,GAAnF;EACD,CALD,CAKE,OAAOrC,GAAP,EAAY;IACZC,eAAA,CAAIC,KAAJ,CAAW,gCAA+BF,GAAG,CAACU,OAAQ,EAAtD;;IACAT,eAAA,CAAI0C,IAAJ,CAAU,kCAAiCL,eAAgB,SAAlD,GACN,cAAaD,WAAY,iCAD5B;EAED;AACF;;AAMD,eAAeO,gBAAf,CAAiCR,SAAjC,EAA4C;EAC1C,MAAME,eAAe,GAAGlE,aAAA,CAAKM,IAAL,CAAU0D,SAAV,EAAqBrE,YAArB,CAAxB;;EACA,IAAI;IAEF,IAAI,EAAC,MAAMgE,WAAA,CAAGc,MAAH,CAAW,GAAEP,eAAgB,MAA7B,CAAP,CAAJ,EAAgD;MAC9C;IACD;;IACD,MAAMP,WAAA,CAAGe,EAAH,CAAO,GAAER,eAAgB,MAAzB,EAAgCA,eAAhC,CAAN;;IACArC,eAAA,CAAIC,KAAJ,CAAW,uBAAsBoC,eAAgB,qBAAoBI,+BAAqB,GAA1F;EACD,CAPD,CAOE,OAAO1C,GAAP,EAAY;IACZC,eAAA,CAAIC,KAAJ,CAAW,iCAAgCF,GAAG,CAACU,OAAQ,EAAvD;;IACAT,eAAA,CAAI0C,IAAJ,CAAU,iCAAgCL,eAAgB,SAAjD,GACN,cAAaI,+BAAqB,6BAD5B,GAEN,kDAFH;EAGD;AACF;;AAED,eAAeK,qBAAf,CAAsCC,YAAtC,EAAoDC,gBAApD,EAAsE;EACpEhD,eAAA,CAAIC,KAAJ,CAAU,iCAAV;;EACA,MAAM,IAAAT,kBAAA,EAAK,UAAL,EAAiB,CAAC,IAAD,EAAO,gBAAP,EAAyB,IAAzB,EAA+BuD,YAA/B,CAAjB,CAAN;EACA,MAAM,IAAAvD,kBAAA,EAAK,UAAL,EAAiB,CAAC,IAAD,EAAO,iBAAP,EAA0B,IAA1B,EAAgCwD,gBAAhC,EAAkDD,YAAlD,CAAjB,CAAN;EACA,MAAM,IAAAvD,kBAAA,EAAK,UAAL,EAAiB,CAAC,uBAAD,EAA0B,IAA1B,EAAgC,MAAhC,EAAwC,IAAxC,EAA8CuD,YAA9C,CAAjB,CAAN;AACD;;AAED,eAAeE,uBAAf,CAAwCC,KAAxC,EAA+CC,SAA/C,EAA0D;EACxDnD,eAAA,CAAIC,KAAJ,CAAW,2CAA0CiD,KAAM,kBAAjD,GACC,IAAGC,SAAU,GADxB;;EAEA,MAAMtB,QAAQ,GAAI,sBAAqBqB,KAAM;AAC/C,uBAAuBC,SAAU;AACjC,CAFE;EAGA,MAAMC,YAAY,GAAG,MAAMC,gBAAA,CAAQlF,IAAR,CAAa,sBAAb,CAA3B;;EACA6B,eAAA,CAAIC,KAAJ,CAAW,gCAA+BmD,YAAa,EAAvD;;EACA,MAAMtB,WAAA,CAAGG,SAAH,CAAamB,YAAb,EAA2BvB,QAA3B,EAAqC,MAArC,CAAN;EACA,OAAOuB,YAAP;AACD;;AA2BD,eAAeE,gBAAf,CAAiCC,UAAjC,EAA6CC,UAA7C,EAAyDC,aAAzD,EAAwEC,aAAxE,EAAuF;EACrF,MAAMC,iBAAiB,GAAG,MAAMC,oBAAoB,CAACL,UAAD,EAAaC,UAAb,EAAyBC,aAAzB,CAApD;EACA,MAAMI,gBAAgB,GAAG,MAAMC,cAAA,CAAMC,cAAN,CAAqBJ,iBAArB,CAA/B;EACA,MAAMK,aAAa,GAAGC,uBAAuB,CAACV,UAAU,CAACjC,YAAZ,EAA0BoC,aAA1B,CAA7C;;EACA,MAAMQ,mBAAmB,GAAGlG,eAAA,CAAEmG,KAAF,CAAQN,gBAAR,EAA0BG,aAA1B,CAA5B;;EACA,MAAMF,cAAA,CAAMM,eAAN,CAAsBT,iBAAtB,EAAyCO,mBAAzC,EAA8D,IAA9D,CAAN;EAEA,OAAOP,iBAAP;AACD;;AAQD,SAASM,uBAAT,CAAkC3C,YAAlC,EAAgDoC,aAAhD,EAA+D;EAC7D,MAAMW,MAAM,GAAI,uBAAsBhD,MAAM,CAACC,YAAD,CAAN,GAAuB,OAAvB,GAAiC,EAAG,EAA1E;EAEA,OAAO;IACL,CAAC+C,MAAD,GAAU;MACRC,oBAAoB,EAAE;QAEpBC,QAAQ,EAAG,GAAEb,aAAc;MAFP;IADd;EADL,CAAP;AAQD;;AAQD,eAAeE,oBAAf,CAAqCL,UAArC,EAAiDC,UAAjD,EAA6DC,aAA7D,EAA4E;EAE1E,MAAMe,QAAQ,GAAG,CACfrG,aAAA,CAAKE,OAAL,CAAaoF,aAAb,EAA6B,GAAEF,UAAU,CAACkB,IAAK,IAAGjB,UAAW,YAA7D,CADe,EAEfA,UAFe,CAAjB;EAKA,MAAMkB,aAAa,GAAG,CACpBvG,aAAA,CAAKE,OAAL,CAAaoF,aAAb,EAA6B,GAAEF,UAAU,CAACkB,IAAK,IAAGlB,UAAU,CAACoB,eAAgB,YAA7E,CADoB,EAEpBpB,UAAU,CAACoB,eAFS,CAAtB;;EAKA,KAAK,MAAM,CAACC,QAAD,EAAWC,OAAX,CAAX,IAAkC,CAACL,QAAD,EAAWE,aAAX,CAAlC,EAA6D;IAC3D,IAAI,MAAM5C,WAAA,CAAGc,MAAH,CAAUgC,QAAV,CAAV,EAA+B;MAC7B5E,eAAA,CAAI8E,IAAJ,CAAU,UAASF,QAAS,qBAA5B;;MACA,OAAOA,QAAP;IACD;;IACD,MAAMG,qBAAqB,GAAG5G,aAAA,CAAKE,OAAL,CAAaoF,aAAb,EAA4BuB,oBAAoB,CAACzB,UAAD,EAAasB,OAAb,CAAhD,CAA9B;;IACA,IAAI,MAAM/C,WAAA,CAAGc,MAAH,CAAUmC,qBAAV,CAAV,EAA4C;MAG1C,MAAMjD,WAAA,CAAGQ,QAAH,CAAYyC,qBAAZ,EAAmCH,QAAnC,CAAN;;MACA5E,eAAA,CAAI8E,IAAJ,CAAU,UAASF,QAAS,kCAAiCG,qBAAsB,GAAnF;;MACA,OAAOH,QAAP;IACD;EACF;;EAED5E,eAAA,CAAIiF,aAAJ,CAAmB,0DAAD,GACf,2CADe,GAEf,IAAG9G,aAAA,CAAKE,OAAL,CAAaoF,aAAb,EAA4BuB,oBAAoB,CAACzB,UAAD,EAAaC,UAAb,CAAhD,CAA0E,IAFhF;AAGD;;AASD,SAASwB,oBAAT,CAA+BzB,UAA/B,EAA2CsB,OAA3C,EAAoD;EAClD,OAAOxD,MAAM,CAACkC,UAAU,CAACjC,YAAZ,CAAN,GACF,oCAAmCiC,UAAU,CAAC2B,YAAX,GAA2B,KAAIL,OAAQ,QAAvC,GAAkD,YAAWA,OAAQ,SAAS,YAD/G,GAEF,8BAA6BtB,UAAU,CAAC2B,YAAX,GAA2B,KAAIL,OAAQ,QAAvC,GAAkD,YAAWA,OAAQ,SAAS,YAFhH;AAGD;;AAED,eAAeM,WAAf,CAA4BpG,IAA5B,EAAkCqG,IAAlC,EAAwC;EACtC,IAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,SAAnB,EAA8B;IAC5B;EACD;;EAEDrF,eAAA,CAAI8E,IAAJ,CAAU,kBAAiB/F,IAAK,mBAAkBqG,IAAI,CAACA,IAAL,CAAUvE,GAAI,IAAhE;;EAEAb,eAAA,CAAI8E,IAAJ,CAAU,sBAAV;;EACA,IAAI;IACF,MAAMM,IAAI,CAACE,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAN;IACA;EACD,CAHD,CAGE,OAAOvF,GAAP,EAAY;IACZ,IAAI,CAACA,GAAG,CAACU,OAAJ,CAAY8E,QAAZ,CAAsB,0BAAtB,CAAL,EAAuD;MACrD,MAAMxF,GAAN;IACD;;IACDC,eAAA,CAAIC,KAAJ,CAAW,GAAElB,IAAK,8CAA6CgB,GAAG,CAACU,OAAQ,IAA3E;EACD;;EAEDT,eAAA,CAAI8E,IAAJ,CAAU,sBAAV;;EACA,IAAI;IACF,MAAMM,IAAI,CAACE,IAAL,CAAU,SAAV,CAAN;EACD,CAFD,CAEE,OAAOvF,GAAP,EAAY;IACZ,IAAIA,GAAG,CAACU,OAAJ,CAAY8E,QAAZ,CAAqB,uBAArB,CAAJ,EAAmD;MAEjD;IACD;;IACD,MAAMxF,GAAN;EACD;AACF;;AAOD,SAASyF,SAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;EAC7B,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,IAAI,GAAGD,GAAxB,IAA+BA,GAA1C,CAAP;AACD;;AAQD,eAAeK,sBAAf,GAAyC;EACvC,MAAMC,eAAe,GAAG5H,aAAA,CAAKE,OAAL,CAAaN,aAAa,EAA1B,EAA8B,cAA9B,CAAxB;;EACA,IAAI,EAAC,MAAM+D,WAAA,CAAGc,MAAH,CAAUmD,eAAV,CAAP,CAAJ,EAAuC;IACrC,OAAO,IAAP;EACD;;EACD,MAAM;IAACC;EAAD,IAAU,MAAMlE,WAAA,CAAGmE,IAAH,CAAQF,eAAR,CAAtB;EACA,OAAOC,KAAK,CAACE,OAAN,EAAP;AACD;;AAQD,eAAeC,kBAAf,CAAmC1B,IAAnC,EAAyC2B,WAAzC,EAAsD;EACpD,MAAMC,eAAe,GAAG,CAAE,eAAc5B,IAAK,EAArB,CAAxB;;EACA,IAAI2B,WAAJ,EAAiB;IACfC,eAAe,CAACC,IAAhB,CAAsB,GAAE7B,IAAK,aAA7B;IAEA4B,eAAe,CAACC,IAAhB,CAAsB,WAAU7B,IAAK,EAArC;EACD;;EACDzE,eAAA,CAAIC,KAAJ,CAAW,8BAA6BoG,eAAe,CAAC5H,IAAhB,CAAqB,IAArB,CAA2B,oBAAmBgG,IAAK,KAA3F;;EACA,MAAMzD,iBAAA,CAAEC,GAAF,CAAMoF,eAAe,CAAC3G,GAAhB,CAAoBS,mBAApB,CAAN,CAAN;AACD;;AAeD,eAAeoG,sBAAf,CAAuCC,IAAvC,EAA6CC,aAAa,GAAG,IAA7D,EAAmE;EACjE,MAAMC,MAAM,GAAG,EAAf;;EACA,IAAI;IAEF,MAAM;MAACnH;IAAD,IAAW,MAAM,IAAAC,kBAAA,EAAK,MAAL,EAAa,CAAC,KAAD,EAAS,OAAMgH,IAAK,EAApB,CAAb,CAAvB;IACAE,MAAM,CAACJ,IAAP,CAAY,GAAI/G,MAAM,CAACoH,IAAP,GAAclH,KAAd,CAAoB,KAApB,CAAhB;EACD,CAJD,CAIE,OAAOmH,CAAP,EAAU;IACV,IAAIA,CAAC,CAAC1G,IAAF,KAAW,CAAf,EAAkB;MAEhBF,eAAA,CAAIC,KAAJ,CAAW,8CAA6CuG,IAAK,MAAKI,CAAC,CAACC,MAAF,IAAYD,CAAC,CAACnG,OAAQ,EAAxF;IACD;;IACD,OAAOiG,MAAP;EACD;;EAED,IAAI,CAAC1I,eAAA,CAAE8I,UAAF,CAAaL,aAAb,CAAL,EAAkC;IAChC,OAAOC,MAAP;EACD;;EACD,OAAO,MAAM1F,iBAAA,CAAEnB,MAAF,CAAS6G,MAAT,EAAiB,MAAO7F,GAAP,IAAe;IAC3C,IAAItB,MAAJ;;IACA,IAAI;MACF,CAAC;QAACA;MAAD,IAAW,MAAM,IAAAC,kBAAA,EAAK,IAAL,EAAW,CAAC,IAAD,EAAOqB,GAAP,EAAY,IAAZ,EAAkB,SAAlB,CAAX,CAAlB;IACD,CAFD,CAEE,OAAO+F,CAAP,EAAU;MACV,IAAIA,CAAC,CAAC1G,IAAF,KAAW,CAAf,EAAkB;QAEhB,OAAO,KAAP;MACD;;MACD,MAAM0G,CAAN;IACD;;IACD,OAAO,MAAMH,aAAa,CAAClH,MAAD,CAA1B;EACD,CAZY,CAAb;AAaD"}