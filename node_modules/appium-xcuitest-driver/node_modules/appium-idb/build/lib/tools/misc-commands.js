"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../helpers");

const miscCommands = {};

miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);

  const output = await this.exec(['describe'], ['--json']);
  return (0, _helpers.fixOutputToObject)(output);
};

miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);

  await this.exec(['focus']);
};

miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);

  await this.exec(['open'], [url]);
};

miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keychain on the device '${this.udid}'`);

  await this.exec(['clear-keychain']);
};

miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);

  await this.exec(['set-location'], [latitude, longitude]);
};

miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);

  const command = ['approve'];
  const args = [];

  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }

  args.push(bundleId);
  await this.exec(command, args);
};

miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);

  await this.exec(['contacts', 'update'], [dbPath]);
};

var _default = miscCommands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtaXNjQ29tbWFuZHMiLCJkZXNjcmliZURldmljZSIsImxvZyIsImRlYnVnIiwidWRpZCIsIm91dHB1dCIsImV4ZWMiLCJmaXhPdXRwdXRUb09iamVjdCIsImZvY3VzU2ltdWxhdG9yIiwib3BlblVybCIsInVybCIsImNsZWFyS2V5Y2hhaW4iLCJzZXRMb2NhdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYXBwcm92ZSIsImJ1bmRsZUlkIiwicGVybWlzc2lvbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tbWFuZCIsImFyZ3MiLCJfIiwiaXNBcnJheSIsInB1c2giLCJhZGRDb250YWN0cyIsImRiUGF0aCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90b29scy9taXNjLWNvbW1hbmRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBmaXhPdXRwdXRUb09iamVjdCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuXG5cbmNvbnN0IG1pc2NDb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIFJldHVybnMgbWV0YWRhdGEgYWJvdXQgdGhlIHNwZWNpZmllZCB0YXJnZXQuXG4gKiBPdXRwdXQgZXhhbXBsZTpcbiAqIHRhcmdldF9kZXNjcmlwdGlvbiB7XG4gKiAgIHVkaWQ6IFwiMTRFQkRFREUtMEM5RS00NkI0LUIxRkYtMDg4MUYxMUQwRTc1XCJcbiAqICAgbmFtZTogXCJpUGhvbmUgWFxcMzEyXFwyMDBcIlxuICogICBzY3JlZW5fZGltZW5zaW9ucyB7XG4gKiAgICAgd2lkdGg6IDgyOFxuICogICAgIGhlaWdodDogMTc5MlxuICogICAgIGRlbnNpdHk6IDIuMFxuICogICAgIHdpZHRoX3BvaW50czogNDE0XG4gKiAgICAgaGVpZ2h0X3BvaW50czogODk2XG4gKiAgIH1cbiAqICAgc3RhdGU6IFwiYm9vdGVkXCJcbiAqICAgdGFyZ2V0X3R5cGU6IFwic2ltdWxhdG9yXCJcbiAqICAgb3NfdmVyc2lvbjogXCJpT1MgMTIuMlwiXG4gKiAgIGFyY2hpdGVjdHVyZTogXCJ4ODZfNjRcIlxuICogfVxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBjb21tYW5kIG91dHB1dCBwYXJzZWQgdG8gYW4gb2JqZWN0XG4gKi9cbm1pc2NDb21tYW5kcy5kZXNjcmliZURldmljZSA9IGFzeW5jIGZ1bmN0aW9uIGRlc2NyaWJlRGV2aWNlICgpIHtcbiAgbG9nLmRlYnVnKGBEZXNjcmliaW5nIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjKFsnZGVzY3JpYmUnXSwgWyctLWpzb24nXSk7XG4gIHJldHVybiBmaXhPdXRwdXRUb09iamVjdChvdXRwdXQpO1xufTtcblxuLyoqXG4gKiBCcmluZ3MgYSBzaW11bGF0b3JzIHdpbmRvdyB0byB0aGUgZm9yZWdyb3VuZC5cbiAqL1xubWlzY0NvbW1hbmRzLmZvY3VzU2ltdWxhdG9yID0gYXN5bmMgZnVuY3Rpb24gZm9jdXNTaW11bGF0b3IgKCkge1xuICBsb2cuZGVidWcoYEZvY3VzaW5nIFNpbXVsYXRvciAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydmb2N1cyddKTtcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHNwZWNpZmllZCBVUkwgb24gdGhlIHRhcmdldC5cbiAqIFRoaXMgd29ya3MgYm90aCB3aXRoIHdlYiBhZGRyZXNzZXMgYW5kIFVSTCBzY2hlbWVzIHByZXNlbnQgb24gdGhlIHRhcmdldC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3BlblxuICovXG5taXNjQ29tbWFuZHMub3BlblVybCA9IGFzeW5jIGZ1bmN0aW9uIG9wZW5VcmwgKHVybCkge1xuICBsb2cuZGVidWcoYE9wZW5pbmcgVVJMICcke3VybH0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnb3BlbiddLCBbdXJsXSk7XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSBlbnRpcmUga2V5Y2hhaW4gb24gU2ltdWxhdG9yLlxuICovXG5taXNjQ29tbWFuZHMuY2xlYXJLZXljaGFpbiA9IGFzeW5jIGZ1bmN0aW9uIGNsZWFyS2V5Y2hhaW4gKCkge1xuICBsb2cuZGVidWcoYENsZWFyaW5nIGtleWNoYWluIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnY2xlYXIta2V5Y2hhaW4nXSk7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlcyBhIHNpbXVsYXRvcnMgbG9jYXRpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxhdGl0dWRlIFRoZSBsYXRpdHVkZSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsb25naXR1ZGUgVGhlIGxvbmdpdHVkZSB2YWx1ZVxuICovXG5taXNjQ29tbWFuZHMuc2V0TG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBzZXRMb2NhdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xuICBsb2cuZGVidWcoYFNldHRpbmcgbG9jYXRpb24gKCR7bGF0aXR1ZGV9LCAke2xvbmdpdHVkZX0pIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnc2V0LWxvY2F0aW9uJ10sIFtsYXRpdHVkZSwgbG9uZ2l0dWRlXSk7XG59O1xuXG4vKipcbiAqIFByb2dyYW1tYXRpY2FsbHkgYXBwcm92ZSBwZXJtaXNzaW9uIGZvciBhbiBhcHAgb24gU2ltdWxhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIEFwcGxpY2F0aW9uIGlkZW50aWZpZXIgdG8gc2V0IHRoZSBwZXJtaXNzaW9ucyBmb3JcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz59IHBlcm1pc3Npb25zIFRoZSBwZXJtaXNzaW9uKHMpIHRvIGFwcGx5LiBDYW4gYmVcbiAqIG9uZSBvZiB7cGhvdG9zLGNhbWVyYSxjYW1lcmF9XG4gKi9cbm1pc2NDb21tYW5kcy5hcHByb3ZlID0gYXN5bmMgZnVuY3Rpb24gYXBwcm92ZSAoYnVuZGxlSWQsIHBlcm1pc3Npb25zKSB7XG4gIGxvZy5kZWJ1ZyhgQXBwcm92aW5nIHBlcm1pc3Npb25zICgke0pTT04uc3RyaW5naWZ5KHBlcm1pc3Npb25zKX0pIGZvciAnJHtidW5kbGVJZH0nIGAgK1xuICAgIGBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBbJ2FwcHJvdmUnXTtcbiAgY29uc3QgYXJncyA9IFtdO1xuICBpZiAoXy5pc0FycmF5KHBlcm1pc3Npb25zKSkge1xuICAgIGFyZ3MucHVzaCguLi5wZXJtaXNzaW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgYXJncy5wdXNoKHBlcm1pc3Npb25zKTtcbiAgfVxuICBhcmdzLnB1c2goYnVuZGxlSWQpO1xuICBhd2FpdCB0aGlzLmV4ZWMoY29tbWFuZCwgYXJncyk7XG59O1xuXG4vKipcbiAqIE92ZXJ3cml0ZSB0aGUgc2ltdWxhdG9ycyBjb250YWN0cyBkYlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYlBhdGggRnVsbCBwYXRoIHRvIHRoZSBTUUxpdGUgZGIgY29udGFpbmluZyB0aGUgY29udGFjdHNcbiAqL1xubWlzY0NvbW1hbmRzLmFkZENvbnRhY3RzID0gYXN5bmMgZnVuY3Rpb24gYWRkQ29udGFjdHMgKGRiUGF0aCkge1xuICBsb2cuZGVidWcoYEFkZGluZyBjb250YWN0cyBmcm9tICgke2RiUGF0aH0pIHRvIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnY29udGFjdHMnLCAndXBkYXRlJ10sIFtkYlBhdGhdKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pc2NDb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxZQUFZLEdBQUcsRUFBckI7O0FB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