"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DTXDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _headers = require("../headers");

class DTXDecoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
    this._dtxManager = {};
    this.buffer = Buffer.allocUnsafe(0);
    this.cursor = 0;
    this.header = undefined;
  }

  _transform(data, encoding, onData) {
    this._decode(data);

    onData();
  }

  _decode(data) {
    this.buffer = Buffer.concat([this.buffer.slice(this.cursor, this.buffer.length), data]);
    this.cursor = 0;

    while (this.cursor < this.buffer.length) {
      const magic = this._recv(_headers.DTX_MESSAGE_HEADER_MAGIC_LEN);

      if (!magic) {
        return;
      }

      this.cursor -= _headers.DTX_MESSAGE_HEADER_MAGIC_LEN;

      if (magic && magic.readUInt32LE(0) === _headers.DTX_MESSAGE_HEADER_MAGIC) {
        const headerBuffer = this._recv(_headers.DTX_MESSAGE_HEADER_LENGTH);

        if (!headerBuffer) {
          return;
        }

        this.header = _headers.DTXMessageHeader.parse(headerBuffer);

        if (this.header.fragmentId === 0) {
          if (!(this.header.channel in this._dtxManager)) {
            this._dtxManager[this.header.channel] = {
              headerBuffer,
              payloadBuffer: new Buffer.allocUnsafe(0)
            };
          }

          if (this.header.fragmentCount > 1) {
            continue;
          }
        }
      }

      const bodyBuffer = this._recv(this.header.payloadLength);

      if (!bodyBuffer) {
        return;
      }

      if (this._dtxManager[this.header.channel]) {
        this._dtxManager[this.header.channel].payloadBuffer = Buffer.concat([this._dtxManager[this.header.channel].payloadBuffer, bodyBuffer]);
      }

      if (this.header.fragmentId === this.header.fragmentCount - 1) {
        data = this._dtxManager[this.header.channel];
        delete this._dtxManager[this.header.channel];

        if (data) {
          this.push(_headers.DTXMessage.parse(data.headerBuffer, data.payloadBuffer));
        }
      }
    }

    this.cursor = 0;
    this.buffer = Buffer.allocUnsafe(0);
  }

  _recv(length) {
    if (this.buffer.length < this.cursor + length) {
      return null;
    }

    const buf = this.buffer.slice(this.cursor, this.cursor + length);
    this.cursor += length;
    return buf;
  }

}

exports.DTXDecoder = DTXDecoder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEVFhEZWNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX2R0eE1hbmFnZXIiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsImN1cnNvciIsImhlYWRlciIsInVuZGVmaW5lZCIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJfZGVjb2RlIiwiY29uY2F0Iiwic2xpY2UiLCJsZW5ndGgiLCJtYWdpYyIsIl9yZWN2IiwiRFRYX01FU1NBR0VfSEVBREVSX01BR0lDX0xFTiIsInJlYWRVSW50MzJMRSIsIkRUWF9NRVNTQUdFX0hFQURFUl9NQUdJQyIsImhlYWRlckJ1ZmZlciIsIkRUWF9NRVNTQUdFX0hFQURFUl9MRU5HVEgiLCJEVFhNZXNzYWdlSGVhZGVyIiwicGFyc2UiLCJmcmFnbWVudElkIiwiY2hhbm5lbCIsInBheWxvYWRCdWZmZXIiLCJmcmFnbWVudENvdW50IiwiYm9keUJ1ZmZlciIsInBheWxvYWRMZW5ndGgiLCJwdXNoIiwiRFRYTWVzc2FnZSIsImJ1ZiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9pbnN0cnVtZW50L3RyYW5zZm9ybWVyL2R0eC1kZWNvZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRFRYX01FU1NBR0VfSEVBREVSX0xFTkdUSCwgRFRYX01FU1NBR0VfSEVBREVSX01BR0lDLCBEVFhfTUVTU0FHRV9IRUFERVJfTUFHSUNfTEVOLFxuICAgICAgICAgRFRYTWVzc2FnZUhlYWRlciwgRFRYTWVzc2FnZX0gZnJvbSAnLi4vaGVhZGVycyc7XG5cbmNsYXNzIERUWERlY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgIHRoaXMuX2R0eE1hbmFnZXIgPSB7fTtcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5oZWFkZXIgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBfdHJhbnNmb3JtIChkYXRhLCBlbmNvZGluZywgb25EYXRhKSB7XG4gICAgdGhpcy5fZGVjb2RlKGRhdGEpO1xuICAgIG9uRGF0YSgpO1xuICB9XG5cbiAgX2RlY29kZSAoZGF0YSkge1xuICAgIC8vIE1lcmdlIHBhY2tldHNcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuYnVmZmVyLnNsaWNlKHRoaXMuY3Vyc29yLCB0aGlzLmJ1ZmZlci5sZW5ndGgpLCBkYXRhXSk7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHdoaWxlICh0aGlzLmN1cnNvciA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgY29uc3QgbWFnaWMgPSB0aGlzLl9yZWN2KERUWF9NRVNTQUdFX0hFQURFUl9NQUdJQ19MRU4pO1xuICAgICAgaWYgKCFtYWdpYykgeyByZXR1cm47IH1cbiAgICAgIHRoaXMuY3Vyc29yIC09IERUWF9NRVNTQUdFX0hFQURFUl9NQUdJQ19MRU47XG4gICAgICBpZiAobWFnaWMgJiYgbWFnaWMucmVhZFVJbnQzMkxFKDApID09PSBEVFhfTUVTU0FHRV9IRUFERVJfTUFHSUMpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyQnVmZmVyID0gdGhpcy5fcmVjdihEVFhfTUVTU0FHRV9IRUFERVJfTEVOR1RIKTtcbiAgICAgICAgaWYgKCFoZWFkZXJCdWZmZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuaGVhZGVyID0gRFRYTWVzc2FnZUhlYWRlci5wYXJzZShoZWFkZXJCdWZmZXIpO1xuICAgICAgICBpZiAodGhpcy5oZWFkZXIuZnJhZ21lbnRJZCA9PT0gMCkge1xuICAgICAgICAgIC8vIG9ubHkgdGhlIDB0aCBmcmFnbWVudCBjb250YWlucyBhIG1lc3NhZ2UgaGVhZGVyXG4gICAgICAgICAgaWYgKCEodGhpcy5oZWFkZXIuY2hhbm5lbCBpbiB0aGlzLl9kdHhNYW5hZ2VyKSkge1xuICAgICAgICAgICAgdGhpcy5fZHR4TWFuYWdlclt0aGlzLmhlYWRlci5jaGFubmVsXSA9IHtoZWFkZXJCdWZmZXIsIHBheWxvYWRCdWZmZXI6IG5ldyBCdWZmZXIuYWxsb2NVbnNhZmUoMCl9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5oZWFkZXIuZnJhZ21lbnRDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIC8vIENvbnRpbnVlIHRvIGdldCB0aGUgbmV4dCBtZXNzYWdlIGZyYWdtZW50c1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBib2R5QnVmZmVyID0gdGhpcy5fcmVjdih0aGlzLmhlYWRlci5wYXlsb2FkTGVuZ3RoKTtcbiAgICAgIGlmICghYm9keUJ1ZmZlcikgeyByZXR1cm47IH1cbiAgICAgIGlmICh0aGlzLl9kdHhNYW5hZ2VyW3RoaXMuaGVhZGVyLmNoYW5uZWxdKSB7XG4gICAgICAgIHRoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF0ucGF5bG9hZEJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF0ucGF5bG9hZEJ1ZmZlciwgYm9keUJ1ZmZlcl0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaGVhZGVyLmZyYWdtZW50SWQgPT09ICh0aGlzLmhlYWRlci5mcmFnbWVudENvdW50IC0gMSkpIHtcbiAgICAgICAgZGF0YSA9IHRoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9kdHhNYW5hZ2VyW3RoaXMuaGVhZGVyLmNoYW5uZWxdO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHRoaXMucHVzaChEVFhNZXNzYWdlLnBhcnNlKGRhdGEuaGVhZGVyQnVmZmVyLCBkYXRhLnBheWxvYWRCdWZmZXIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gIH1cblxuICBfcmVjdiAobGVuZ3RoKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8IHRoaXMuY3Vyc29yICsgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYnVmID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5jdXJzb3IsIHRoaXMuY3Vyc29yICsgbGVuZ3RoKTtcbiAgICB0aGlzLmN1cnNvciArPSBsZW5ndGg7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxufVxuXG5leHBvcnQgeyBEVFhEZWNvZGVyIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsVUFBTixTQUF5QkMsZUFBQSxDQUFPQyxTQUFoQyxDQUEwQztFQUV4Q0MsV0FBVyxHQUFJO0lBQ2IsTUFBTTtNQUFFQyxVQUFVLEVBQUU7SUFBZCxDQUFOO0lBQ0EsS0FBS0MsV0FBTCxHQUFtQixFQUFuQjtJQUNBLEtBQUtDLE1BQUwsR0FBY0MsTUFBTSxDQUFDQyxXQUFQLENBQW1CLENBQW5CLENBQWQ7SUFDQSxLQUFLQyxNQUFMLEdBQWMsQ0FBZDtJQUNBLEtBQUtDLE1BQUwsR0FBY0MsU0FBZDtFQUNEOztFQUVEQyxVQUFVLENBQUVDLElBQUYsRUFBUUMsUUFBUixFQUFrQkMsTUFBbEIsRUFBMEI7SUFDbEMsS0FBS0MsT0FBTCxDQUFhSCxJQUFiOztJQUNBRSxNQUFNO0VBQ1A7O0VBRURDLE9BQU8sQ0FBRUgsSUFBRixFQUFRO0lBRWIsS0FBS1AsTUFBTCxHQUFjQyxNQUFNLENBQUNVLE1BQVAsQ0FBYyxDQUFDLEtBQUtYLE1BQUwsQ0FBWVksS0FBWixDQUFrQixLQUFLVCxNQUF2QixFQUErQixLQUFLSCxNQUFMLENBQVlhLE1B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