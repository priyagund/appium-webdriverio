"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AfcEncoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _protocol = require("../protocol");

class AfcEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }

  _transform(data, encoding, onData) {
    onData(null, this._encode(data));
  }

  _encode(data) {
    data.content = data.content ? data.content : Buffer.alloc(0);
    const thisLength = _protocol.AFC_PACKET_HEADER_SIZE + data.headerPayload.length;
    const messageLength = thisLength + data.content.length;
    const buffer = Buffer.alloc(messageLength);

    _protocol.MAGIC_NUMBER.copy(buffer);

    this.writeUInt64LE(buffer, 8, messageLength);
    this.writeUInt64LE(buffer, 16, thisLength);
    this.writeUInt64LE(buffer, 24, data.packetNumber);
    this.writeUInt64LE(buffer, 32, data.opCode);
    data.headerPayload.copy(buffer, _protocol.AFC_PACKET_HEADER_SIZE);
    data.content.copy(buffer, thisLength);
    return buffer;
  }

  writeUInt64LE(buffer, index, content) {
    buffer.writeUInt32LE(content, index);
    buffer.writeUInt32LE(0, index + 4);
  }

}

exports.AfcEncoder = AfcEncoder;
var _default = AfcEncoder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBZmNFbmNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9lbmNvZGUiLCJjb250ZW50IiwiQnVmZmVyIiwiYWxsb2MiLCJ0aGlzTGVuZ3RoIiwiQUZDX1BBQ0tFVF9IRUFERVJfU0laRSIsImhlYWRlclBheWxvYWQiLCJsZW5ndGgiLCJtZXNzYWdlTGVuZ3RoIiwiYnVmZmVyIiwiTUFHSUNfTlVNQkVSIiwiY29weSIsIndyaXRlVUludDY0TEUiLCJwYWNrZXROdW1iZXIiLCJvcENvZGUiLCJpbmRleCIsIndyaXRlVUludDMyTEUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvYWZjL3RyYW5zZm9ybWVyL2FmY2VuY29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgTUFHSUNfTlVNQkVSLCBBRkNfUEFDS0VUX0hFQURFUl9TSVpFIH0gZnJvbSAnLi4vcHJvdG9jb2wnO1xuXG5cbmNsYXNzIEFmY0VuY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICB9XG5cbiAgX3RyYW5zZm9ybSAoZGF0YSwgZW5jb2RpbmcsIG9uRGF0YSkge1xuICAgIG9uRGF0YShudWxsLCB0aGlzLl9lbmNvZGUoZGF0YSkpO1xuICB9XG5cbiAgX2VuY29kZSAoZGF0YSkge1xuICAgIGRhdGEuY29udGVudCA9IGRhdGEuY29udGVudCA/IGRhdGEuY29udGVudCA6IEJ1ZmZlci5hbGxvYygwKTtcblxuICAgIGNvbnN0IHRoaXNMZW5ndGggPSBBRkNfUEFDS0VUX0hFQURFUl9TSVpFICsgZGF0YS5oZWFkZXJQYXlsb2FkLmxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlTGVuZ3RoID0gdGhpc0xlbmd0aCArIGRhdGEuY29udGVudC5sZW5ndGg7XG5cbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MobWVzc2FnZUxlbmd0aCk7XG4gICAgTUFHSUNfTlVNQkVSLmNvcHkoYnVmZmVyKTtcbiAgICB0aGlzLndyaXRlVUludDY0TEUoYnVmZmVyLCA4LCBtZXNzYWdlTGVuZ3RoKTtcbiAgICB0aGlzLndyaXRlVUludDY0TEUoYnVmZmVyLCAxNiwgdGhpc0xlbmd0aCk7XG4gICAgdGhpcy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgMjQsIGRhdGEucGFja2V0TnVtYmVyKTtcbiAgICB0aGlzLndyaXRlVUludDY0TEUoYnVmZmVyLCAzMiwgZGF0YS5vcENvZGUpO1xuICAgIGRhdGEuaGVhZGVyUGF5bG9hZC5jb3B5KGJ1ZmZlciwgQUZDX1BBQ0tFVF9IRUFERVJfU0laRSk7XG4gICAgZGF0YS5jb250ZW50LmNvcHkoYnVmZmVyLCB0aGlzTGVuZ3RoKTtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgd3JpdGVVSW50NjRMRSAoYnVmZmVyLCBpbmRleCwgY29udGVudCkge1xuICAgIC8vIElnbm9yZSB0aGUgZmlyc3QgNCBieXRlcyBzaW5jZSB3ZSBkb24ndCBkbyBhbnl0aGluZyB3aXRoIGxvbmdzXG4gICAgYnVmZmVyLndyaXRlVUludDMyTEUoY29udGVudCwgaW5kZXgpO1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkxFKDAsIGluZGV4ICsgNCk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBBZmNFbmNvZGVyIH07XG5leHBvcnQgZGVmYXVsdCBBZmNFbmNvZGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLE1BQU1BLFVBQU4sU0FBeUJDLGVBQUEsQ0FBT0MsU0FBaEMsQ0FBMEM7RUFFeENDLFdBQVcsR0FBSTtJQUNiLE1BQU07TUFBRUMsVUFBVSxFQUFFO0lBQWQsQ0FBTjtFQUNEOztFQUVEQyxVQUFVLENBQUVDLElBQUYsRUFBUUMsUUFBUixFQUFrQkMsTUFBbEIsRUFBMEI7SUFDbENBLE1BQU0sQ0FBQyxJQUFELEVBQU8sS0FBS0MsT0FBTCxDQUFhSCxJQUFiLENBQVAsQ0FBTjtFQUNEOztFQUVERyxPQUFPLENBQUVILElBQUYsRUFBUTtJQUNiQSxJQUFJLENBQUNJLE9BQUwsR0FBZUosSUFBSSxDQUFDSSxPQUFMLEdBQWVKLElBQUksQ0FBQ0ksT0FBcEIsR0FBOEJDLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLENBQWIsQ0FBN0M7SUFFQSxNQUFNQyxVQUFVLEdBQUdDLGdDQUFBLEdBQXlCUixJQUFJLENBQUNTLGFBQUwsQ0FBbUJDLE1BQS9EO0lBQ0EsTUFBTUMsYUFBYSxHQUFHSixVQUFVLEdBQUdQLElBQUksQ0FBQ0ksT0FBTCxDQUFhTSxNQUFoRDtJQUVBLE1BQU1FLE1BQU0sR0FBR1AsTUFBTSxDQUFDQyxLQUFQLENBQWFLLGFBQWIsQ0FBZjs7SUFDQUUsc0JBQUEsQ0FBYUMsSUFBYixDQUFrQkYsTUFBbEI7O0lBQ0EsS0FBS0csYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsQ0FBM0IsRUFBOEJELGFBQTlCO0lBQ0EsS0FBS0ksYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsRUFBM0IsRUFBK0JMLFVBQS9CO0lBQ0EsS0FBS1EsYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsRUFBM0IsRUFBK0JaLElBQUksQ0FBQ2dCLFlBQXBDO0lBQ0EsS0FBS0QsYUFBTCxDQUFtQkgsTUFBbkIsRUFBMkIsRUFBM0IsRUFBK0JaLElBQUksQ0FBQ2lCLE1BQXBDO0lBQ0FqQixJQUFJLENBQUNTLGFBQUwsQ0FBbUJLLElBQW5CLENBQXdCRixNQUF4QixFQUFnQ0osZ0NBQWhDO0lBQ0FSLElBQUksQ0FBQ0ksT0FBTCxDQUFhVSxJQUFiLENBQWtCRixNQUFsQixFQUEwQkwsVUFBMUI7SUFDQSxPQUFPSyxNQUFQO0VBQ0Q7O0VBRURHLGFBQWEsQ0FBRUgsTUFBRixFQUFVTSxLQUFWLEVBQWlCZCxPQUFqQixFQUEwQjtJQUVyQ1EsTUFBTSxDQUFDTyxhQUFQLENBQXFCZixPQUFyQixFQUE4QmMsS0FBOUI7SUFDQU4sTUFBTSxDQUFDTyxhQUFQLENBQXFCLENBQXJCLEVBQXdCRCxLQUFLLEdBQUcsQ0FBaEM7RUFDRDs7QUEvQnVDOzs7ZUFvQzNCeEIsVSJ9