"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MC_INSTALL_SERVICE_NAME = exports.MCInstallProxyService = void 0;

require("source-map-support/register");

var _baseService = require("../base-service");

var _support = require("@appium/support");

const MC_INSTALL_SERVICE_NAME = 'com.apple.mobile.MCInstall';
exports.MC_INSTALL_SERVICE_NAME = MC_INSTALL_SERVICE_NAME;
const ACKNOWLEDGED = 'Acknowledged';

function checkACK(res, name) {
  if (res.Status !== ACKNOWLEDGED) {
    throw new Error(`${name} error: ${JSON.stringify(res)}`);
  }

  return res;
}

class MCInstallProxyService extends _baseService.BaseServicePlist {
  constructor(socketClient) {
    super(socketClient);
  }

  async getProfileList() {
    const res = await this._plistService.sendPlistAndReceive({
      RequestType: 'GetProfileList'
    });
    return checkACK(res, 'getProfileList');
  }

  async installProfile(path) {
    const payload = await _support.fs.readFile(path);
    const res = await this._plistService.sendPlistAndReceive({
      'RequestType': 'InstallProfile',
      'Payload': payload
    });
    return checkACK(res, 'installProfile');
  }

  async removeProfile(ident) {
    const profiles = await this.getProfileList();
    const meta = profiles.ProfileMetadata[ident];

    if (!meta) {
      throw new Error(`not find installed profile ident:${ident}`);
    }

    const data = _support.plist.createBinaryPlist({
      'PayloadType': 'Configuration',
      'PayloadIdentifier': ident,
      'PayloadUUID': meta.PayloadUUID,
      'PayloadVersion': meta.PayloadVersion
    });

    const res = await this._plistService.sendPlistAndReceive({
      'RequestType': 'RemoveProfile',
      'ProfileIdentifier': data
    });
    return checkACK(res, 'removeProfile');
  }

}

exports.MCInstallProxyService = MCInstallProxyService;
var _default = MCInstallProxyService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQ19JTlNUQUxMX1NFUlZJQ0VfTkFNRSIsIkFDS05PV0xFREdFRCIsImNoZWNrQUNLIiwicmVzIiwibmFtZSIsIlN0YXR1cyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIk1DSW5zdGFsbFByb3h5U2VydmljZSIsIkJhc2VTZXJ2aWNlUGxpc3QiLCJjb25zdHJ1Y3RvciIsInNvY2tldENsaWVudCIsImdldFByb2ZpbGVMaXN0IiwiX3BsaXN0U2VydmljZSIsInNlbmRQbGlzdEFuZFJlY2VpdmUiLCJSZXF1ZXN0VHlwZSIsImluc3RhbGxQcm9maWxlIiwicGF0aCIsInBheWxvYWQiLCJmcyIsInJlYWRGaWxlIiwicmVtb3ZlUHJvZmlsZSIsImlkZW50IiwicHJvZmlsZXMiLCJtZXRhIiwiUHJvZmlsZU1ldGFkYXRhIiwiZGF0YSIsInBsaXN0IiwiY3JlYXRlQmluYXJ5UGxpc3QiLCJQYXlsb2FkVVVJRCIsIlBheWxvYWRWZXJzaW9uIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21jaW5zdGFsbC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Jhc2VTZXJ2aWNlUGxpc3R9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQge2ZzLCBwbGlzdH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBNQ19JTlNUQUxMX1NFUlZJQ0VfTkFNRSA9ICdjb20uYXBwbGUubW9iaWxlLk1DSW5zdGFsbCc7XG5jb25zdCBBQ0tOT1dMRURHRUQgPSAnQWNrbm93bGVkZ2VkJztcblxuZnVuY3Rpb24gY2hlY2tBQ0sgKHJlcywgbmFtZSkge1xuICBpZiAocmVzLlN0YXR1cyAhPT0gQUNLTk9XTEVER0VEKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke25hbWV9IGVycm9yOiAke0pTT04uc3RyaW5naWZ5KHJlcyl9YCk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuY2xhc3MgTUNJbnN0YWxsUHJveHlTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2VQbGlzdCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFByb2ZpbGVMaXN0XG4gICAqIEBwcm9wZXJ0eSB7QXJyYXl9IE9yZGVyZWRJZGVudGlmaWVycyBsaXN0IG9mIGFsbCBwcm9maWxlIGlkZW50XG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBQcm9maWxlTWFuaWZlc3RcbiAgICogQHByb3BlcnR5IHtPYmplY3R9IFByb2ZpbGVNZXRhZGF0YVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gU3RhdHVzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHByb2ZpbGVzIG9mIGlPUyBkZXZpY2VzXG4gICAqIEByZXR1cm5zIHtQcm9maWxlTGlzdH1cbiAgICogZS5nLlxuICAgKiB7XG4gICAqICAgT3JkZXJlZElkZW50aWZpZXJzOiBbICcyZmFjMWMyYjNkNjg0ODQzMTg5YjI5ODFjNzE4YjAxMzI4NTRhODQ3YScgXSxcbiAgICogICBQcm9maWxlTWFuaWZlc3Q6IHtcbiAgICogICAgICcyZmFjMWMyYjNkNjg0ODQzMTg5YjI5ODFjNzE4YjAxMzI4NTRhODQ3YSc6IHtcbiAgICogICAgICAgRGVzY3JpcHRpb246ICdDaGFybGVzIFByb3h5IENBICg3IERlYyAyMDIwLCBNYWNCb29rLVByby5sb2NhbCknLFxuICAgKiAgICAgICBJc0FjdGl2ZTogdHJ1ZVxuICAgKiAgICAgfVxuICAgKiAgIH0sXG4gICAqICAgUHJvZmlsZU1ldGFkYXRhOiB7XG4gICAqICAgICAnMmZhYzFjMmIzZDY4NDg0MzE4OWIyOTgxYzcxOGIwMTMyODU0YTg0N2EnOiB7XG4gICAqICAgICAgIFBheWxvYWREaXNwbGF5TmFtZTogJ0NoYXJsZXMgUHJveHkgQ0EgKDcgRGVjIDIwMjAsIE1hY0Jvb2stUHJvLmxvY2FsKScsXG4gICAqICAgICAgIFBheWxvYWRSZW1vdmFsRGlzYWxsb3dlZDogZmFsc2UsXG4gICAqICAgICAgIFBheWxvYWRVVUlEOiAnQjMwMDA1Q0MtQkM3My00RTQyLTg1NDUtOERBNkM0NEE4QTcxJyxcbiAgICogICAgICAgUGF5bG9hZFZlcnNpb246IDFcbiAgICogICAgIH1cbiAgICogICB9LFxuICAgKiAgIFN0YXR1czogJ0Fja25vd2xlZGdlZCdcbiAgICogfVxuICAgKi9cbiAgYXN5bmMgZ2V0UHJvZmlsZUxpc3QgKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3BsaXN0U2VydmljZS5zZW5kUGxpc3RBbmRSZWNlaXZlKHtSZXF1ZXN0VHlwZTogJ0dldFByb2ZpbGVMaXN0J30pO1xuICAgIHJldHVybiBjaGVja0FDSyhyZXMsICdnZXRQcm9maWxlTGlzdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbGwgcHJvZmlsZSB0byBpT1MgZGV2aWNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoICBtdXN0IGJlIGEgY2VydGlmaWNhdGUgZmlsZSAuUEVNIC5DRVIgYW5kIG1vcmUgZm9ybWF0c1xuICAgKiBlLmc6IC9Eb3dubG9hZHMvY2hhcmxlcy1jZXJ0aWZpY2F0ZS5wZW1cbiAgICogQHJldHVybnMge09iamVjdH0gZS5nLiB7U3RhdHVzOiAnQWNrbm93bGVkZ2VkJ31cbiAgICovXG4gIGFzeW5jIGluc3RhbGxQcm9maWxlIChwYXRoKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IGZzLnJlYWRGaWxlKHBhdGgpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3BsaXN0U2VydmljZS5zZW5kUGxpc3RBbmRSZWNlaXZlKHsnUmVxdWVzdFR5cGUnOiAnSW5zdGFsbFByb2ZpbGUnLCAnUGF5bG9hZCc6IHBheWxvYWR9KTtcbiAgICByZXR1cm4gY2hlY2tBQ0socmVzLCAnaW5zdGFsbFByb2ZpbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgcHJvZmlsZSBmcm9tIGlPUyBkZXZpY2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50ICBRdWVyeSBpZGVudGlmaWVyIGxpc3QgdGhyb3VnaCBnZXRQcm9maWxlTGlzdCBtZXRob2RcbiAgICogQHJldHVybnMge09iamVjdH0gZS5nLiB7U3RhdHVzOiAnQWNrbm93bGVkZ2VkJ31cbiAgICovXG4gIGFzeW5jIHJlbW92ZVByb2ZpbGUgKGlkZW50KSB7XG4gICAgY29uc3QgcHJvZmlsZXMgPSBhd2FpdCB0aGlzLmdldFByb2ZpbGVMaXN0KCk7XG4gICAgY29uc3QgbWV0YSA9IHByb2ZpbGVzLlByb2ZpbGVNZXRhZGF0YVtpZGVudF07XG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBmaW5kIGluc3RhbGxlZCBwcm9maWxlIGlkZW50OiR7aWRlbnR9YCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBwbGlzdC5jcmVhdGVCaW5hcnlQbGlzdCh7J1BheWxvYWRUeXBlJzogJ0NvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BheWxvYWRJZGVudGlmaWVyJzogaWRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGF5bG9hZFVVSUQnOiBtZXRhLlBheWxvYWRVVUlELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BheWxvYWRWZXJzaW9uJzogbWV0YS5QYXlsb2FkVmVyc2lvbn0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX3BsaXN0U2VydmljZS5zZW5kUGxpc3RBbmRSZWNlaXZlKHsnUmVxdWVzdFR5cGUnOiAnUmVtb3ZlUHJvZmlsZScsICdQcm9maWxlSWRlbnRpZmllcic6IGRhdGF9KTtcbiAgICByZXR1cm4gY2hlY2tBQ0socmVzLCAncmVtb3ZlUHJvZmlsZScpO1xuICB9XG59XG5cbmV4cG9ydCB7IE1DSW5zdGFsbFByb3h5U2VydmljZSwgTUNfSU5TVEFMTF9TRVJWSUNFX05BTUUgfTtcbmV4cG9ydCBkZWZhdWx0IE1DSW5zdGFsbFByb3h5U2VydmljZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsdUJBQXVCLEdBQUcsNEJBQWhDOztBQUNBLE1BQU1DLFlBQVksR0FBRyxjQUFyQjs7QUFFQSxTQUFTQyxRQUFULENBQW1CQyxHQUFuQixFQUF3QkMsSUFBeEIsRUFBOEI7RUFDNUIsSUFBSUQsR0FBRyxDQUFDRSxNQUFKLEtBQWVKLFlBQW5CLEVBQWlDO0lBQy9CLE1BQU0sSUFBSUssS0FBSixDQUFXLEdBQUVGLElBQUssV0FBVUcsSUFBSSxDQUFDQyxTQUFMLENBQWVMLEdBQWYsQ0FBb0IsRUFBaEQsQ0FBTjtFQUNEOztFQUNELE9BQU9BLEdBQVA7QUFDRDs7QUFFRCxNQUFNTSxxQkFBTixTQUFvQ0MsNkJBQXBDLENBQXFEO0VBQ25EQyxXQUFXLENBQUVDLFlBQUYsRUFBZ0I7SUFDekIsTUFBTUEsWUFBTjtFQUNEOztFQWlDbUIsTUFBZEMsY0FBYyxHQUFJO0lBQ3RCLE1BQU1WLEdBQUcsR0FBRyxNQUFNLEtBQUtXLGFBQUwsQ0FBbUJDLG1CQUFuQixDQUF1QztNQUFDQyxXQUFXLEVBQUU7SUFBZCxDQUF2QyxDQUFsQjtJQUNBLE9BQU9kLFFBQVEsQ0FBQ0MsR0FBRCxFQUFNLGdCQUFOLENBQWY7RUFDRDs7RUFRbUIsTUFBZGMsY0FBYyxDQUFFQyxJQUFGLEVBQVE7SUFDMUIsTUFBTUMsT0FBTyxHQUFHLE1BQU1DLFdBQUEsQ0FBR0MsUUFBSCxDQUFZSCxJQUFaLENBQXRCO0lBQ0EsTUFBTWYsR0FBRyxHQUFHLE1BQU0sS0FBS1csYUFBTCxDQUFtQkMsbUJBQW5CLENBQXVDO01BQUMsZUFBZSxnQkFBaEI7TUFBa0MsV0FBV0k7SUFBN0MsQ0FBdkMsQ0FBbEI7SUFDQSxPQUFPakIsUUFBUSxDQUFDQyxHQUFELEVBQU0sZ0JBQU4sQ0FBZjtFQUNEOztFQU9rQixNQUFibUIsYUFBYSxDQUFFQyxLQUFGLEVBQVM7SUFDMUIsTUFBTUMsUUFBUSxHQUFHLE1BQU0sS0FBS1gsY0FBTCxFQUF2QjtJQUNBLE1BQU1ZLElBQUksR0FBR0QsUUFBUSxDQUFDRSxlQUFULENBQXlCSCxLQUF6QixDQUFiOztJQUNBLElBQUksQ0FBQ0UsSUFBTCxFQUFXO01BQ1QsTUFBTSxJQUFJbkIsS0FBSixDQUFXLG9DQUFtQ2lCLEtBQU0sRUFBcEQsQ0FBTjtJQUNEOztJQUNELE1BQU1JLElBQUksR0FBR0MsY0FBQSxDQUFNQyxpQkFBTixDQUF3QjtNQUFDLGVBQWUsZUFBaEI7TUFDQyxxQkFBcUJOLEtBRHRCO01BRUMsZUFBZUUsSUFBSSxDQUFDSyxXQUZyQjtNQUdDLGtCQUFrQkwsSUFBSSxDQUFDTTtJQUh4QixDQUF4QixDQUFiOztJQUlBLE1BQU01QixHQUFHLEdBQUcsTUFBTSxLQUFLVyxhQUFMLENBQW1CQyxtQkFBbkIsQ0FBdUM7TUFBQyxlQUFlLGVBQWhCO01BQWlDLHFCQUFxQlk7SUFBdEQsQ0FBdkMsQ0FBbEI7SUFDQSxPQUFPekIsUUFBUSxDQUFDQyxHQUFELEVBQU0sZUFBTixDQUFmO0VBQ0Q7O0FBdEVrRDs7O2VBMEV0Q00scUIifQ==