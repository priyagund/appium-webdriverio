"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UsbmuxEncoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _support = require("@appium/support");

const HEADER_LENGTH = 16;
const VERSION = 1;
const TYPE = 8;

class UsbmuxEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }

  _transform(data, encoding, onData) {
    this._encode(data);

    onData();
  }

  _encode(data) {
    const payloadBuffer = Buffer.from(_support.plist.createPlist(data.payload, false));
    const header = {
      length: HEADER_LENGTH + payloadBuffer.length,
      version: VERSION,
      type: TYPE,
      tag: data.tag
    };
    const headerBuffer = Buffer.allocUnsafe(HEADER_LENGTH);
    headerBuffer.writeUInt32LE(header.length, 0);
    headerBuffer.writeUInt32LE(header.version, 4);
    headerBuffer.writeUInt32LE(header.type, 8);
    headerBuffer.writeUInt32LE(header.tag, 12);
    this.push(Buffer.concat([headerBuffer, payloadBuffer], headerBuffer.length + payloadBuffer.length));
  }

}

exports.UsbmuxEncoder = UsbmuxEncoder;
var _default = UsbmuxEncoder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIRUFERVJfTEVOR1RIIiwiVkVSU0lPTiIsIlRZUEUiLCJVc2JtdXhFbmNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsIm9uRGF0YSIsIl9lbmNvZGUiLCJwYXlsb2FkQnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsInBsaXN0IiwiY3JlYXRlUGxpc3QiLCJwYXlsb2FkIiwiaGVhZGVyIiwibGVuZ3RoIiwidmVyc2lvbiIsInR5cGUiLCJ0YWciLCJoZWFkZXJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIndyaXRlVUludDMyTEUiLCJwdXNoIiwiY29uY2F0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL3VzYm11eC90cmFuc2Zvcm1lci91c2JtdXgtZW5jb2Rlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBwbGlzdCB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cbmNvbnN0IEhFQURFUl9MRU5HVEggPSAxNjtcbmNvbnN0IFZFUlNJT04gPSAxO1xuY29uc3QgVFlQRSA9IDg7XG5cbmNsYXNzIFVzYm11eEVuY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICB0aGlzLl9lbmNvZGUoZGF0YSk7XG4gICAgb25EYXRhKCk7XG4gIH1cblxuICBfZW5jb2RlIChkYXRhKSB7XG4gICAgY29uc3QgcGF5bG9hZEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHBsaXN0LmNyZWF0ZVBsaXN0KGRhdGEucGF5bG9hZCwgZmFsc2UpKTtcblxuICAgIGNvbnN0IGhlYWRlciA9IHtcbiAgICAgIGxlbmd0aDogSEVBREVSX0xFTkdUSCArIHBheWxvYWRCdWZmZXIubGVuZ3RoLFxuICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICAgIHR5cGU6IFRZUEUsXG4gICAgICB0YWc6IGRhdGEudGFnXG4gICAgfTtcblxuICAgIGNvbnN0IGhlYWRlckJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShIRUFERVJfTEVOR1RIKTtcbiAgICBoZWFkZXJCdWZmZXIud3JpdGVVSW50MzJMRShoZWFkZXIubGVuZ3RoLCAwKTtcbiAgICBoZWFkZXJCdWZmZXIud3JpdGVVSW50MzJMRShoZWFkZXIudmVyc2lvbiwgNCk7XG4gICAgaGVhZGVyQnVmZmVyLndyaXRlVUludDMyTEUoaGVhZGVyLnR5cGUsIDgpO1xuICAgIGhlYWRlckJ1ZmZlci53cml0ZVVJbnQzMkxFKGhlYWRlci50YWcsIDEyKTtcblxuICAgIHRoaXMucHVzaChCdWZmZXIuY29uY2F0KFtoZWFkZXJCdWZmZXIsIHBheWxvYWRCdWZmZXJdLCBoZWFkZXJCdWZmZXIubGVuZ3RoICsgcGF5bG9hZEJ1ZmZlci5sZW5ndGgpKTtcbiAgfVxufVxuXG5leHBvcnQgeyBVc2JtdXhFbmNvZGVyfTtcbmV4cG9ydCBkZWZhdWx0IFVzYm11eEVuY29kZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLENBQWhCO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLENBQWI7O0FBRUEsTUFBTUMsYUFBTixTQUE0QkMsZUFBQSxDQUFPQyxTQUFuQyxDQUE2QztFQUMzQ0MsV0FBVyxHQUFJO0lBQ2IsTUFBTTtNQUFFQyxVQUFVLEVBQUU7SUFBZCxDQUFOO0VBQ0Q7O0VBRURDLFVBQVUsQ0FBRUMsSUFBRixFQUFRQyxRQUFSLEVBQWtCQyxNQUFsQixFQUEwQjtJQUNsQyxLQUFLQyxPQUFMLENBQWFILElBQWI7O0lBQ0FFLE1BQU07RUFDUDs7RUFFREMsT0FBTyxDQUFFSCxJQUFGLEVBQVE7SUFDYixNQUFNSSxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZQyxjQUFBLENBQU1DLFdBQU4sQ0FBa0JSLElBQUksQ0FBQ1MsT0FBdkIsRUFBZ0MsS0FBaEMsQ0FBWixDQUF0QjtJQUVBLE1BQU1DLE1BQU0sR0FBRztNQUNiQyxNQUFNLEVBQUVwQixhQUFhLEdBQUdhLGFBQWEsQ0FBQ08sTUFEekI7TUFFYkMsT0FBTyxFQUFFcEIsT0FGSTtNQUdicUIsSUFBSSxFQUFFcEIsSUFITztNQUlicUIsR0FBRyxFQUFFZCxJQUFJLENBQUNjO0lBSkcsQ0FBZjtJQU9BLE1BQU1DLFlBQVksR0FBR1YsTUFBTSxDQUFDVyxXQUFQLENBQW1CekIsYUFBbkIsQ0FBckI7SUFDQXdCLFlBQVksQ0FBQ0UsYUFBYixDQUEyQlAsTUFBTSxDQUFDQyxNQUFsQyxFQUEwQyxDQUExQztJQUNBSSxZQUFZLENBQUNFLGFBQWIsQ0FBMkJQLE1BQU0sQ0FBQ0UsT0FBbEMsRUFBMkMsQ0FBM0M7SUFDQUcsWUFBWSxDQUFDRSxhQUFiLENBQTJCUCxNQUFNLENBQUNHLElBQWxDLEVBQXdDLENBQXhDO0lBQ0FFLFlBQVksQ0FBQ0UsYUFBYixDQUEyQlAsTUFBTSxDQUFDSSxHQUFsQyxFQUF1QyxFQUF2QztJQUVBLEtBQUtJLElBQUwsQ0FBVWIsTUFBTSxDQUFDYyxNQUFQLENBQWMsQ0FBQ0osWUFBRCxFQUFlWCxhQUFmLENBQWQsRUFBNkNXLFlBQVksQ0FBQ0osTUFBYixHQUFzQlAsYUFBYSxDQUFDTyxNQUFqRixDQUFWO0VBQ0Q7O0FBM0IwQzs7O2VBK0I5QmpCLGEifQ==