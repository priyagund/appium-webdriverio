"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StreamLogger = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../../logger"));

const MIN_PRINTABLE_CHAR = 32;
const MAX_PRINTABLE_CHAR = 126;
const CHARACTERS_PER_LINE = 19;

class StreamLogger extends _stream.default.Transform {
  constructor(direction, verbose = false) {
    super({
      objectMode: true
    });
    this._direction = direction;
    this._verbose = verbose;
  }

  _transform(data, encoding, onData) {
    if (this._verbose) {
      try {
        this._log(data);
      } catch (err) {
        _logger.default.debug(`Error logging data: ${err.message}`);
      }
    }

    this.push(data);
    onData();
  }

  _log(data) {
    _logger.default.debug(`Data ${this._direction === StreamLogger.SEND ? 'sent' : 'received'}, length: ${data.length}`);

    let i = 0;

    while (i < data.length) {
      let hex = [],
          char = [];

      for (let j = 0; j < CHARACTERS_PER_LINE; j++) {
        if (i >= data.length) {
          hex[j] = '  ';
          continue;
        }

        const charCode = data[i++];
        hex[j] = _lodash.default.padStart(charCode.toString(16).toUpperCase(), 2, '0');
        char[j] = charCode < MIN_PRINTABLE_CHAR || charCode > MAX_PRINTABLE_CHAR ? '.' : String.fromCharCode(charCode);
      }

      _logger.default.debug(`${hex.join(' ')} ${char.join('')}`);
    }
  }

}

exports.StreamLogger = StreamLogger;
StreamLogger.SEND = 0;
StreamLogger.RECEIVE = 1;
var _default = StreamLogger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNSU5fUFJJTlRBQkxFX0NIQVIiLCJNQVhfUFJJTlRBQkxFX0NIQVIiLCJDSEFSQUNURVJTX1BFUl9MSU5FIiwiU3RyZWFtTG9nZ2VyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJkaXJlY3Rpb24iLCJ2ZXJib3NlIiwib2JqZWN0TW9kZSIsIl9kaXJlY3Rpb24iLCJfdmVyYm9zZSIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJfbG9nIiwiZXJyIiwibG9nIiwiZGVidWciLCJtZXNzYWdlIiwicHVzaCIsIlNFTkQiLCJsZW5ndGgiLCJpIiwiaGV4IiwiY2hhciIsImoiLCJjaGFyQ29kZSIsIl8iLCJwYWRTdGFydCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiUkVDRUlWRSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi91dGlsL3RyYW5zZm9ybWVyL3N0cmVhbS1sb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vLi4vbG9nZ2VyJztcblxuXG5jb25zdCBNSU5fUFJJTlRBQkxFX0NIQVIgPSAzMjtcbmNvbnN0IE1BWF9QUklOVEFCTEVfQ0hBUiA9IDEyNjtcblxuY29uc3QgQ0hBUkFDVEVSU19QRVJfTElORSA9IDE5O1xuXG5jbGFzcyBTdHJlYW1Mb2dnZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IgKGRpcmVjdGlvbiwgdmVyYm9zZSA9IGZhbHNlKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuXG4gICAgdGhpcy5fZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIHRoaXMuX3ZlcmJvc2UgPSB2ZXJib3NlO1xuICB9XG5cbiAgX3RyYW5zZm9ybSAoZGF0YSwgZW5jb2RpbmcsIG9uRGF0YSkge1xuICAgIGlmICh0aGlzLl92ZXJib3NlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9sb2coZGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gaW4gY2FzZSBzb21ldGhpbmcgZ29lcyB3cm9uZywgbG9nIGl0IHNvIHdlIGNhbiBmaXggdGhlIHBhcnNpbmdcbiAgICAgICAgLy8gYW5kIGFsc28gYWxsb3cgZXZlcnl0aGluZyB0byBjb250aW51ZSB3aXRob3V0IGludGVycnVwdGlvblxuICAgICAgICBsb2cuZGVidWcoYEVycm9yIGxvZ2dpbmcgZGF0YTogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnB1c2goZGF0YSk7XG4gICAgb25EYXRhKCk7XG4gIH1cblxuICBfbG9nIChkYXRhKSB7XG4gICAgbG9nLmRlYnVnKGBEYXRhICR7dGhpcy5fZGlyZWN0aW9uID09PSBTdHJlYW1Mb2dnZXIuU0VORCA/ICdzZW50JyA6ICdyZWNlaXZlZCd9LCBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9YCk7XG5cbiAgICAvLyBmb3JtYXQgYXMgdXNlZCBieSBpb3Mtd2Via2l0LWRlYnVnLXByb3h5IGFzIHdlbGwgYXMgdG9vbHMgbGlrZSBzb2NhdFxuICAgIC8vIHByaW50IG91dCB0aGUgZGF0YSBpbiB0d28gc2VjdGlvbnMsIG9uZSB0aGUgaGV4YWRlY2ltYWwgcmVuZGVyaW5ncyBvZiB0aGUgY2hhcmFjdGVycyxcbiAgICAvLyB0aGUgb3RoZXIgdGhlIHByaW50YWJsZSBjaGFyYWN0ZXJzICh3aXRoICcuJyBmb3IgdW5wcmludGFibGUgY2hhcmFjdGVycykuXG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxldCBoZXggPSBbXSwgY2hhciA9IFtdO1xuICAgICAgLy8gY3JlYXRlIGVhY2ggbGluZSBvZiB0ZXh0IHRvIG91dHB1dFxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBDSEFSQUNURVJTX1BFUl9MSU5FOyBqKyspIHtcbiAgICAgICAgaWYgKGkgPj0gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBmaWxsIGluIHRoZSBjaGFyY29kZSBzZWN0aW9uIHdpdGggYmxhbmtzLCBmb3IgZm9ybWF0dGluZyxcbiAgICAgICAgICAvLyB3aGVuIHRoZXJlIGlzIG5vIG1vcmUgZGF0YVxuICAgICAgICAgIGhleFtqXSA9ICcgICc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhckNvZGUgPSBkYXRhW2krK107XG4gICAgICAgIC8vIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uLCBmb3JjZWQgaW50byAyIHBsYWNlc1xuICAgICAgICBoZXhbal0gPSBfLnBhZFN0YXJ0KGNoYXJDb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLCAyLCAnMCcpO1xuICAgICAgICAvLyBjaGFyYWN0ZXIgcmVwcmVzZW50YXRpb24sIHdpdGggJy4nIHdoZW4gdW5wcmludGFibGVcbiAgICAgICAgY2hhcltqXSA9IGNoYXJDb2RlIDwgTUlOX1BSSU5UQUJMRV9DSEFSIHx8IGNoYXJDb2RlID4gTUFYX1BSSU5UQUJMRV9DSEFSXG4gICAgICAgICAgPyAnLidcbiAgICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKGAke2hleC5qb2luKCcgJyl9ICR7Y2hhci5qb2luKCcnKX1gKTtcbiAgICB9XG4gIH1cbn1cblxuU3RyZWFtTG9nZ2VyLlNFTkQgPSAwO1xuU3RyZWFtTG9nZ2VyLlJFQ0VJVkUgPSAxO1xuXG5leHBvcnQgeyBTdHJlYW1Mb2dnZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFN0cmVhbUxvZ2dlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxrQkFBa0IsR0FBRyxFQUEzQjtBQUNBLE1BQU1DLGtCQUFrQixHQUFHLEdBQTNCO0FBRUEsTUFBTUMsbUJBQW1CLEdBQUcsRUFBNUI7O0FBRUEsTUFBTUMsWUFBTixTQUEyQkMsZUFBQSxDQUFPQyxTQUFsQyxDQUE0QztFQUMxQ0MsV0FBVyxDQUFFQyxTQUFGLEVBQWFDLE9BQU8sR0FBRyxLQUF2QixFQUE4QjtJQUN2QyxNQUFNO01BQUVDLFVBQVUsRUFBRTtJQUFkLENBQU47SUFFQSxLQUFLQyxVQUFMLEdBQWtCSCxTQUFsQjtJQUNBLEtBQUtJLFFBQUwsR0FBZ0JILE9BQWhCO0VBQ0Q7O0VBRURJLFVBQVUsQ0FBRUMsSUFBRixFQUFRQyxRQUFSLEVBQWtCQyxNQUFsQixFQUEwQjtJQUNsQyxJQUFJLEtBQUtKLFFBQVQsRUFBbUI7TUFDakIsSUFBSTtRQUNGLEtBQUtLLElBQUwsQ0FBVUgsSUFBVjtNQUNELENBRkQsQ0FFRSxPQUFPSSxHQUFQLEVBQVk7UUFHWkMsZUFBQSxDQUFJQyxLQUFKLENBQVcsdUJBQXNCRixHQUFHLENBQUNHLE9BQVEsRUFBN0M7TUFDRDtJQUNGOztJQUVELEtBQUtDLElBQUwsQ0FBVVIsSUFBVjtJQUNBRSxNQUFNO0VBQ1A7O0VBRURDLElBQUksQ0FBRUgsSUFBRixFQUFRO0lBQ1ZLLGVBQUEsQ0FBSUMsS0FBSixDQUFXLFFBQU8sS0FBS1QsVUFBTCxLQUFvQlAsWUFBWSxDQUFDbUIsSUFBakMsR0FBd0MsTUFBeEMsR0FBaUQsVUFBVyxhQUFZVCxJQUFJLENBQUNVLE1BQU8sRUFBdEc7O0lBS0EsSUFBSUMsQ0FBQyxHQUFHLENBQVI7O0lBQ0EsT0FBT0EsQ0FBQyxHQUFHWCxJQUFJLENBQUNVLE1BQWhCLEVBQXdCO01BQ3RCLElBQUlFLEdBQUcsR0FBRyxFQUFWO01BQUEsSUFBY0MsSUFBSSxHQUFHLEVBQXJCOztNQUVBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLG1CQUFwQixFQUF5Q3lCLENBQUMsRUFBMUMsRUFBOEM7UUFDNUMsSUFBSUgsQ0FBQyxJQUFJWCxJQUFJLENBQUNVLE1BQWQsRUFBc0I7VUFHcEJFLEdBQUcsQ0FBQ0UsQ0FBRCxDQUFILEdBQVMsSUFBVDtVQUNBO1FBQ0Q7O1FBQ0QsTUFBTUMsUUFBUSxHQUFHZixJQUFJLENBQUNXLENBQUMsRUFBRixDQUFyQjtRQUVBQyxHQUFHLENBQUNFLENBQUQsQ0FBSCxHQUFTRSxlQUFBLENBQUVDLFFBQUYsQ0FBV0YsUUFBUSxDQUFDRyxRQUFULENBQWtCLEVBQWxCLEVBQXNCQyxXQUF0QixFQUFYLEVBQWdELENBQWhELEVBQW1ELEdBQW5ELENBQVQ7UUFFQU4sSUFBSSxDQUFDQyxDQUFELENBQUosR0FBVUMsUUFBUSxHQUFHNUIsa0JBQVgsSUFBaUM0QixRQUFRLEdBQUczQixrQkFBNUMsR0FDTixHQURNLEdBRU5nQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JOLFFBQXBCLENBRko7TUFHRDs7TUFDRFYsZUFBQSxDQUFJQyxLQUFKLENBQVcsR0FBRU0sR0FBRyxDQUFDVSxJQUFKLENBQVMsR0FBVCxDQUFjLElBQUdULElBQUksQ0FBQ1MsSUFBTCxDQUFVLEVBQVYsQ0FBYyxFQUE1QztJQUNEO0VBQ0Y7O0FBbER5Qzs7O0FBcUQ1Q2hDLFlBQVksQ0FBQ21CLElBQWIsR0FBb0IsQ0FBcEI7QUFDQW5CLFlBQVksQ0FBQ2lDLE9BQWIsR0FBdUIsQ0FBdkI7ZUFHZWpDLFkifQ==