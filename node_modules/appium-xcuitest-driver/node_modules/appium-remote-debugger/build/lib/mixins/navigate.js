"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _events = _interopRequireDefault(require("./events"));

var _support = require("appium/support");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function frameDetached() {
  this.emit(_events.default.EVENT_FRAMES_DETACHED);
}

async function pageLoad(startPageLoadTimer, pageLoadVerifyHook = _lodash.default.noop) {
  var _startPageLoadTimer;

  const timeoutMs = 500;

  if (!_lodash.default.isFunction((_startPageLoadTimer = startPageLoadTimer) === null || _startPageLoadTimer === void 0 ? void 0 : _startPageLoadTimer.getDuration)) {
    _logger.default.debug(`Page load timer not a timer. Creating new timer`);

    startPageLoadTimer = new _support.timing.Timer().start();
  }

  _logger.default.debug('Page loaded, verifying whether ready');

  this.pageLoading = true;

  const verify = async () => {
    this.pageLoadDelay = _support.util.cancellableDelay(timeoutMs);

    try {
      await this.pageLoadDelay;
    } catch (err) {
      if (err instanceof _bluebird.default.CancellationError) {
        return;
      }
    }

    if (!this.appIdKey) {
      _logger.default.debug('Not connected to an application. Ignoring page load');

      return;
    }

    if (_lodash.default.isFunction(pageLoadVerifyHook)) {
      await pageLoadVerifyHook();
    }

    const elapsedMs = startPageLoadTimer.getDuration().asMilliSeconds;

    if ((await this.checkPageIsReady()) || this.pageLoadMs > 0 && elapsedMs > this.pageLoadMs) {
      _logger.default.debug('Page is ready');

      this.pageLoading = false;
    } else {
      _logger.default.debug('Page was not ready, retrying');

      await verify();
    }
  };

  try {
    await verify();
  } finally {
    _logger.default.debug(`Page load completed in ${startPageLoadTimer.getDuration().asMilliSeconds.toFixed(0)}ms`);

    this.pageLoading = false;
  }
}

function cancelPageLoad() {
  _logger.default.debug('Unregistering from page readiness notifications');

  this.pageLoading = false;

  if (this.pageLoadDelay) {
    this.pageLoadDelay.cancel();
  }
}

async function pageUnload() {
  _logger.default.debug('Page unloading');

  await this.waitForDom();
}

async function waitForDom(startPageLoadTimer, pageLoadVerifyHook) {
  _logger.default.debug('Waiting for dom...');

  await this.pageLoad(startPageLoadTimer, pageLoadVerifyHook);
}

async function checkPageIsReady() {
  (0, _utils.checkParams)({
    appIdKey: this.appIdKey
  });

  _logger.default.debug('Checking document readyState');

  const readyCmd = 'document.readyState;';
  let readyState = 'loading';

  try {
    readyState = await _bluebird.default.resolve(this.execute(readyCmd, true)).timeout(this.pageReadyTimeout);
  } catch (err) {
    if (!(err instanceof _bluebird.default.TimeoutError)) {
      throw err;
    }

    _logger.default.debug(`Page readiness check timed out after ${this.pageReadyTimeout}ms`);

    return false;
  }

  _logger.default.debug(`Document readyState is '${readyState}'`);

  return readyState === 'complete';
}

async function navToUrl(url, pageLoadVerifyHook) {
  (0, _utils.checkParams)({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  this._navigatingToPage = true;

  try {
    _logger.default.debug(`Navigating to new URL: '${url}'`);

    const waitForFramePromise = this.waitForFrameNavigated();
    await this.rpcClient.send('Page.navigate', {
      url,
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });

    if (!this.useNewSafari) {
      await _bluebird.default.delay(1000);
    }

    await waitForFramePromise;
    await this.waitForDom(new _support.timing.Timer().start(), pageLoadVerifyHook);
    await this.rpcClient.send('Console.enable', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  } finally {
    this._navigatingToPage = false;
  }
}

async function waitForFrameNavigated() {
  let navEventListener;
  return await new _bluebird.default(async resolve => {
    _logger.default.debug('Waiting for frame navigated message...');

    const start = new _support.timing.Timer().start();

    navEventListener = (err, value) => {
      _logger.default.debug(`Frame navigated in ${start.getDuration().asMilliSeconds.toFixed(0)}ms from: ${value}`);

      if (!this.allowNavigationWithoutReload && !this.pageLoading) {
        resolve(value);
      } else {
        _logger.default.debug('Frame navigated but we were warned about it, not ' + 'considering page state unloaded');

        this.allowNavigationWithoutReload = false;
      }

      if (this.navigationDelay) {
        this.navigationDelay.cancel();
      }
    };

    this.rpcClient.once('Page.frameNavigated', navEventListener);

    if (!this.useNewSafari || this.pageLoadMs >= 0) {
      const timeout = this.useNewSafari ? this.pageLoadMs : 500;
      this.navigationDelay = _support.util.cancellableDelay(timeout);

      try {
        await this.navigationDelay;
        navEventListener(null, `${timeout}ms timeout`);
      } catch (err) {}
    }
  }).finally(() => {
    if (navEventListener) {
      this.rpcClient.off('Page.frameNavigated', navEventListener);
    }
  });
}

var _default = {
  frameDetached,
  pageLoad,
  cancelPageLoad,
  pageUnload,
  waitForDom,
  checkPageIsReady,
  navToUrl,
  waitForFrameNavigated
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,