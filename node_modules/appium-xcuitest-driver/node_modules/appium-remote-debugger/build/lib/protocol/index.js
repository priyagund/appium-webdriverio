"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getProtocolCommand = getProtocolCommand;

require("source-map-support/register");

const OBJECT_GROUP = 'console';
const COMMANDS = {
  'ApplicationCache.enable': [],
  'ApplicationCache.getFramesWithManifests': [],
  'Canvas.enable': [],
  'Console.disable': [],
  'Console.enable': [],
  'Console.getLoggingChannels': [],
  'Console.setLoggingChannelLevel': ['source', 'level'],
  'CSS.enable': [],
  'Database.enable': [],
  'Debugger.enable': [],
  'Debugger.setAsyncStackTraceDepth': ['depth'],
  'Debugger.setBreakpointsActive': ['active'],
  'Debugger.setPauseForInternalScripts': ['shouldPause'],
  'Debugger.setPauseOnAssertions': ['enabled'],
  'Debugger.setPauseOnExceptions': ['state'],
  'DOM.getDocument': [],
  'DOMStorage.enable': [],
  'Heap.enable': [],
  'Heap.gc': [],
  'IndexedDB.enable': [],
  'Inspector.enable': [],
  'Inspector.initialized': [],
  'LayerTree.enable': [],
  'Memory.enable': [],
  'Network.disable': [],
  'Network.enable': [],
  'Network.setResourceCachingDisabled': ['disabled'],
  'Page.deleteCookie': ['cookieName', 'url'],
  'Page.enable': [],
  'Page.getCookies': ['urls'],
  'Page.getResourceTree': [],
  'Page.navigate': ['url'],
  'Runtime.awaitPromise': ['promiseObjectId', 'returnByValue', 'generatePreview', 'saveResult'],
  'Runtime.callFunctionOn': ['objectId', 'functionDeclaration', 'arguments', 'returnByValue'],
  'Runtime.enable': [],
  'Runtime.evaluate': ['expression', 'returnByValue', 'contextId'],
  'Target.exists': [],
  'Timeline.setAutoCaptureEnabled': ['enabled'],
  'Timeline.setInstruments': ['instruments'],
  'Timeline.start': [],
  'Timeline.stop': [],
  'Worker.enable': []
};

function getCommand(id, method, params = {}) {
  return {
    id,
    method,
    params: Object.assign({
      objectGroup: OBJECT_GROUP,
      includeCommandLineAPI: true,
      doNotPauseOnExceptionsAndMuteConsole: false,
      emulateUserGesture: false,
      generatePreview: false,
      saveResult: false
    }, params)
  };
}

function getProtocolCommand(id, method, opts = {}) {
  const paramNames = COMMANDS[method];

  if (!paramNames) {
    throw new Error(`Unknown command: '${method}'`);
  }

  const params = paramNames.reduce(function (params, name) {
    params[name] = opts[name];
    return params;
  }, {});
  return getCommand(id, method, params);
}

var _default = getProtocolCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPQkpFQ1RfR1JPVVAiLCJDT01NQU5EUyIsImdldENvbW1hbmQiLCJpZCIsIm1ldGhvZCIsInBhcmFtcyIsIk9iamVjdCIsImFzc2lnbiIsIm9iamVjdEdyb3VwIiwiaW5jbHVkZUNvbW1hbmRMaW5lQVBJIiwiZG9Ob3RQYXVzZU9uRXhjZXB0aW9uc0FuZE11dGVDb25zb2xlIiwiZW11bGF0ZVVzZXJHZXN0dXJlIiwiZ2VuZXJhdGVQcmV2aWV3Iiwic2F2ZVJlc3VsdCIsImdldFByb3RvY29sQ29tbWFuZCIsIm9wdHMiLCJwYXJhbU5hbWVzIiwiRXJyb3IiLCJyZWR1Y2UiLCJuYW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3Byb3RvY29sL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE9CSkVDVF9HUk9VUCA9ICdjb25zb2xlJztcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvd2Via2l0L3RyZWUvbWFzdGVyL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2xcbmNvbnN0IENPTU1BTkRTID0ge1xuICAvLyNyZWdpb24gQVBQTElDQVRJT05DQUNIRSBET01BSU5cbiAgJ0FwcGxpY2F0aW9uQ2FjaGUuZW5hYmxlJzogW10sXG4gICdBcHBsaWNhdGlvbkNhY2hlLmdldEZyYW1lc1dpdGhNYW5pZmVzdHMnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIENBTlZBUyBET01BSU5cbiAgJ0NhbnZhcy5lbmFibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIENPTlNPTEUgRE9NQUlOXG4gICdDb25zb2xlLmRpc2FibGUnOiBbXSxcbiAgJ0NvbnNvbGUuZW5hYmxlJzogW10sXG4gICdDb25zb2xlLmdldExvZ2dpbmdDaGFubmVscyc6IFtdLFxuICAnQ29uc29sZS5zZXRMb2dnaW5nQ2hhbm5lbExldmVsJzogWydzb3VyY2UnLCAnbGV2ZWwnXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIENTUyBET01BSU5cbiAgJ0NTUy5lbmFibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIERBVEFCQVNFIERPTUFJTlxuICAnRGF0YWJhc2UuZW5hYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBERUJVR0dFUiBET01BSU5cbiAgJ0RlYnVnZ2VyLmVuYWJsZSc6IFtdLFxuICAnRGVidWdnZXIuc2V0QXN5bmNTdGFja1RyYWNlRGVwdGgnOiBbJ2RlcHRoJ10sXG4gICdEZWJ1Z2dlci5zZXRCcmVha3BvaW50c0FjdGl2ZSc6IFsnYWN0aXZlJ10sXG4gICdEZWJ1Z2dlci5zZXRQYXVzZUZvckludGVybmFsU2NyaXB0cyc6IFsnc2hvdWxkUGF1c2UnXSxcbiAgJ0RlYnVnZ2VyLnNldFBhdXNlT25Bc3NlcnRpb25zJzogWydlbmFibGVkJ10sXG4gICdEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyc6IFsnc3RhdGUnXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIERPTSBET01BSU5cbiAgJ0RPTS5nZXREb2N1bWVudCc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gRE9NU1RPUkFHRSBET01BSU5cbiAgJ0RPTVN0b3JhZ2UuZW5hYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBIRUFQIERPTUFJTlxuICAnSGVhcC5lbmFibGUnOiBbXSxcbiAgJ0hlYXAuZ2MnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIElOREVYRUREQiBET01BSU5cbiAgJ0luZGV4ZWREQi5lbmFibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIElOU1BFQ1RPUiBET01BSU5cbiAgJ0luc3BlY3Rvci5lbmFibGUnOiBbXSxcbiAgJ0luc3BlY3Rvci5pbml0aWFsaXplZCc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gTEFZRVJUUkVFIERPTUFJTlxuICAnTGF5ZXJUcmVlLmVuYWJsZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gTUVNT1JZIERPTUFJTlxuICAnTWVtb3J5LmVuYWJsZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gTkVUV09SSyBET01BSU5cbiAgJ05ldHdvcmsuZGlzYWJsZSc6IFtdLFxuICAnTmV0d29yay5lbmFibGUnOiBbXSxcbiAgJ05ldHdvcmsuc2V0UmVzb3VyY2VDYWNoaW5nRGlzYWJsZWQnOiBbJ2Rpc2FibGVkJ10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBQQUdFIERPTUFJTlxuICAnUGFnZS5kZWxldGVDb29raWUnOiBbJ2Nvb2tpZU5hbWUnLCAndXJsJ10sXG4gICdQYWdlLmVuYWJsZSc6IFtdLFxuICAnUGFnZS5nZXRDb29raWVzJzogWyd1cmxzJ10sXG4gICdQYWdlLmdldFJlc291cmNlVHJlZSc6IFtdLFxuICAnUGFnZS5uYXZpZ2F0ZSc6IFsndXJsJ10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vI3JlZ2lvbiBSVU5USU1FIERPTUFJTlxuICAnUnVudGltZS5hd2FpdFByb21pc2UnOiBbJ3Byb21pc2VPYmplY3RJZCcsICdyZXR1cm5CeVZhbHVlJywgJ2dlbmVyYXRlUHJldmlldycsICdzYXZlUmVzdWx0J10sXG4gICdSdW50aW1lLmNhbGxGdW5jdGlvbk9uJzogWydvYmplY3RJZCcsICdmdW5jdGlvbkRlY2xhcmF0aW9uJywgJ2FyZ3VtZW50cycsICdyZXR1cm5CeVZhbHVlJ10sXG4gICdSdW50aW1lLmVuYWJsZSc6IFtdLFxuICAnUnVudGltZS5ldmFsdWF0ZSc6IFsnZXhwcmVzc2lvbicsICdyZXR1cm5CeVZhbHVlJywgJ2NvbnRleHRJZCddLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gVEFSR0VUIERPTUFJTlxuICAnVGFyZ2V0LmV4aXN0cyc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyNyZWdpb24gVElNRUxJTkUgRE9NQUlOXG4gICdUaW1lbGluZS5zZXRBdXRvQ2FwdHVyZUVuYWJsZWQnOiBbJ2VuYWJsZWQnXSxcbiAgJ1RpbWVsaW5lLnNldEluc3RydW1lbnRzJzogWydpbnN0cnVtZW50cyddLFxuICAnVGltZWxpbmUuc3RhcnQnOiBbXSxcbiAgJ1RpbWVsaW5lLnN0b3AnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8jcmVnaW9uIFdPUktFUiBET01BSU5cbiAgJ1dvcmtlci5lbmFibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG59O1xuXG5mdW5jdGlvbiBnZXRDb21tYW5kIChpZCwgbWV0aG9kLCBwYXJhbXMgPSB7fSkge1xuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIG1ldGhvZCxcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgb2JqZWN0R3JvdXA6IE9CSkVDVF9HUk9VUCxcbiAgICAgIGluY2x1ZGVDb21tYW5kTGluZUFQSTogdHJ1ZSxcbiAgICAgIGRvTm90UGF1c2VPbkV4Y2VwdGlvbnNBbmRNdXRlQ29uc29sZTogZmFsc2UsXG4gICAgICBlbXVsYXRlVXNlckdlc3R1cmU6IGZhbHNlLFxuICAgICAgZ2VuZXJhdGVQcmV2aWV3OiBmYWxzZSxcbiAgICAgIHNhdmVSZXN1bHQ6IGZhbHNlLFxuICAgIH0sIHBhcmFtcyksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFByb3RvY29sQ29tbWFuZCAoaWQsIG1ldGhvZCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHBhcmFtTmFtZXMgPSBDT01NQU5EU1ttZXRob2RdO1xuICBpZiAoIXBhcmFtTmFtZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY29tbWFuZDogJyR7bWV0aG9kfSdgKTtcbiAgfVxuXG4gIGNvbnN0IHBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlKGZ1bmN0aW9uIChwYXJhbXMsIG5hbWUpIHtcbiAgICBwYXJhbXNbbmFtZV0gPSBvcHRzW25hbWVdO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGdldENvbW1hbmQoaWQsIG1ldGhvZCwgcGFyYW1zKTtcbn1cblxuZXhwb3J0IHsgZ2V0UHJvdG9jb2xDb21tYW5kIH07XG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b2NvbENvbW1hbmQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxNQUFNQSxZQUFZLEdBQUcsU0FBckI7QUFHQSxNQUFNQyxRQUFRLEdBQUc7RUFFZiwyQkFBMkIsRUFGWjtFQUdmLDJDQUEyQyxFQUg1QjtFQU9mLGlCQUFpQixFQVBGO0VBV2YsbUJBQW1CLEVBWEo7RUFZZixrQkFBa0IsRUFaSDtFQWFmLDhCQUE4QixFQWJmO0VBY2Ysa0NBQWtDLENBQUMsUUFBRCxFQUFXLE9BQVgsQ0FkbkI7RUFrQmYsY0FBYyxFQWxCQztFQXNCZixtQkFBbUIsRUF0Qko7RUEwQmYsbUJBQW1CLEVBMUJKO0VBMkJmLG9DQUFvQyxDQUFDLE9BQUQsQ0EzQnJCO0VBNEJmLGlDQUFpQyxDQUFDLFFBQUQsQ0E1QmxCO0VBNkJmLHVDQUF1QyxDQUFDLGFBQUQsQ0E3QnhCO0VBOEJmLGlDQUFpQyxDQUFDLFNBQUQsQ0E5QmxCO0VBK0JmLGlDQUFpQyxDQUFDLE9BQUQsQ0EvQmxCO0VBbUNmLG1CQUFtQixFQW5DSjtFQXVDZixxQkFBcUIsRUF2Q047RUEyQ2YsZUFBZSxFQTNDQTtFQTRDZixXQUFXLEVBNUNJO0VBZ0RmLG9CQUFvQixFQWhETDtFQW9EZixvQkFBb0IsRUFwREw7RUFxRGYseUJBQXlCLEVBckRWO0VBeURmLG9CQUFvQixFQXpETDtFQTZEZixpQkFBaUIsRUE3REY7RUFpRWYsbUJBQW1CLEVBakVKO0VBa0VmLGtCQUFrQixFQWxFSDtFQW1FZixzQ0FBc0MsQ0FBQyxVQUFELENBbkV2QjtFQXVFZixxQkFBcUIsQ0FBQyxZQUFELEVBQWUsS0FBZixDQXZFTjtFQXdFZixlQUFlLEVBeEVBO0VBeUVmLG1CQUFtQixDQUFDLE1BQUQsQ0F6RUo7RUEwRWYsd0JBQXdCLEVBMUVUO0VBMkVmLGlCQUFpQixDQUFDLEtBQUQsQ0EzRUY7RUErRWYsd0JBQXdCLENBQUMsaUJBQUQsRUFBb0IsZUFBcEIsRUFBcUMsaUJBQXJDLEVBQXdELFlBQXhELENBL0VUO0VBZ0ZmLDBCQUEwQixDQUFDLFVBQUQsRUFBYSxxQkFBYixFQUFvQyxXQUFwQyxFQUFpRCxlQUFqRCxDQWhGWDtFQWlGZixrQkFBa0IsRUFqRkg7RUFrRmYsb0JBQW9CLENBQUMsWUFBRCxFQUFlLGVBQWYsRUFBZ0MsV0FBaEMsQ0FsRkw7RUFzRmYsaUJBQWlCLEVBdEZGO0VBMEZmLGtDQUFrQyxDQUFDLFNBQUQsQ0ExRm5CO0VBMkZmLDJCQUEyQixDQUFDLGFBQUQsQ0EzRlo7RUE0RmYsa0JBQWtCLEVBNUZIO0VBNkZmLGlCQUFpQixFQTdGRjtFQWlHZixpQkFBaUI7QUFqR0YsQ0FBakI7O0FBcUdBLFNBQVNDLFVBQVQsQ0FBcUJDLEVBQXJCLEVBQXlCQyxNQUF6QixFQUFpQ0MsTUFBTSxHQUFHLEVBQTFDLEVBQThDO0VBQzVDLE9BQU87SUFDTEYsRUFESztJQUVMQyxNQUZLO0lBR0xDLE1BQU0sRUFBRUMsTUFBTSxDQUFDQyxNQUFQLENBQWM7TUFDcEJDLFdBQVcsRUFBRVIsWUFETztNQUVwQlMscUJBQXFCLEVBQUUsSUFGSDtNQUdwQkMsb0NBQW9DLEVBQUUsS0FIbEI7TUFJcEJDLGtCQUFrQixFQUFFLEtBSkE7TUFLcEJDLGVBQWUsRUFBRSxLQUxHO01BTXBCQyxVQUFVLEVBQUU7SUFOUSxDQUFkLEVBT0xSLE1BUEs7RUFISCxDQUFQO0FBWUQ7O0FBRUQsU0FBU1Msa0JBQVQsQ0FBNkJYLEVBQTdCLEVBQWlDQyxNQUFqQyxFQUF5Q1csSUFBSSxHQUFHLEVBQWhELEVBQW9EO0VBQ2xELE1BQU1DLFVBQVUsR0FBR2YsUUFBUSxDQUFDRyxNQUFELENBQTNCOztFQUNBLElBQUksQ0FBQ1ksVUFBTCxFQUFpQjtJQUNmLE1BQU0sSUFBSUMsS0FBSixDQUFXLHFCQUFvQmIsTUFBTyxHQUF0QyxDQUFOO0VBQ0Q7O0VBRUQsTUFBTUMsTUFBTSxHQUFHVyxVQUFVLENBQUNFLE1BQVgsQ0FBa0IsVUFBVWIsTUFBVixFQUFrQmMsSUFBbEIsRUFBd0I7SUFDdkRkLE1BQU0sQ0FBQ2MsSUFBRCxDQUFOLEdBQWVKLElBQUksQ0FBQ0ksSUFBRCxDQUFuQjtJQUNBLE9BQU9kLE1BQVA7RUFDRCxDQUhjLEVBR1osRUFIWSxDQUFmO0VBSUEsT0FBT0gsVUFBVSxDQUFDQyxFQUFELEVBQUtDLE1BQUwsRUFBYUMsTUFBYixDQUFqQjtBQUNEOztlQUdjUyxrQiJ9