"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SafariConsoleLog = void 0;

require("source-map-support/register");

var _rotatingLog = require("./rotating-log");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("appium/support");

class SafariConsoleLog extends _rotatingLog.RotatingLog {
  constructor(showLogs) {
    super(showLogs, 'SafariConsole');
    this.log.warning = this.log.warn;
  }

  addLogLine(err, out) {
    if (this.isCapturing) {
      this.logs = this.logs || [];

      while (this.logs.length >= _rotatingLog.MAX_LOG_ENTRIES_COUNT) {
        this.logs.shift();

        if (this.logIdxSinceLastRequest > 0) {
          this.logIdxSinceLastRequest--;
        }
      }

      const entry = {
        level: {
          error: 'SEVERE',
          warning: 'WARNING',
          log: 'FINE'
        }[out.level] || 'INFO',
        timestamp: Date.now(),
        message: JSON.stringify(out)
      };
      this.logs.push(entry);
    }

    if (_lodash.default.has(out, 'count')) {
      const count = out.count;
      out = this._previousOutput || {};
      out.text = `Previous message repeated ${_support.util.pluralize('time', count, true)}`;
    } else {
      this._previousOutput = out;
    }

    if (this.showLogs) {
      let level = 'debug';

      if (out.level === 'warning' || out.level === 'error') {
        level = out.level;
      }

      for (const line of out.text.split('\n')) {
        const url = out.url ? `${out.url} ` : '';
        this.log[level](`[${level.toUpperCase()}][${url}${out.line}:${out.column}] ${line}`);
      }
    }
  }

}

exports.SafariConsoleLog = SafariConsoleLog;
var _default = SafariConsoleLog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTYWZhcmlDb25zb2xlTG9nIiwiUm90YXRpbmdMb2ciLCJjb25zdHJ1Y3RvciIsInNob3dMb2dzIiwibG9nIiwid2FybmluZyIsIndhcm4iLCJhZGRMb2dMaW5lIiwiZXJyIiwib3V0IiwiaXNDYXB0dXJpbmciLCJsb2dzIiwibGVuZ3RoIiwiTUFYX0xPR19FTlRSSUVTX0NPVU5UIiwic2hpZnQiLCJsb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IiwiZW50cnkiLCJsZXZlbCIsImVycm9yIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsIl8iLCJoYXMiLCJjb3VudCIsIl9wcmV2aW91c091dHB1dCIsInRleHQiLCJ1dGlsIiwicGx1cmFsaXplIiwibGluZSIsInNwbGl0IiwidXJsIiwidG9VcHBlckNhc2UiLCJjb2x1bW4iXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZGV2aWNlLWxvZy9zYWZhcmktY29uc29sZS1sb2cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm90YXRpbmdMb2csIE1BWF9MT0dfRU5UUklFU19DT1VOVCB9IGZyb20gJy4vcm90YXRpbmctbG9nJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNsYXNzIFNhZmFyaUNvbnNvbGVMb2cgZXh0ZW5kcyBSb3RhdGluZ0xvZyB7XG4gIGNvbnN0cnVjdG9yIChzaG93TG9ncykge1xuICAgIHN1cGVyKHNob3dMb2dzLCAnU2FmYXJpQ29uc29sZScpO1xuXG4gICAgLy8ganMgY29uc29sZSBoYXMgYHdhcm5pbmdgIGxldmVsLCBzbyBtYXAgdG8gYHdhcm5gXG4gICAgdGhpcy5sb2cud2FybmluZyA9IHRoaXMubG9nLndhcm47XG4gIH1cblxuICBhZGRMb2dMaW5lIChlcnIsIG91dCkge1xuICAgIGlmICh0aGlzLmlzQ2FwdHVyaW5nKSB7XG4gICAgICB0aGlzLmxvZ3MgPSB0aGlzLmxvZ3MgfHwgW107XG4gICAgICB3aGlsZSAodGhpcy5sb2dzLmxlbmd0aCA+PSBNQVhfTE9HX0VOVFJJRVNfQ09VTlQpIHtcbiAgICAgICAgdGhpcy5sb2dzLnNoaWZ0KCk7XG4gICAgICAgIGlmICh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPiAwKSB7XG4gICAgICAgICAgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0LS07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqIFRoZSBvdXRwdXQgd2lsbCBiZSBsaWtlOlxuICAgICAgICogICB7XG4gICAgICAgKiAgICAgXCJzb3VyY2VcIjogXCJqYXZhc2NyaXB0XCIsXG4gICAgICAgKiAgICAgXCJsZXZlbFwiOlwiZXJyb3JcIixcbiAgICAgICAqICAgICBcInRleHRcIjpcIlJlZmVyZW5jZUVycm9yOiBDYW4ndCBmaW5kIHZhcmlhYmxlOiBzX2FjY291bnRcIixcbiAgICAgICAqICAgICBcInR5cGVcIjpcImxvZ1wiLFxuICAgICAgICogICAgIFwibGluZVwiOjIsXG4gICAgICAgKiAgICAgXCJjb2x1bW5cIjoyMSxcbiAgICAgICAqICAgICBcInVybFwiOlwiaHR0cHM6Ly9hc3NldHMuYWRvYmVkdG0uY29tL2I0NmUzMThkODQ1MjUwODM0ZWRhMTBjNWEyMDgyN2MwNDVhNGQ3NmYvc2NyaXB0cy9zYXRlbGxpdGUtNTc4NjZmOGI2NDc0NmQ1M2E4MDAwMTA0LXN0YWdpbmcuanNcIixcbiAgICAgICAqICAgICBcInJlcGVhdENvdW50XCI6MSxcbiAgICAgICAqICAgICBcInN0YWNrVHJhY2VcIjpbe1xuICAgICAgICogICAgICAgXCJmdW5jdGlvbk5hbWVcIjpcImdsb2JhbCBjb2RlXCIsXG4gICAgICAgKiAgICAgICBcInVybFwiOlwiaHR0cHM6Ly9hc3NldHMuYWRvYmVkdG0uY29tL2I0NmUzMThkODQ1MjUwODM0ZWRhMTBjNWEyMDgyN2MwNDVhNGQ3NmYvc2NyaXB0cy9zYXRlbGxpdGUtNTc4NjZmOGI2NDc0NmQ1M2E4MDAwMTA0LXN0YWdpbmcuanNcIixcbiAgICAgICAqICAgICAgIFwic2NyaXB0SWRcIjpcIjZcIixcbiAgICAgICAqICAgICAgIFwibGluZU51bWJlclwiOjIsXG4gICAgICAgKiAgICAgICBcImNvbHVtbk51bWJlclwiOjIxXG4gICAgICAgKiAgICAgfV1cbiAgICAgICAqICB9XG4gICAgICAgKlxuICAgICAgICogd2UgbmVlZCwgYXQgbGVhc3QsIGBsZXZlbGAgKGluIGFjY29yZGFuY2Ugd2l0aCBKYXZhIGxldmVsc1xuICAgICAgICogKGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2phdmFzZS83L2RvY3MvYXBpL2phdmEvdXRpbC9sb2dnaW5nL0xldmVsLmh0bWwpKSxcbiAgICAgICAqIGB0aW1lc3RhbXBgLCBhbmQgYG1lc3NhZ2VgIHRvIHNhdGlzZnkgdGhlIGphdmEgY2xpZW50LiBJbiBvcmRlciB0b1xuICAgICAgICogcHJvdmlkZSBhbGwgdGhlIGluZm9ybWF0aW9uIHRvIHRoZSBjbGllbnQsIGBtZXNzYWdlYCBpcyB0aGUgZnVsbFxuICAgICAgICogb2JqZWN0LCBzdHJpbmdpZmllZC5cbiAgICAgICAqL1xuICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgIGxldmVsOiB7XG4gICAgICAgICAgZXJyb3I6ICdTRVZFUkUnLFxuICAgICAgICAgIHdhcm5pbmc6ICdXQVJOSU5HJyxcbiAgICAgICAgICBsb2c6ICdGSU5FJyxcbiAgICAgICAgfVtvdXQubGV2ZWxdIHx8ICdJTkZPJyxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShvdXQpLFxuICAgICAgfTtcbiAgICAgIHRoaXMubG9ncy5wdXNoKGVudHJ5KTtcbiAgICB9XG5cbiAgICBpZiAoXy5oYXMob3V0LCAnY291bnQnKSkge1xuICAgICAgLy8gdGhpcyBpcyBhIG5vdGlmaWNhdGlvbiBvZiB0aGUgcHJldmlvdXMgbWVzc2FnZSBiZWluZyByZXBlYXRlZFxuICAgICAgLy8gdGhpcyBzaG91bGQgX25ldmVyXyBiZSB0aGUgZmlyc3QgbWVzc2FnZSwgc28gdGhlIHByZXZpb3VzIG9uZSBvdWdodCB0b1xuICAgICAgLy8gYmUgcG9wdWxhdGVkLiBJZiBpdCBpcyBub3QsIG5vdGhpbmcgd2lsbCBicmVhaywgaXQgd2lsbCBqdXN0IGxvb2sgb2RkXG4gICAgICAvLyBpbiB0aGUgb3V0cHV0IGJlbG93IChubyB1cmwgb3IgbGluZSBudW1iZXJzKVxuICAgICAgY29uc3QgY291bnQgPSBvdXQuY291bnQ7XG4gICAgICBvdXQgPSB0aGlzLl9wcmV2aW91c091dHB1dCB8fCB7fTtcbiAgICAgIG91dC50ZXh0ID0gYFByZXZpb3VzIG1lc3NhZ2UgcmVwZWF0ZWQgJHt1dGlsLnBsdXJhbGl6ZSgndGltZScsIGNvdW50LCB0cnVlKX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzYXZlIHRoZSBtb3N0IHJlY2VudCBvdXRwdXRcbiAgICAgIHRoaXMuX3ByZXZpb3VzT3V0cHV0ID0gb3V0O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBvdXRwdXQgbGlrZVxuICAgIC8vICAgICBTYWZhcmlDb25zb2xlIFtXQVJOSU5HXVtodHRwOi8vYXBwaXVtLmlvIDI6MTNdIExvZyBzb21ldGhpbmcgdG8gd2FyblxuICAgIGlmICh0aGlzLnNob3dMb2dzKSB7XG4gICAgICBsZXQgbGV2ZWwgPSAnZGVidWcnO1xuICAgICAgaWYgKG91dC5sZXZlbCA9PT0gJ3dhcm5pbmcnIHx8IG91dC5sZXZlbCA9PT0gJ2Vycm9yJykge1xuICAgICAgICBsZXZlbCA9IG91dC5sZXZlbDtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiBvdXQudGV4dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgLy8gdXJsIGlzIG9wdGlvbmFsLCBzbyBnZXQgZm9ybWF0dGluZyBoZXJlXG4gICAgICAgIGNvbnN0IHVybCA9IG91dC51cmwgPyBgJHtvdXQudXJsfSBgIDogJyc7XG4gICAgICAgIHRoaXMubG9nW2xldmVsXShgWyR7bGV2ZWwudG9VcHBlckNhc2UoKX1dWyR7dXJsfSR7b3V0LmxpbmV9OiR7b3V0LmNvbHVtbn1dICR7bGluZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgU2FmYXJpQ29uc29sZUxvZyB9O1xuZXhwb3J0IGRlZmF1bHQgU2FmYXJpQ29uc29sZUxvZztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxnQkFBTixTQUErQkMsd0JBQS9CLENBQTJDO0VBQ3pDQyxXQUFXLENBQUVDLFFBQUYsRUFBWTtJQUNyQixNQUFNQSxRQUFOLEVBQWdCLGVBQWhCO0lBR0EsS0FBS0MsR0FBTCxDQUFTQyxPQUFULEdBQW1CLEtBQUtELEdBQUwsQ0FBU0UsSUFBNUI7RUFDRDs7RUFFREMsVUFBVSxDQUFFQyxHQUFGLEVBQU9DLEdBQVAsRUFBWTtJQUNwQixJQUFJLEtBQUtDLFdBQVQsRUFBc0I7TUFDcEIsS0FBS0MsSUFBTCxHQUFZLEtBQUtBLElBQUwsSUFBYSxFQUF6Qjs7TUFDQSxPQUFPLEtBQUtBLElBQUwsQ0FBVUMsTUFBVixJQUFvQkMsa0NBQTNCLEVBQWtEO1FBQ2hELEtBQUtGLElBQUwsQ0FBVUcsS0FBVjs7UUFDQSxJQUFJLEtBQUtDLHNCQUFMLEdBQThCLENBQWxDLEVBQXFDO1VBQ25DLEtBQUtBLHNCQUFMO1FBQ0Q7TUFDRjs7TUE0QkQsTUFBTUMsS0FBSyxHQUFHO1FBQ1pDLEtBQUssRUFBRTtVQUNMQyxLQUFLLEVBQUUsUUFERjtVQUVMYixPQUFPLEVBQUUsU0FGSjtVQUdMRCxHQUFHLEVBQUU7UUFIQSxFQUlMSyxHQUFHLENBQUNRLEtBSkMsS0FJUyxNQUxKO1FBTVpFLFNBQVMsRUFBRUMsSUFBSSxDQUFDQyxHQUFMLEVBTkM7UUFPWkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZWYsR0FBZjtNQVBHLENBQWQ7TUFTQSxLQUFLRSxJQUFMLENBQVVjLElBQVYsQ0FBZVQsS0FBZjtJQUNEOztJQUVELElBQUlVLGVBQUEsQ0FBRUMsR0FBRixDQUFNbEIsR0FBTixFQUFXLE9BQVgsQ0FBSixFQUF5QjtNQUt2QixNQUFNbUIsS0FBSyxHQUFHbkIsR0FBRyxDQUFDbUIsS0FBbEI7TUFDQW5CLEdBQUcsR0FBRyxLQUFLb0IsZUFBTCxJQUF3QixFQUE5QjtNQUNBcEIsR0FBRyxDQUFDcUIsSUFBSixHQUFZLDZCQUE0QkMsYUFBQSxDQUFLQyxTQUFMLENBQWUsTUFBZixFQUF1QkosS0FBdkIsRUFBOEIsSUFBOUIsQ0FBb0MsRUFBNUU7SUFDRCxDQVJELE1BUU87TUFFTCxLQUFLQyxlQUFMLEdBQXVCcEIsR0FBdkI7SUFDRDs7SUFJRCxJQUFJLEtBQUtOLFFBQVQsRUFBbUI7TUFDakIsSUFBSWMsS0FBSyxHQUFHLE9BQVo7O01BQ0EsSUFBSVIsR0FBRyxDQUFDUSxLQUFKLEtBQWMsU0FBZCxJQUEyQlIsR0FBRyxDQUFDUSxLQUFKLEtBQWMsT0FBN0MsRUFBc0Q7UUFDcERBLEtBQUssR0FBR1IsR0FBRyxDQUFDUSxLQUFaO01BQ0Q7O01BQ0QsS0FBSyxNQUFNZ0IsSUFBWCxJQUFtQnhCLEdBQUcsQ0FBQ3FCLElBQUosQ0FBU0ksS0FBVCxDQUFlLElBQWYsQ0FBbkIsRUFBeUM7UUFFdkMsTUFBTUMsR0FBRyxHQUFHMUIsR0FBRyxDQUFDMEIsR0FBSixHQUFXLEdBQUUxQixHQUFHLENBQUMwQixHQUFJLEdBQXJCLEdBQTBCLEVBQXRDO1FBQ0EsS0FBSy9CLEdBQUwsQ0FBU2EsS0FBVCxFQUFpQixJQUFHQSxLQUFLLENBQUNtQixXQUFOLEVBQW9CLEtBQUlELEdBQUksR0FBRTFCLEdBQUcsQ0FBQ3dCLElBQUssSUFBR3hCLEdBQUcsQ0FBQzRCLE1BQU8sS0FBSUosSUFBSyxFQUFsRjtNQUNEO0lBQ0Y7RUFDRjs7QUFsRndDOzs7ZUFzRjVCakMsZ0IifQ==