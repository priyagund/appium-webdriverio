"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _driver = require("appium/driver");

var _appiumIosDevice = require("appium-ios-device");

var _support = require("appium/support");

const commands = {};
exports.commands = commands;

commands.getGeoLocation = async function getGeoLocation() {
  const {
    authorizationStatus,
    latitude,
    longitude,
    altitude
  } = await this.proxyCommand('/wda/device/location', 'GET');

  if (authorizationStatus !== 3) {
    this.log.errorAndThrow(`Location service must be set to 'Always' in order to ` + `retrive the current geolocation data. Please set it up manually via ` + `'Settings > Privacy > Location Services -> WebDriverAgentRunner-Runner'`);
  }

  return {
    latitude,
    longitude,
    altitude
  };
};

commands.setGeoLocation = async function setGeoLocation(location) {
  let {
    latitude,
    longitude
  } = location;

  if (!_support.util.hasValue(latitude) || !_support.util.hasValue(longitude)) {
    throw new _driver.errors.InvalidArgumentError(`Both latitude and longitude should be set`);
  }

  if (this.isSimulator()) {
    await this.opts.device.setGeolocation(`${latitude}`, `${longitude}`);
    return;
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.setLocation(latitude, longitude);
  } catch (e) {
    this.log.errorAndThrow(`Can't set the location on device '${this.opts.udid}'. Original error: ${e.message}`);
  } finally {
    service.close();
  }
};

commands.mobileResetLocationService = async function mobileResetLocationService() {
  if (this.isSimulator()) {
    throw new _driver.errors.NotImplementedError();
  }

  const service = await _appiumIosDevice.services.startSimulateLocationService(this.opts.udid);

  try {
    service.resetLocation();
  } catch (err) {
    this.log.errorAndThrow(`Failed to reset the location on the device on device '${this.opts.udid}'. ` + `Origianl error: ${err.message}`);
  } finally {
    service.close();
  }
};

var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImdldEdlb0xvY2F0aW9uIiwiYXV0aG9yaXphdGlvblN0YXR1cyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYWx0aXR1ZGUiLCJwcm94eUNvbW1hbmQiLCJsb2ciLCJlcnJvckFuZFRocm93Iiwic2V0R2VvTG9jYXRpb24iLCJsb2NhdGlvbiIsInV0aWwiLCJoYXNWYWx1ZSIsImVycm9ycyIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiaXNTaW11bGF0b3IiLCJvcHRzIiwiZGV2aWNlIiwic2V0R2VvbG9jYXRpb24iLCJzZXJ2aWNlIiwic2VydmljZXMiLCJzdGFydFNpbXVsYXRlTG9jYXRpb25TZXJ2aWNlIiwidWRpZCIsInNldExvY2F0aW9uIiwiZSIsIm1lc3NhZ2UiLCJjbG9zZSIsIm1vYmlsZVJlc2V0TG9jYXRpb25TZXJ2aWNlIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsInJlc2V0TG9jYXRpb24iLCJlcnIiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvbG9jYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5pbXBvcnQgeyBzZXJ2aWNlcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0vc3VwcG9ydCc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTG9jYXRpb25PYmplY3RcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGF0aXR1ZGUgLSBUaGUgbGF0aXR1ZGUgb2YgdGhlIGRldmljZSB1bmRlciB0ZXN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhbHRpdHVkZSAtIFRoZSBhbHRpdHVkZSBvZiB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgbG9jYXRpb24gb2YgdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICogVGhlIGRldmljZSB1bmRlciB0ZXN0IG11c3QgYWxsb3cgdGhlIGxvY2F0aW9uIHNlcnZpY2VzIGZvciBXREFcbiAqIGFzICdBbHdheXMnIHRvIGdldCB0aGUgbG9jYXRpb24gZGF0YSBjb3JyZWN0bHkuXG4gKlxuICogVGhlICdsYXRpdHVkZScsICdsb25naXR1ZGUnIGFuZCAnYWx0aXR1ZGUnIGNvdWxkIGJlIHplcm8gZXZlblxuICogaWYgdGhlIExvY2F0aW9uIFNlcnZpY2VzIGFyZSBzZXQgdG8gJ0Fsd2F5cycsIGJlY2F1c2UgdGhlIGRldmljZVxuICogbmVlZHMgc29tZSB0aW1lIHRvIHVwZGF0ZSB0aGUgbG9jYXRpb24gZGF0YS5cbiAqXG4gKiBAcmV0dXJucyB7TG9jYXRpb25PYmplY3R9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGRldmljZSB1bmRlciB0ZXN0IHJldHVybnMgYW4gZXJyb3IgbWVzc2FnZS5cbiAqICAgICAgICAgICAgICAgICBpLmUuOiB0dk9TIHJldHVybnMgdW5zdXBwb3J0ZWQgZXJyb3JcbiAqL1xuY29tbWFuZHMuZ2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBnZXRHZW9Mb2NhdGlvbiAoKSB7XG4gIGNvbnN0IHtcbiAgICBhdXRob3JpemF0aW9uU3RhdHVzLFxuICAgIGxhdGl0dWRlLFxuICAgIGxvbmdpdHVkZSxcbiAgICBhbHRpdHVkZVxuICB9ID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvZGV2aWNlL2xvY2F0aW9uJywgJ0dFVCcpO1xuXG4gIC8vICczJyBpcyAnQWx3YXlzJyBpbiB0aGUgcHJpdmFjeVxuICAvLyBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9jb3JlbG9jYXRpb24vY2xhdXRob3JpemF0aW9uc3RhdHVzXG4gIGlmIChhdXRob3JpemF0aW9uU3RhdHVzICE9PSAzKSB7XG4gICAgdGhpcy5sb2cuZXJyb3JBbmRUaHJvdyhgTG9jYXRpb24gc2VydmljZSBtdXN0IGJlIHNldCB0byAnQWx3YXlzJyBpbiBvcmRlciB0byBgICtcbiAgICAgIGByZXRyaXZlIHRoZSBjdXJyZW50IGdlb2xvY2F0aW9uIGRhdGEuIFBsZWFzZSBzZXQgaXQgdXAgbWFudWFsbHkgdmlhIGAgK1xuICAgICAgYCdTZXR0aW5ncyA+IFByaXZhY3kgPiBMb2NhdGlvbiBTZXJ2aWNlcyAtPiBXZWJEcml2ZXJBZ2VudFJ1bm5lci1SdW5uZXInYCk7XG4gIH1cblxuICByZXR1cm4ge2xhdGl0dWRlLCBsb25naXR1ZGUsIGFsdGl0dWRlfTtcbn07XG5cbmNvbW1hbmRzLnNldEdlb0xvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gc2V0R2VvTG9jYXRpb24gKGxvY2F0aW9uKSB7XG4gIGxldCB7bGF0aXR1ZGUsIGxvbmdpdHVkZX0gPSBsb2NhdGlvbjtcblxuICBpZiAoIXV0aWwuaGFzVmFsdWUobGF0aXR1ZGUpIHx8ICF1dGlsLmhhc1ZhbHVlKGxvbmdpdHVkZSkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBCb3RoIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgc2hvdWxkIGJlIHNldGApO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIGF3YWl0IHRoaXMub3B0cy5kZXZpY2Uuc2V0R2VvbG9jYXRpb24oYCR7bGF0aXR1ZGV9YCwgYCR7bG9uZ2l0dWRlfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydFNpbXVsYXRlTG9jYXRpb25TZXJ2aWNlKHRoaXMub3B0cy51ZGlkKTtcbiAgdHJ5IHtcbiAgICBzZXJ2aWNlLnNldExvY2F0aW9uKGxhdGl0dWRlLCBsb25naXR1ZGUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5sb2cuZXJyb3JBbmRUaHJvdyhgQ2FuJ3Qgc2V0IHRoZSBsb2NhdGlvbiBvbiBkZXZpY2UgJyR7dGhpcy5vcHRzLnVkaWR9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9IGZpbmFsbHkge1xuICAgIHNlcnZpY2UuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbG9jYXRpb24gc2VydmljZSBvbiByZWFsIGRldmljZS5cbiAqIFJhaXNlcyBub3QgaW1wbGVtZW50ZWQgZXJyb3IgZm9yIHNpbXVsYXRvci5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIGlzIHNpbXVsYXRvciwgb3IgJ3Jlc2V0TG9jYXRpb24nIHJhaXNlcyBhbiBlcnJvci5cbiAqL1xuY29tbWFuZHMubW9iaWxlUmVzZXRMb2NhdGlvblNlcnZpY2UgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVSZXNldExvY2F0aW9uU2VydmljZSAoKSB7XG4gIGlmICh0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGNvbnN0IHNlcnZpY2UgPSBhd2FpdCBzZXJ2aWNlcy5zdGFydFNpbXVsYXRlTG9jYXRpb25TZXJ2aWNlKHRoaXMub3B0cy51ZGlkKTtcbiAgdHJ5IHtcbiAgICBzZXJ2aWNlLnJlc2V0TG9jYXRpb24oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhpcy5sb2cuZXJyb3JBbmRUaHJvdyhgRmFpbGVkIHRvIHJlc2V0IHRoZSBsb2NhdGlvbiBvbiB0aGUgZGV2aWNlIG9uIGRldmljZSAnJHt0aGlzLm9wdHMudWRpZH0nLiBgICtcbiAgICAgIGBPcmlnaWFubCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXJ2aWNlLmNsb3NlKCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7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