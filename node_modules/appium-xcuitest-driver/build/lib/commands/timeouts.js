"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.pageLoadTimeoutW3C = async function pageLoadTimeoutW3C(ms) {
  await this.setPageLoadTimeout(this.parseTimeoutArgument(ms));
};

commands.pageLoadTimeoutMJSONWP = async function pageLoadTimeoutMJSONWP(ms) {
  await this.setPageLoadTimeout(this.parseTimeoutArgument(ms));
};

commands.scriptTimeoutW3C = async function scriptTimeoutW3C(ms) {
  await this.asyncScriptTimeout(ms);
};

commands.scriptTimeoutMJSONWP = async function scriptTimeoutMJSONWP(ms) {
  await this.asyncScriptTimeout(ms);
};

commands.asyncScriptTimeout = async function asyncScriptTimeout(ms) {
  this.setAsyncScriptTimeout(this.parseTimeoutArgument(ms));
};

helpers.setPageLoadTimeout = function setPageLoadTimeout(ms) {
  ms = parseInt(ms, 10);
  this.pageLoadMs = ms;

  if (this.remote) {
    this.remote.pageLoadMs = this.pageLoadMs;
  }

  this.log.debug(`Set page load timeout to ${ms}ms`);
};

helpers.setAsyncScriptTimeout = function setAsyncScriptTimeout(ms) {
  this.asyncWaitMs = ms;
  this.log.debug(`Set async script timeout to ${ms}ms`);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwicGFnZUxvYWRUaW1lb3V0VzNDIiwibXMiLCJzZXRQYWdlTG9hZFRpbWVvdXQiLCJwYXJzZVRpbWVvdXRBcmd1bWVudCIsInBhZ2VMb2FkVGltZW91dE1KU09OV1AiLCJzY3JpcHRUaW1lb3V0VzNDIiwiYXN5bmNTY3JpcHRUaW1lb3V0Iiwic2NyaXB0VGltZW91dE1KU09OV1AiLCJzZXRBc3luY1NjcmlwdFRpbWVvdXQiLCJwYXJzZUludCIsInBhZ2VMb2FkTXMiLCJyZW1vdGUiLCJsb2ciLCJkZWJ1ZyIsImFzeW5jV2FpdE1zIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL3RpbWVvdXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vLyBwYWdlTG9hZFxuY29tbWFuZHMucGFnZUxvYWRUaW1lb3V0VzNDID0gYXN5bmMgZnVuY3Rpb24gcGFnZUxvYWRUaW1lb3V0VzNDIChtcykge1xuICBhd2FpdCB0aGlzLnNldFBhZ2VMb2FkVGltZW91dCh0aGlzLnBhcnNlVGltZW91dEFyZ3VtZW50KG1zKSk7XG59O1xuXG5jb21tYW5kcy5wYWdlTG9hZFRpbWVvdXRNSlNPTldQID0gYXN5bmMgZnVuY3Rpb24gcGFnZUxvYWRUaW1lb3V0TUpTT05XUCAobXMpIHtcbiAgYXdhaXQgdGhpcy5zZXRQYWdlTG9hZFRpbWVvdXQodGhpcy5wYXJzZVRpbWVvdXRBcmd1bWVudChtcykpO1xufTtcblxuLy8gc2NyaXB0XG5jb21tYW5kcy5zY3JpcHRUaW1lb3V0VzNDID0gYXN5bmMgZnVuY3Rpb24gc2NyaXB0VGltZW91dFczQyAobXMpIHtcbiAgYXdhaXQgdGhpcy5hc3luY1NjcmlwdFRpbWVvdXQobXMpO1xufTtcblxuY29tbWFuZHMuc2NyaXB0VGltZW91dE1KU09OV1AgPSBhc3luYyBmdW5jdGlvbiBzY3JpcHRUaW1lb3V0TUpTT05XUCAobXMpIHtcbiAgYXdhaXQgdGhpcy5hc3luY1NjcmlwdFRpbWVvdXQobXMpO1xufTtcblxuY29tbWFuZHMuYXN5bmNTY3JpcHRUaW1lb3V0ID0gYXN5bmMgZnVuY3Rpb24gYXN5bmNTY3JpcHRUaW1lb3V0IChtcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgdGhpcy5zZXRBc3luY1NjcmlwdFRpbWVvdXQodGhpcy5wYXJzZVRpbWVvdXRBcmd1bWVudChtcykpO1xufTtcblxuaGVscGVycy5zZXRQYWdlTG9hZFRpbWVvdXQgPSBmdW5jdGlvbiBzZXRQYWdlTG9hZFRpbWVvdXQgKG1zKSB7XG4gIG1zID0gcGFyc2VJbnQobXMsIDEwKTtcbiAgdGhpcy5wYWdlTG9hZE1zID0gbXM7XG4gIGlmICh0aGlzLnJlbW90ZSkge1xuICAgIHRoaXMucmVtb3RlLnBhZ2VMb2FkTXMgPSB0aGlzLnBhZ2VMb2FkTXM7XG4gIH1cbiAgdGhpcy5sb2cuZGVidWcoYFNldCBwYWdlIGxvYWQgdGltZW91dCB0byAke21zfW1zYCk7XG59O1xuXG5oZWxwZXJzLnNldEFzeW5jU2NyaXB0VGltZW91dCA9IGZ1bmN0aW9uIHNldEFzeW5jU2NyaXB0VGltZW91dCAobXMpIHtcbiAgdGhpcy5hc3luY1dhaXRNcyA9IG1zO1xuICB0aGlzLmxvZy5kZWJ1ZyhgU2V0IGFzeW5jIHNjcmlwdCB0aW1lb3V0IHRvICR7bXN9bXNgKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjtBQUFBLE1BQXFCQyxPQUFPLEdBQUcsRUFBL0I7QUFBQSxNQUFtQ0MsVUFBVSxHQUFHLEVBQWhEOzs7O0FBR0FGLFFBQVEsQ0FBQ0csa0JBQVQsR0FBOEIsZUFBZUEsa0JBQWYsQ0FBbUNDLEVBQW5DLEVBQXVDO0VBQ25FLE1BQU0sS0FBS0Msa0JBQUwsQ0FBd0IsS0FBS0Msb0JBQUwsQ0FBMEJGLEVBQTFCLENBQXhCLENBQU47QUFDRCxDQUZEOztBQUlBSixRQUFRLENBQUNPLHNCQUFULEdBQWtDLGVBQWVBLHNCQUFmLENBQXVDSCxFQUF2QyxFQUEyQztFQUMzRSxNQUFNLEtBQUtDLGtCQUFMLENBQXdCLEtBQUtDLG9CQUFMLENBQTBCRixFQUExQixDQUF4QixDQUFOO0FBQ0QsQ0FGRDs7QUFLQUosUUFBUSxDQUFDUSxnQkFBVCxHQUE0QixlQUFlQSxnQkFBZixDQUFpQ0osRUFBakMsRUFBcUM7RUFDL0QsTUFBTSxLQUFLSyxrQkFBTCxDQUF3QkwsRUFBeEIsQ0FBTjtBQUNELENBRkQ7O0FBSUFKLFFBQVEsQ0FBQ1Usb0JBQVQsR0FBZ0MsZUFBZUEsb0JBQWYsQ0FBcUNOLEVBQXJDLEVBQXlDO0VBQ3ZFLE1BQU0sS0FBS0ssa0JBQUwsQ0FBd0JMLEVBQXhCLENBQU47QUFDRCxDQUZEOztBQUlBSixRQUFRLENBQUNTLGtCQUFULEdBQThCLGVBQWVBLGtCQUFmLENBQW1DTCxFQUFuQyxFQUF1QztFQUNuRSxLQUFLTyxxQkFBTCxDQUEyQixLQUFLTCxvQkFBTCxDQUEwQkYsRUFBMUIsQ0FBM0I7QUFDRCxDQUZEOztBQUlBSCxPQUFPLENBQUNJLGtCQUFSLEdBQTZCLFNBQVNBLGtCQUFULENBQTZCRCxFQUE3QixFQUFpQztFQUM1REEsRUFBRSxHQUFHUSxRQUFRLENBQUNSLEVBQUQsRUFBSyxFQUFMLENBQWI7RUFDQSxLQUFLUyxVQUFMLEdBQWtCVCxFQUFsQjs7RUFDQSxJQUFJLEtBQUtVLE1BQVQsRUFBaUI7SUFDZixLQUFLQSxNQUFMLENBQVlELFVBQVosR0FBeUIsS0FBS0EsVUFBOUI7RUFDRDs7RUFDRCxLQUFLRSxHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsNEJBQTJCWixFQUFHLElBQTlDO0FBQ0QsQ0FQRDs7QUFTQUgsT0FBTyxDQUFDVSxxQkFBUixHQUFnQyxTQUFTQSxxQkFBVCxDQUFnQ1AsRUFBaEMsRUFBb0M7RUFDbEUsS0FBS2EsV0FBTCxHQUFtQmIsRUFBbkI7RUFDQSxLQUFLVyxHQUFMLENBQVNDLEtBQVQsQ0FBZ0IsK0JBQThCWixFQUFHLElBQWpEO0FBQ0QsQ0FIRDs7QUFLQWMsTUFBTSxDQUFDQyxNQUFQLENBQWNqQixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSJ9