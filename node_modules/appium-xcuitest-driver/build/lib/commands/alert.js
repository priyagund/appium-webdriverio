"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

const commands = {};
exports.commands = commands;

function toAlertParams(opts = {}) {
  const params = {};

  if (opts.buttonLabel) {
    params.name = opts.buttonLabel;
  }

  return params;
}

commands.getAlertText = async function getAlertText() {
  return await this.proxyCommand('/alert/text', 'GET');
};

commands.setAlertText = async function setAlertText(value) {
  return await this.proxyCommand('/alert/text', 'POST', {
    value
  });
};

commands.postAcceptAlert = async function postAcceptAlert(opts = {}) {
  return await this.proxyCommand('/alert/accept', 'POST', toAlertParams(opts));
};

commands.postDismissAlert = async function postDismissAlert(opts = {}) {
  return await this.proxyCommand('/alert/dismiss', 'POST', toAlertParams(opts));
};

commands.getAlertButtons = async function getAlertButtons() {
  return await this.proxyCommand('/wda/alert/buttons', 'GET');
};

commands.mobileHandleAlert = async function mobileHandleAlert(opts = {}) {
  switch (opts.action) {
    case 'accept':
      return await this.postAcceptAlert(opts);

    case 'dismiss':
      return await this.postDismissAlert(opts);

    case 'getButtons':
      return await this.getAlertButtons();

    default:
      throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
  }
};

var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsInRvQWxlcnRQYXJhbXMiLCJvcHRzIiwicGFyYW1zIiwiYnV0dG9uTGFiZWwiLCJuYW1lIiwiZ2V0QWxlcnRUZXh0IiwicHJveHlDb21tYW5kIiwic2V0QWxlcnRUZXh0IiwidmFsdWUiLCJwb3N0QWNjZXB0QWxlcnQiLCJwb3N0RGlzbWlzc0FsZXJ0IiwiZ2V0QWxlcnRCdXR0b25zIiwibW9iaWxlSGFuZGxlQWxlcnQiLCJhY3Rpb24iLCJFcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21tYW5kcyA9IHt9O1xuXG5mdW5jdGlvbiB0b0FsZXJ0UGFyYW1zIChvcHRzID0ge30pIHtcbiAgY29uc3QgcGFyYW1zID0ge307XG4gIGlmIChvcHRzLmJ1dHRvbkxhYmVsKSB7XG4gICAgcGFyYW1zLm5hbWUgPSBvcHRzLmJ1dHRvbkxhYmVsO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmNvbW1hbmRzLmdldEFsZXJ0VGV4dCA9IGFzeW5jIGZ1bmN0aW9uIGdldEFsZXJ0VGV4dCAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FsZXJ0L3RleHQnLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5zZXRBbGVydFRleHQgPSBhc3luYyBmdW5jdGlvbiBzZXRBbGVydFRleHQgKHZhbHVlKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FsZXJ0L3RleHQnLCAnUE9TVCcsIHt2YWx1ZX0pO1xufTtcblxuY29tbWFuZHMucG9zdEFjY2VwdEFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gcG9zdEFjY2VwdEFsZXJ0IChvcHRzID0ge30pIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvYWNjZXB0JywgJ1BPU1QnLCB0b0FsZXJ0UGFyYW1zKG9wdHMpKTtcbn07XG5cbmNvbW1hbmRzLnBvc3REaXNtaXNzQWxlcnQgPSBhc3luYyBmdW5jdGlvbiBwb3N0RGlzbWlzc0FsZXJ0IChvcHRzID0ge30pIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvZGlzbWlzcycsICdQT1NUJywgdG9BbGVydFBhcmFtcyhvcHRzKSk7XG59O1xuXG5jb21tYW5kcy5nZXRBbGVydEJ1dHRvbnMgPSBhc3luYyBmdW5jdGlvbiBnZXRBbGVydEJ1dHRvbnMgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvYWxlcnQvYnV0dG9ucycsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZUhhbmRsZUFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlSGFuZGxlQWxlcnQgKG9wdHMgPSB7fSkge1xuICBzd2l0Y2ggKG9wdHMuYWN0aW9uKSB7XG4gICAgY2FzZSAnYWNjZXB0JzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3RBY2NlcHRBbGVydChvcHRzKTtcbiAgICBjYXNlICdkaXNtaXNzJzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3REaXNtaXNzQWxlcnQob3B0cyk7XG4gICAgY2FzZSAnZ2V0QnV0dG9ucyc6XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRBbGVydEJ1dHRvbnMoKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJ2FjdGlvbicgdmFsdWUgc2hvdWxkIGJlIGVpdGhlciAnYWNjZXB0JywgJ2Rpc21pc3MnIG9yICdnZXRCdXR0b25zJy4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYCcke29wdHMuYWN0aW9ufScgaXMgcHJvdmlkZWQgaW5zdGVhZC5gKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7OztBQUVBLFNBQVNDLGFBQVQsQ0FBd0JDLElBQUksR0FBRyxFQUEvQixFQUFtQztFQUNqQyxNQUFNQyxNQUFNLEdBQUcsRUFBZjs7RUFDQSxJQUFJRCxJQUFJLENBQUNFLFdBQVQsRUFBc0I7SUFDcEJELE1BQU0sQ0FBQ0UsSUFBUCxHQUFjSCxJQUFJLENBQUNFLFdBQW5CO0VBQ0Q7O0VBQ0QsT0FBT0QsTUFBUDtBQUNEOztBQUVESCxRQUFRLENBQUNNLFlBQVQsR0FBd0IsZUFBZUEsWUFBZixHQUErQjtFQUNyRCxPQUFPLE1BQU0sS0FBS0MsWUFBTCxDQUFrQixhQUFsQixFQUFpQyxLQUFqQyxDQUFiO0FBQ0QsQ0FGRDs7QUFJQVAsUUFBUSxDQUFDUSxZQUFULEdBQXdCLGVBQWVBLFlBQWYsQ0FBNkJDLEtBQTdCLEVBQW9DO0VBQzFELE9BQU8sTUFBTSxLQUFLRixZQUFMLENBQWtCLGFBQWxCLEVBQWlDLE1BQWpDLEVBQXlDO0lBQUNFO0VBQUQsQ0FBekMsQ0FBYjtBQUNELENBRkQ7O0FBSUFULFFBQVEsQ0FBQ1UsZUFBVCxHQUEyQixlQUFlQSxlQUFmLENBQWdDUixJQUFJLEdBQUcsRUFBdkMsRUFBMkM7RUFDcEUsT0FBTyxNQUFNLEtBQUtLLFlBQUwsQ0FBa0IsZUFBbEIsRUFBbUMsTUFBbkMsRUFBMkNOLGFBQWEsQ0FBQ0MsSUFBRCxDQUF4RCxDQUFiO0FBQ0QsQ0FGRDs7QUFJQUYsUUFBUSxDQUFDVyxnQkFBVCxHQUE0QixlQUFlQSxnQkFBZixDQUFpQ1QsSUFBSSxHQUFHLEVBQXhDLEVBQTRDO0VBQ3RFLE9BQU8sTUFBTSxLQUFLSyxZQUFMLENBQWtCLGdCQUFsQixFQUFvQyxNQUFwQyxFQUE0Q04sYUFBYSxDQUFDQyxJQUFELENBQXpELENBQWI7QUFDRCxDQUZEOztBQUlBRixRQUFRLENBQUNZLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixHQUFrQztFQUMzRCxPQUFPLE1BQU0sS0FBS0wsWUFBTCxDQUFrQixvQkFBbEIsRUFBd0MsS0FBeEMsQ0FBYjtBQUNELENBRkQ7O0FBSUFQLFFBQVEsQ0FBQ2EsaUJBQVQsR0FBNkIsZUFBZUEsaUJBQWYsQ0FBa0NYLElBQUksR0FBRyxFQUF6QyxFQUE2QztFQUN4RSxRQUFRQSxJQUFJLENBQUNZLE1BQWI7SUFDRSxLQUFLLFFBQUw7TUFDRSxPQUFPLE1BQU0sS0FBS0osZUFBTCxDQUFxQlIsSUFBckIsQ0FBYjs7SUFDRixLQUFLLFNBQUw7TUFDRSxPQUFPLE1BQU0sS0FBS1MsZ0JBQUwsQ0FBc0JULElBQXRCLENBQWI7O0lBQ0YsS0FBSyxZQUFMO01BQ0UsT0FBTyxNQUFNLEtBQUtVLGVBQUwsRUFBYjs7SUFDRjtNQUNFLE1BQU0sSUFBSUcsS0FBSixDQUFXLDJFQUFELEdBQ0MsSUFBR2IsSUFBSSxDQUFDWSxNQUFPLHdCQUQxQixDQUFOO0VBUko7QUFXRCxDQVpEOztlQWVlZCxRIn0=