{"version":3,"file":"condition.js","names":["commands","requireConditionInducerCompatibleDevice","driver","isSimulator","log","errorAndThrow","util","compareVersions","opts","platformVersion","mobileListConditionInducers","listConditionInducers","conditionInducerService","services","startInstrumentService","device","udid","ret","callChannel","INSTRUMENT_CHANNEL","CONDITION_INDUCER","selector","close","mobileEnableConditionInducer","enableConditionInducer","options","_conditionInducerService","_socketClient","destroyed","conditionID","profileID","_","isBoolean","JSON","stringify","mobileDisableConditionInducer","disableConditionInducer","warn"],"sources":["../../../lib/commands/condition.js"],"sourcesContent":["import { INSTRUMENT_CHANNEL, services } from 'appium-ios-device';\nimport _ from 'lodash';\nimport { util } from 'appium/support';\n\nconst commands = {};\n\nfunction requireConditionInducerCompatibleDevice (driver) {\n    if (driver.isSimulator()) {\n      driver.log.errorAndThrow('Condition inducer only works on real devices');\n    }\n    if (util.compareVersions(driver.opts.platformVersion, '<', '13.0')) {\n      driver.log.errorAndThrow('Condition inducer is only supported since iOS 13+');\n    }\n  }\n\n/**\n * @typedef {Object} Profile\n * @property {String} name\n * @property {String} identifier  the property is profileID used in MobileEnableConditionInducer\n * @property {String} description Configuration details\n */\n\n/**\n * We can use the returned data to determine whether the Condition is enabled and the currently enabled configuration information\n * @typedef {Object} Condition\n * @property {Array<Profile>} profiles\n * @property {String} identifier the property is conditionID used in MobileEnableConditionInducer\n * @property {boolean} profilesSorted\n * @property {boolean} isDestructive\n * @property {boolean} isInternal\n * @property {boolean} isActive `true` if this condition identifier is enabled\n * @property {String} activeProfile  enabled profiles identifier\n */\n\n/**\n * Get all ConditionInducer configuration information\n * We will use conditionID and profileID in the mobileEnableConditionInducer\n * @returns {Array<Condition>}\n * [{\n *     \"profiles\": [\n *          {\n *             \"name\": \"100% packet loss\",\n *             \"identifier\": \"SlowNetwork100PctLoss\",  // MobileEnableConditionInducer profileID\n *             \"description\": \"Name: 100% Loss Scenario\\n\n *                             Downlink Bandwidth: 0 Mbps\\n\n *                             Downlink Latency:0 ms\\n\n *                             Downlink Packet Loss Ratio: 100%\\n\n *                             Uplink Bandwidth: 0 Mbps\\n\n *                             Uplink Latency: 0 ms\\n\n *                             Uplink Packet Loss Ratio: 100%\"\n *         }\n *     ],\n *     \"profilesSorted\": true,\n *     \"identifier\": \"SlowNetworkCondition\",    // MobileEnableConditionInducer conditionID\n *     \"isDestructive\": false,\n *     \"isInternal\": false,\n *     \"activeProfile\": \"\",\n *     \"name\": \"Network Link\",\n *     \"isActive\": false\n * }]\n */\ncommands.mobileListConditionInducers = async function listConditionInducers () {\n  requireConditionInducerCompatibleDevice(this);\n  const conditionInducerService = await services.startInstrumentService(this.opts.device.udid);\n  try {\n    const ret = await conditionInducerService.callChannel(INSTRUMENT_CHANNEL.CONDITION_INDUCER, 'availableConditionInducers');\n    return ret.selector;\n  } finally {\n    conditionInducerService.close();\n  }\n};\n\n/**\n * Enable condition inducer. The socket needs to remain connected during operation\n * conditionID  Condition[0].identifier\n * profileID    Condition[0].profiles[0].identifier\n * @param {{conditionID,profileID}} options\n * @returns {boolean} `true` if enable the condition succeeded\n * @throws {Error} If try to start another Condition and the previous Condition has not stopped, it will throw an error\n */\ncommands.mobileEnableConditionInducer = async function enableConditionInducer (options = {}) {\n  requireConditionInducerCompatibleDevice(this);\n  if (this._conditionInducerService && !this._conditionInducerService._socketClient.destroyed) {\n    this.log.errorAndThrow(`Condition inducer has been started. A condition is already active.`);\n  }\n  const {\n    conditionID,\n    profileID,\n  } = options;\n  this._conditionInducerService = await services.startInstrumentService(this.opts.device.udid);\n  const ret = await this._conditionInducerService.callChannel(INSTRUMENT_CHANNEL.CONDITION_INDUCER,\n    'enableConditionWithIdentifier:profileIdentifier:', conditionID, profileID);\n  if (!_.isBoolean(ret.selector)) {\n    this._conditionInducerService.close();\n    this._conditionInducerService = null;\n    this.log.errorAndThrow(`Enable condition inducer error: '${JSON.stringify(ret.selector)}'`);\n  }\n  return ret.selector;\n};\n\n/**\n * Disable condition inducer\n * this call upon driver deletion\n * @returns {boolean} `true` if disable the condition succeeded\n */\ncommands.mobileDisableConditionInducer = async function disableConditionInducer () {\n  if (!this._conditionInducerService) {\n    this.log.warn('Condition inducer server is not started');\n    return false;\n  }\n  try {\n    const ret = await this._conditionInducerService.callChannel(INSTRUMENT_CHANNEL.CONDITION_INDUCER, 'disableActiveCondition');\n    if (!_.isBoolean(ret.selector)) {\n      this.log.warn(`Disable condition inducer error: '${JSON.stringify(ret.selector)}'`);\n      return false;\n    }\n    return ret.selector;\n  } finally {\n    if (this._conditionInducerService) {\n      this._conditionInducerService.close();\n      this._conditionInducerService = null;\n    }\n  }\n};\n\nexport {commands};\nexport default commands;\n"],"mappings":"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"}