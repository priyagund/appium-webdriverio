{"version":3,"file":"certificate.js","names":["extensions","commands","CONFIG_EXTENSION","HOST_PORT_RANGE","TMPSERVER_STARTUP_TIMEOUT","Settings","General","type","value","Profile","About","Certificate_Trust_Settings","Button","Install","Allow","Done","Return_to_Settings","Alert","extractCommonName","certBuffer","tempCert","tempDir","open","prefix","suffix","fs","writeFile","path","stdout","exec","parseCommonName","err","Error","message","rimraf","LIBRE_SSL_PATTERN","OPEN_SSL_PATTERN","stringCertificate","result","reduce","acc","r","match","toMobileConfig","commonName","getUUID","util","uuidV4","toUpperCase","contentUuid","PayloadContent","PayloadCertificateFileName","PayloadDescription","PayloadDisplayName","PayloadIdentifier","PayloadType","PayloadUUID","PayloadVersion","os","hostname","split","PayloadRemovalDisallowed","clickElement","driver","locator","options","element","timeout","skipIfInvisible","lookupDelay","retryInterval","findNativeElementOrElements","JSON","stringify","nativeClick","installPre122Certificate","B","delay","trustCertificateInPreferences","name","switchLocator","retry","mobileSwipe","direction","postAcceptAlert","installPost122Certificate","activateApp","isCertFound","swipeNum","mobileInstallCertificate","opts","content","isRoot","_","isEmpty","isSimulator","methodName","device","simctl","Buffer","from","toString","raw","e","log","debug","info","client","Pyidevice","udid","assertExists","installProfile","payload","tmpRoot","openDir","tmpPort","findAPortNotInUse","configName","configPath","resolve","tmpServer","http","createServer","res","configFile","readFile","end","cn","mobileConfig","plist","updatePlistFile","host","certUrl","listen","waitForCondition","checkPortStatus","ign","waitMs","intervalMs","isRealDevice","proxyCommand","url","isWebContext","setUrl","openUrl","isCertAlreadyInstalled","compareVersions","platformVersion","bundleId","warn","toInMemoryBase64","close","mobileListCertificates","errors","NotImplementedError","listProfiles","Object","assign"],"sources":["../../../lib/commands/certificate.js"],"sourcesContent":["import _ from 'lodash';\nimport { fs, plist, tempDir, util } from 'appium/support';\nimport { retryInterval, retry, waitForCondition } from 'asyncbox';\nimport B from 'bluebird';\nimport os from 'os';\nimport path from 'path';\nimport http from 'http';\nimport { exec } from 'teen_process';\nimport { findAPortNotInUse, checkPortStatus } from 'portscanner';\nimport Pyidevice from '../py-ios-device-client';\nimport { errors } from 'appium/driver';\n\nlet extensions = {}, commands = {};\n\nconst CONFIG_EXTENSION = 'mobileconfig';\nconst HOST_PORT_RANGE = [38200, 38299];\nconst TMPSERVER_STARTUP_TIMEOUT = 5000;\nconst Settings = {\n  General: {\n    type: 'accessibility id',\n    value: 'General',\n  },\n  Profile: {\n    type: '-ios predicate string',\n    value: `name BEGINSWITH 'Profile'`,\n  },\n  About: {\n    type: 'accessibility id',\n    value: 'About',\n  },\n  Certificate_Trust_Settings: {\n    type: 'accessibility id',\n    value: 'Certificate Trust Settings',\n  },\n};\nconst Button = {\n  Install: {\n    type: 'accessibility id',\n    value: 'Install',\n  },\n  Allow: {\n    type: 'accessibility id',\n    value: 'Allow',\n  },\n  Done: {\n    type: 'accessibility id',\n    value: 'Done',\n  },\n  Return_to_Settings: {\n    type: 'accessibility id',\n    value: 'Return to Settings',\n  },\n};\nconst Alert = {\n  Install: {\n    type: '-ios class chain',\n    value: '**/XCUIElementTypeAny[`type == \\'XCUIElementTypeAlert\\' OR type == \\'XCUIElementTypeSheet\\'`]/**/XCUIElementTypeButton[`label == \\'Install\\'`]',\n  },\n};\n\n\nasync function extractCommonName (certBuffer) {\n  const tempCert = await tempDir.open({\n    prefix: 'cert',\n    suffix: '.cer'\n  });\n  try {\n    await fs.writeFile(tempCert.path, certBuffer);\n    const {stdout} = await exec('openssl', ['x509', '-noout', '-subject', '-in', tempCert.path]);\n    return parseCommonName(stdout);\n  } catch (err) {\n    throw new Error(`Cannot parse common name value from the certificate. Is it valid and base64-encoded? ` +\n                    `Original error: ${err.message}`);\n  } finally {\n    await fs.rimraf(tempCert.path);\n  }\n}\n\nconst LIBRE_SSL_PATTERN = /\\/CN=([^\\/]+)/; // eslint-disable-line no-useless-escape\nconst OPEN_SSL_PATTERN = /,\\sCN\\s=\\s([^,]+)/;\n\nfunction parseCommonName (stringCertificate) {\n  const result = [LIBRE_SSL_PATTERN, OPEN_SSL_PATTERN].reduce((acc, r) => {\n    if (acc) {\n      return acc;\n    }\n    const match = r.exec(stringCertificate);\n    return match && match[1];\n  }, null);\n  if (!result) {\n    throw new Error(`There is no common name value in '${stringCertificate}' output`);\n  }\n  return result;\n}\n\n/**\n * Generates Apple's over-the-air configuration profile\n * for certificate deployment based on the given PEM certificate content.\n * Read https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/Introduction/Introduction.html\n * for more details on such profiles.\n *\n * @param {Buffer} certBuffer - The actual content of PEM certificate encoded into NodeJS buffer\n * @param {string} commonName - Certificate's common name\n * @returns {Object} The encoded structure of the given certificate, which is ready to be passed\n * as an argument to plist builder\n * @throws {Error} If the given certificate cannot be parsed\n */\nfunction toMobileConfig (certBuffer, commonName) {\n  const getUUID = () => util.uuidV4().toUpperCase();\n  const contentUuid = getUUID();\n  return {\n    PayloadContent: [{\n      PayloadCertificateFileName: `${commonName}.cer`,\n      PayloadContent: certBuffer,\n      PayloadDescription: 'Adds a CA root certificate',\n      PayloadDisplayName: commonName,\n      PayloadIdentifier: `com.apple.security.root.${contentUuid}`,\n      PayloadType: 'com.apple.security.root',\n      PayloadUUID: contentUuid,\n      PayloadVersion: 1\n    }],\n    PayloadDisplayName: commonName,\n    PayloadIdentifier: `${os.hostname().split('.')[0]}.${getUUID()}`,\n    PayloadRemovalDisallowed: false,\n    PayloadType: 'Configuration',\n    PayloadUUID: getUUID(),\n    PayloadVersion: 1\n  };\n}\n\nasync function clickElement (driver, locator, options = {}) {\n  let element = null;\n  const {\n    timeout = 5000,\n    skipIfInvisible = false\n  } = options;\n  const lookupDelay = 500;\n  try {\n    element = await retryInterval(timeout < lookupDelay ? 1 : timeout / lookupDelay, lookupDelay,\n      () => driver.findNativeElementOrElements(locator.type, locator.value, false)\n    );\n  } catch (err) {\n    if (skipIfInvisible) {\n      return false;\n    }\n    throw new Error(`Cannot find ${JSON.stringify(locator)} within ${timeout}ms timeout`);\n  }\n  await driver.nativeClick(element);\n  return true;\n}\n\nasync function installPre122Certificate (driver) {\n  // Accept Safari alert\n  await clickElement(driver, Button.Allow, {\n    // certificate load might take some time on slow machines\n    timeout: 15000,\n  });\n  // Wait until Preferences are opened\n  await B.delay(2000);\n\n  // Go through Preferences wizard\n  if (!await clickElement(driver, Button.Install, {\n    skipIfInvisible: true,\n  })) {\n    return false;\n  }\n  // We need to click Install button on two different tabs\n  // The second one confirms the previous\n  await B.delay(1500);\n  await clickElement(driver, Button.Install);\n  // Accept alert\n  await clickElement(driver, Alert.Install);\n  // Finish adding certificate\n  await clickElement(driver, Button.Done);\n  return true;\n}\n\nasync function trustCertificateInPreferences (driver, name) {\n  await clickElement(driver, Settings.General);\n  await clickElement(driver, Settings.About);\n  const switchLocator = {\n    type: '-ios class chain',\n    value: `**/XCUIElementTypeCell[\\`label == '${name}'\\`]/**/XCUIElementTypeSwitch`,\n  };\n  await retry(5, async () => {\n    await driver.mobileSwipe({\n      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),\n      direction: 'up'\n    });\n    await clickElement(driver, Settings.Certificate_Trust_Settings, {\n      timeout: 500,\n    });\n\n    await driver.findNativeElementOrElements(switchLocator.type, switchLocator.value, false);\n  });\n  // Only click the switch if it is set to Off\n  if (await clickElement(driver, {\n    type: switchLocator.type,\n    value: `${switchLocator.value}[\\`value == '0'\\`]`\n  }, {\n    timeout: 1000,\n    skipIfInvisible: true,\n  })) {\n    await driver.postAcceptAlert();\n  }\n}\n\nasync function installPost122Certificate (driver, name) {\n  // Accept Safari alert\n  await clickElement(driver, Button.Allow, {\n    // certificate load might take some time on slow machines\n    timeout: 15000,\n  });\n  // Wait for the second alert\n  await B.delay(2000);\n\n  await driver.postAcceptAlert();\n  await driver.activateApp('com.apple.Preferences');\n  await clickElement(driver, Settings.General);\n  await clickElement(driver, Settings.Profile);\n  // Select the target cert\n  let isCertFound = false;\n  for (let swipeNum = 0; swipeNum < 5; ++swipeNum) {\n    if (await clickElement(driver, {\n      type: '-ios class chain',\n      value: `**/XCUIElementTypeCell[\\`label == '${name}'\\`]`,\n    }, {\n      timeout: 500,\n      skipIfInvisible: true,\n    })) {\n      isCertFound = true;\n      break;\n    }\n\n    await driver.mobileSwipe({\n      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),\n      direction: 'up'\n    });\n  }\n  if (!isCertFound) {\n    throw new Error(`'${name}' cannot be found in the certificates list`);\n  }\n\n  // Install option is only visible if the cert is not installed yet\n  if (!await clickElement(driver, Button.Install, {\n    skipIfInvisible: true,\n  })) {\n    return false;\n  }\n  await B.delay(1500);\n  // Confirm untrusted cert install\n  await clickElement(driver, Button.Install);\n  // Accept alert\n  await clickElement(driver, Alert.Install);\n  // Finish adding certificate\n  await clickElement(driver, Button.Done);\n\n  return true;\n}\n\n/**\n * @typedef {Object} CertificateInstallationOptions\n *\n * @property {!string} content - Base64-encoded content of the public certificate\n * @property {?string} commonName - Common name of the certificate. If this is not set\n * then the script will try to parse it from the given certificate content.\n * @property {?boolean} isRoot [true] - This option defines where the certificate should be\n * installed to: either Trusted Root Store (`true`, the default option) or\n * the Keychain (`false`). On environments other than Xcode 11.4+ Simulator this\n * option is ignored.\n */\n\n/**\n * Installs a custom certificate onto the device.\n * Since Xcode SDK 11.4 Apple has added a dedicated simctl subcommand to quickly handle\n * certificates on Simulator over CLI.\n * On real devices or simulators before Xcode 11.4 SDK\n * Apple provides no official way to do it via the command line.\n * In such case (and also as a fallback if CLI setup fails)\n * this method tries to wrap the certificate into .mobileconfig format\n * and then deploys the wrapped file to the internal HTTP server,\n * so one can open it via mobile Safari.\n * Then the algorithm goes through the profile installation procedure by\n * clicking the necessary buttons using WebDriverAgent.\n *\n * @param {CertificateInstallationOptions} opts\n * @returns {?string} The content of the generated .mobileconfig file as\n * base64-encoded string. This config might be useful for debugging purposes.\n * If the certificate has been successfully set via CLI then nothing is returned.\n */\ncommands.mobileInstallCertificate = async function mobileInstallCertificate (opts = {}) {\n  const {\n    content,\n    commonName,\n    isRoot = true,\n  } = opts;\n  if (_.isEmpty(content)) {\n    throw new Error('Certificate content should not be empty');\n  }\n\n  if (this.isSimulator()) {\n    try {\n      const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';\n      await this.opts.device.simctl[methodName](\n        Buffer.from(content, 'base64').toString(), {raw: true}\n      );\n      return;\n    } catch (e) {\n      this.log.debug(e);\n      this.log.info(`The certificate cannot be installed via CLI. ` +\n        `Falling back to UI-based deployment`);\n    }\n  } else {\n    const client = new Pyidevice(this.opts.udid);\n    if (await client.assertExists(false)) {\n      await client.installProfile({payload: Buffer.from(content, 'base64')});\n      return;\n    } else {\n      this.log.info('pyidevice is not installed on your system. ' +\n        'Falling back to the (slow) UI-based installation');\n    }\n  }\n\n  const tmpRoot = await tempDir.openDir();\n  const tmpPort = await findAPortNotInUse(HOST_PORT_RANGE[0], HOST_PORT_RANGE[1]);\n  const configName = `appium.${CONFIG_EXTENSION}`;\n  const configPath = path.resolve(tmpRoot, configName);\n  const tmpServer = http.createServer(async function (_, res) {\n    const configFile = await fs.readFile(configPath);\n    res.end(configFile);\n  });\n  try {\n    const certBuffer = Buffer.from(content, 'base64');\n    const cn = commonName || await extractCommonName(certBuffer);\n    const mobileConfig = toMobileConfig(certBuffer, cn);\n    try {\n      await plist.updatePlistFile(configPath, mobileConfig, false, false);\n    } catch (err) {\n      throw new Error(`Cannot store the generated config as '${configPath}'. ` +\n                      `Original error: ${err.message}`);\n    }\n\n    try {\n      const host = os.hostname();\n      const certUrl = `http://${host}:${tmpPort}/${configName}`;\n      await tmpServer.listen(tmpPort);\n      try {\n        await waitForCondition(async () => {\n          try {\n            return (await checkPortStatus(tmpPort, host)) === 'open';\n          } catch (ign) {\n            return false;\n          }\n        }, {\n          waitMs: TMPSERVER_STARTUP_TIMEOUT,\n          intervalMs: 300,\n        });\n        this.log.debug(`The temporary web server is running at http://${host}:${tmpPort}`);\n      } catch (e) {\n        throw new Error(`The temporary web server cannot be started at http://${host}:${tmpPort}.`);\n      }\n      if (this.isRealDevice()) {\n        try {\n          await this.proxyCommand('/url', 'POST', {url: certUrl});\n        } catch (err) {\n          if (this.isWebContext()) {\n            // The command above does not always work on real devices\n            await this.setUrl(certUrl);\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        await this.opts.device.openUrl(certUrl);\n      }\n\n      let isCertAlreadyInstalled = false;\n      if (util.compareVersions(this.opts.platformVersion, '>=', '12.2')) {\n        if (await installPost122Certificate(this, cn)) {\n          await clickElement(this, Settings.Profile);\n          await trustCertificateInPreferences(this, cn);\n        } else {\n          isCertAlreadyInstalled = true;\n        }\n      } else {\n        if (await installPre122Certificate(this)) {\n          await clickElement(this, Button.Return_to_Settings);\n          await trustCertificateInPreferences(this, cn);\n        } else {\n          isCertAlreadyInstalled = true;\n        }\n      }\n      if (isCertAlreadyInstalled) {\n        this.log.info(`It looks like the '${cn}' certificate has been already added to the CA root`);\n      }\n    } finally {\n      if (this.opts.bundleId) {\n        try {\n          await this.activateApp(this.opts.bundleId);\n        } catch (e) {\n          this.log.warn(`Cannot restore the application '${this.opts.bundleId}'. Original error: ${e.message}`);\n        }\n      }\n    }\n\n    return (await util.toInMemoryBase64(configPath)).toString();\n  } finally {\n    await tmpServer.close();\n    await fs.rimraf(tmpRoot);\n  }\n};\n\n/**\n * Lists installed certificates for real devices only\n * if [py-ios-device](https://github.com/YueChen-C/py-ios-device) tool\n * is available on the server machine.\n *\n * @returns {Object} Returns map of certificates installed on the real device\n * @throws {Error} If attempting to list certificates for simulated device or if py-ios-device\n * is not installed\n */\ncommands.mobileListCertificates = async function mobileListCertificates () {\n  if (!this.isRealDevice()) {\n    throw new errors.NotImplementedError('This extension is only supported on real devices');\n  }\n  const client = new Pyidevice(this.opts.udid);\n  if (await client.assertExists(false)) {\n    return await client.listProfiles();\n  }\n  throw new Error('pyidevice is not installed on your system, command cannot be executed.');\n};\n\nObject.assign(extensions, commands);\nexport { commands, parseCommonName };\nexport default extensions;\n"],"mappings":"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"}