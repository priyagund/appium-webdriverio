{"version":3,"file":"record-audio.js","names":["commands","AUDIO_RECORD_FEAT_NAME","MAX_RECORDING_TIME_SEC","DEFAULT_RECORDING_TIME_SEC","PROCESS_STARTUP_TIMEOUT_MS","DEFAULT_SOURCE","DEFAULT_BITRATE","DEFAULT_CODEC","DEFAULT_CHANNELS","DEFAULT_RATE","DEFAULT_EXT","FFMPEG_BINARY","ffmpegLogger","logger","getLogger","AudioRecorder","constructor","input","log","audioPath","opts","mainProcess","start","timeoutSeconds","fs","which","err","Error","audioSource","audioCodec","audioBitrate","audioChannels","audioRate","args","SubProcess","isCaptureStarted","on","stdout","stderr","trim","startsWith","info","waitForCondition","waitMs","intervalMs","e","warn","isRunning","util","quote","once","code","signal","includes","debug","isRecording","interrupt","force","interruptPromise","stop","message","finish","cleanup","exists","rimraf","startAudioRecording","options","isFeatureEnabled","errorAndThrow","timeLimit","audioInput","forceRestart","_audioRecorder","tempDir","path","prefix","uuidV4","substring","suffix","audioRecorder","parseInt","isNaN","stopAudioRecording","resultPath","encodeBase64OrUpload"],"sources":["../../../lib/commands/record-audio.js"],"sourcesContent":["import { fs, tempDir, logger, util } from 'appium/support';\nimport { SubProcess } from 'teen_process';\nimport { encodeBase64OrUpload } from '../utils';\nimport { waitForCondition } from 'asyncbox';\n\n\nconst commands = {};\n\nconst AUDIO_RECORD_FEAT_NAME = 'audio_record';\nconst MAX_RECORDING_TIME_SEC = 60 * 60 * 12;\nconst DEFAULT_RECORDING_TIME_SEC = 60 * 3;\nconst PROCESS_STARTUP_TIMEOUT_MS = 5000;\nconst DEFAULT_SOURCE = 'avfoundation';\nconst DEFAULT_BITRATE = '128k';\nconst DEFAULT_CODEC = 'aac';\nconst DEFAULT_CHANNELS = 2;\nconst DEFAULT_RATE = 44100;\nconst DEFAULT_EXT = '.mp4';\nconst FFMPEG_BINARY = 'ffmpeg';\nconst ffmpegLogger = logger.getLogger(FFMPEG_BINARY);\n\n\nclass AudioRecorder {\n  constructor (input, log, audioPath, opts = {}) {\n    this.input = input;\n    this.log = log;\n    this.audioPath = audioPath;\n    this.opts = opts;\n    this.mainProcess = null;\n  }\n\n  async start (timeoutSeconds) {\n    try {\n      await fs.which(FFMPEG_BINARY);\n    } catch (err) {\n      throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` +\n        `Check https://www.ffmpeg.org/download.html for more details.`);\n    }\n\n    const {\n      audioSource = DEFAULT_SOURCE,\n      audioCodec,\n      audioBitrate,\n      audioChannels,\n      audioRate,\n    } = this.opts;\n\n    const args = [\n      '-t', `${timeoutSeconds}`,\n      '-f', audioSource,\n      '-i', this.input,\n      '-c:a', audioCodec,\n      '-b:a', audioBitrate,\n      '-ac', `${audioChannels}`,\n      '-ar', `${audioRate}`,\n      this.audioPath,\n    ];\n\n    this.mainProcess = new SubProcess(FFMPEG_BINARY, args);\n    let isCaptureStarted = false;\n    this.mainProcess.on('output', (stdout, stderr) => {\n      if (stderr) {\n        if (stderr.trim().startsWith('size=')) {\n          if (!isCaptureStarted) {\n            isCaptureStarted = true;\n          }\n        } else {\n          ffmpegLogger.info(`${stderr}`);\n        }\n      }\n    });\n    await this.mainProcess.start(0);\n    try {\n      await waitForCondition(() => isCaptureStarted, {\n        waitMs: PROCESS_STARTUP_TIMEOUT_MS,\n        intervalMs: 300,\n      });\n    } catch (e) {\n      this.log.warn(`Audio recording process did not start within ${PROCESS_STARTUP_TIMEOUT_MS}ms. Continuing anyway`);\n    }\n    if (!this.mainProcess.isRunning) {\n      this.mainProcess = null;\n      throw new Error(`The audio recording process '${FFMPEG_BINARY}' died unexpectedly. ` +\n        `Check server logs for more details`);\n    }\n    this.log.info(`Starting capture on audio input '${this.input}' with command: '${util.quote([FFMPEG_BINARY, ...args])}'. ` +\n      `Will timeout in ${timeoutSeconds}s`);\n    this.mainProcess.once('exit', (code, signal) => {\n      // ffmpeg returns code 255 if SIGINT arrives\n      if ([0, 255].includes(code)) {\n        this.log.info(`The recording session on audio input '${this.input}' has been finished`);\n      } else {\n        this.log.debug(`The recording session on audio input '${this.input}' has exited ` +\n          `with code ${code}, signal ${signal}`);\n      }\n    });\n  }\n\n  isRecording () {\n    return !!(this.mainProcess?.isRunning);\n  }\n\n  async interrupt (force = false) {\n    if (this.isRecording()) {\n      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');\n      this.mainProcess = null;\n      try {\n        await interruptPromise;\n      } catch (e) {\n        this.log.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` +\n          `Original error: ${e.message}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  async finish () {\n    await this.interrupt();\n    return this.audioPath;\n  }\n\n  async cleanup () {\n    if (await fs.exists(this.audioPath)) {\n      await fs.rimraf(this.audioPath);\n    }\n  }\n}\n\n\n/**\n * @typedef {Object} StartRecordingOptions\n *\n * @property {!string} audioInput - The name of the corresponding audio input device to use for the\n * capture. The full list of capture devices could be shown using `ffmpeg -f avfoundation -list_devices true -i \"\"`\n * Terminal command.\n * @property {?string} audioCodec [aac] - The name of the audio codec. The Advanced Audio Codec is used by default.\n * @property {?string} audioBitrate [128k] - The bitrate of the resulting audio stream. 128k by default.\n * @property {?string|number} audioChannels [2] - The count of audio channels in the resulting stream. Setting it to `1`\n * will create a single channel (mono) audio stream.\n * @property {?string|number} audioRate [44100] - The sampling rate of the resulting audio stream.\n * @property {?string|number} timeLimit [180] - The maximum recording time, in seconds.\n * The default value is 180, the maximum value is 43200 (12 hours).\n * @property {?boolean} forceRestart [false] - Whether to restart audio capture process forcefully when\n * startRecordingAudio is called (`true`) or ignore the call until the current audio recording is completed.\n */\n\n/**\n * Records the given hardware audio input into an .mp4 file.\n *\n * @param {?StartRecordingOptions} options - The available options.\n * @throws {Error} If audio recording has failed to start.\n */\ncommands.startAudioRecording = async function startAudioRecording (options = {}) {\n  if (!this.isFeatureEnabled(AUDIO_RECORD_FEAT_NAME)) {\n    this.log.errorAndThrow(`Audio capture feature must be enabled on the server side. ` +\n      `Please set '--relaxed-security' or '--allow-insecure' with '${AUDIO_RECORD_FEAT_NAME}' option. ` +\n      `Read https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.`);\n  }\n\n  const {\n    timeLimit = DEFAULT_RECORDING_TIME_SEC,\n    audioInput,\n    // Undocumented feature\n    audioSource,\n    audioCodec = DEFAULT_CODEC,\n    audioBitrate = DEFAULT_BITRATE,\n    audioChannels = DEFAULT_CHANNELS,\n    audioRate = DEFAULT_RATE,\n    forceRestart,\n  } = options;\n\n  if (!audioInput) {\n    this.log.errorAndThrow(`The mandatory audioInput option is not provided. Please set it ` +\n      `to a correct value (e. g. ':1'). Use 'ffmpeg -f avfoundation -list_devices true -i \"\"' ` +\n      `command to list available input sources`);\n  }\n\n  if (this._audioRecorder?.isRecording()) {\n    this.log.info(`There is an active audio recording process`);\n    if (forceRestart) {\n      this.log.info(`Stopping it because 'forceRestart' option is set to true`);\n      await this._audioRecorder.interrupt(true);\n    } else {\n      this.log.info(`Doing nothing. ` +\n        `Set 'forceRestart' option to true if you'd like to start a new audio recording session`);\n      return;\n    }\n  }\n  if (this._audioRecorder) {\n    await this._audioRecorder.cleanup();\n    this._audioRecorder = null;\n  }\n\n  const audioPath = await tempDir.path({\n    prefix: `appium_${util.uuidV4().substring(0, 8)}`,\n    suffix: DEFAULT_EXT,\n  });\n\n  const audioRecorder = new AudioRecorder(audioInput, this.log, audioPath, {\n    audioSource,\n    audioCodec,\n    audioBitrate,\n    audioChannels,\n    audioRate,\n  });\n\n  const timeoutSeconds = parseInt(timeLimit, 10);\n  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {\n    this.log.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` +\n      `The value of '${timeLimit}' has been passed instead.`);\n  }\n\n  try {\n    await audioRecorder.start(timeoutSeconds);\n  } catch (e) {\n    await audioRecorder.interrupt(true);\n    await audioRecorder.cleanup();\n    throw e;\n  }\n  this._audioRecorder = audioRecorder;\n};\n\n/**\n * Stop recording of the audio input. If no audio recording process is running then\n * the endpoint will try to get the recently recorded file.\n * If no previously recorded file is found and no active audio recording\n * processes are running then the method returns an empty string.\n *\n * @returns {string} Base64-encoded content of the recorded media file or an\n * empty string if no audio recording has been started before.\n * @throws {Error} If there was an error while getting the recorded file.\n */\ncommands.stopAudioRecording = async function stopAudioRecording () {\n  if (!this._audioRecorder) {\n    this.log.info('Audio recording has not been started. There is nothing to stop');\n    return '';\n  }\n\n  let resultPath;\n  try {\n    resultPath = await this._audioRecorder.finish();\n    if (!await fs.exists(resultPath)) {\n      this.log.errorAndThrow(`${FFMPEG_BINARY} has failed ` +\n        `to store the actual audio recording at '${resultPath}'`);\n    }\n  } catch (e) {\n    await this._audioRecorder.interrupt(true);\n    await this._audioRecorder.cleanup();\n    this._audioRecorder = null;\n    throw e;\n  }\n  return await encodeBase64OrUpload(resultPath);\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}