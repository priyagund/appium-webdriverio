{"version":3,"file":"biometric.js","names":["commands","helpers","extensions","assertIsSimulator","driver","isSimulator","Error","mobileEnrollBiometric","opts","isEnabled","device","enrollBiometric","mobileSendBiometricMatch","match","type","sendBiometricMatch","mobileIsBiometricEnrolled","isBiometricEnrolled","Object","assign"],"sources":["../../../lib/commands/biometric.js"],"sourcesContent":["let commands = {}, helpers = {}, extensions = {};\n\nfunction assertIsSimulator (driver) {\n  if (!driver.isSimulator()) {\n    throw new Error('Biometric enrollment can only be performed on Simulator');\n  }\n}\n\n/**\n * @typedef {Object} EnrollOptions\n *\n * @property {?boolean} isEnabled [true] - Whether to enable/disable biometric enrollment.\n */\n\n/**\n * Enrolls biometric authentication on Simulator.\n *\n * @param {EnrollOptions} opts - Enrollment options.\n * @throws {Error} If enrollment fails or the device is not a Simulator.\n */\ncommands.mobileEnrollBiometric = async function mobileEnrollBiometric (opts = {}) {\n  const {\n    isEnabled = true,\n  } = opts;\n\n  assertIsSimulator(this);\n\n  await this.opts.device.enrollBiometric(isEnabled);\n};\n\n/**\n * @typedef {Object} BiometricMatchOptions\n *\n * @property {?string} type [touchId] - The biometric feature name.\n * @property {?boolean} match [true] - Whether to simulate biometric match or non-match.\n */\n\n/**\n * Emulates biometric match/non-match event on Simulator.\n * The biometric feature is expected to be already enrolled before executing that.\n *\n * @param {BiometricMatchOptions} opts - Matching options.\n * @throws {Error} If matching fails or the device is not a Simulator.\n */\ncommands.mobileSendBiometricMatch = async function mobileSendBiometricMatch (opts = {}) {\n  const {\n    match = true,\n    type = 'touchId',\n  } = opts;\n\n  assertIsSimulator(this);\n\n  await this.opts.device.sendBiometricMatch(match, type);\n};\n\n/**\n * Checks whether biometric is currently enrolled or not.\n *\n * @return {boolean} True if biometric is enrolled.\n * @throws {Error} If the detection fails or the device is not a Simulator.\n */\ncommands.mobileIsBiometricEnrolled = async function mobileIsBiometricEnrolled () {\n  assertIsSimulator(this);\n\n  return await this.opts.device.isBiometricEnrolled();\n};\n\nObject.assign(extensions, commands, helpers);\nexport { commands, helpers };\nexport default extensions;\n"],"mappings":";;;;;;;;;AAAA,IAAIA,QAAQ,GAAG,EAAf;AAAA,IAAmBC,OAAO,GAAG,EAA7B;AAAA,IAAiCC,UAAU,GAAG,EAA9C;;;;AAEA,SAASC,iBAAT,CAA4BC,MAA5B,EAAoC;EAClC,IAAI,CAACA,MAAM,CAACC,WAAP,EAAL,EAA2B;IACzB,MAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;EACD;AACF;;AAcDN,QAAQ,CAACO,qBAAT,GAAiC,eAAeA,qBAAf,CAAsCC,IAAI,GAAG,EAA7C,EAAiD;EAChF,MAAM;IACJC,SAAS,GAAG;EADR,IAEFD,IAFJ;EAIAL,iBAAiB,CAAC,IAAD,CAAjB;EAEA,MAAM,KAAKK,IAAL,CAAUE,MAAV,CAAiBC,eAAjB,CAAiCF,SAAjC,CAAN;AACD,CARD;;AAwBAT,QAAQ,CAACY,wBAAT,GAAoC,eAAeA,wBAAf,CAAyCJ,IAAI,GAAG,EAAhD,EAAoD;EACtF,MAAM;IACJK,KAAK,GAAG,IADJ;IAEJC,IAAI,GAAG;EAFH,IAGFN,IAHJ;EAKAL,iBAAiB,CAAC,IAAD,CAAjB;EAEA,MAAM,KAAKK,IAAL,CAAUE,MAAV,CAAiBK,kBAAjB,CAAoCF,KAApC,EAA2CC,IAA3C,CAAN;AACD,CATD;;AAiBAd,QAAQ,CAACgB,yBAAT,GAAqC,eAAeA,yBAAf,GAA4C;EAC/Eb,iBAAiB,CAAC,IAAD,CAAjB;EAEA,OAAO,MAAM,KAAKK,IAAL,CAAUE,MAAV,CAAiBO,mBAAjB,EAAb;AACD,CAJD;;AAMAC,MAAM,CAACC,MAAP,CAAcjB,UAAd,EAA0BF,QAA1B,EAAoCC,OAApC;eAEeC,U"}