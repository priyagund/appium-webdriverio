{"version":3,"file":"screenshots.js","names":["commands","getScreenshot","getScreenshotFromWDA","log","debug","data","proxyCommand","_","isString","Error","JSON","stringify","mjpegStream","info","lastChunkPNGBase64","warn","err","message","isSimulator","opts","device","simctl","retryInterval","getElementScreenshot","el","util","unwrapElement","isWebContext","atomsElement","getAtomsElement","executeAtom","errorAndThrow","getViewportScreenshot","statusBarHeight","getStatusBarHeight","screenshot","scale","getDevicePixelRatio","Math","round","windowSize","getWindowSize","rect","left","top","width","height","newScreenshot","imageUtil","cropBase64Image"],"sources":["../../../lib/commands/screenshots.js"],"sourcesContent":["import { retryInterval } from 'asyncbox';\nimport _ from 'lodash';\nimport { util, imageUtil } from 'appium/support';\n\nlet commands = {};\n\ncommands.getScreenshot = async function getScreenshot () {\n  const getScreenshotFromWDA = async () => {\n    this.log.debug(`Taking screenshot with WDA`);\n    const data = await this.proxyCommand('/screenshot', 'GET');\n    if (!_.isString(data)) {\n      throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);\n    }\n    return data;\n  };\n\n  // if we've specified an mjpeg server, use that\n  if (this.mjpegStream) {\n    this.log.info(`mjpeg video stream provided, returning latest frame as screenshot`);\n    const data = await this.mjpegStream.lastChunkPNGBase64();\n    if (data) {\n      return data;\n    }\n    this.log.warn('Tried to get screenshot from active MJPEG stream, but there ' +\n      'was no data yet. Falling back to regular screenshot methods.');\n  }\n\n  try {\n    return await getScreenshotFromWDA();\n  } catch (err) {\n    this.log.warn(`Error getting screenshot: ${err.message}`);\n  }\n\n  // simulator attempt\n  if (this.isSimulator()) {\n    this.log.info(`Falling back to 'simctl io screenshot' API`);\n    return await this.opts.device.simctl.getScreenshot();\n  }\n\n  // Retry for real devices only. Fail fast on Simulator if simctl does not work as expected\n  return await retryInterval(2, 1000, getScreenshotFromWDA);\n};\n\ncommands.getElementScreenshot = async function getElementScreenshot (el) {\n  el = util.unwrapElement(el);\n  if (this.isWebContext()) {\n    const atomsElement = this.getAtomsElement(el);\n    return await this.executeAtom('getElementScreenshot', [atomsElement]);\n  }\n\n  const data = await this.proxyCommand(`/element/${el}/screenshot`, 'GET');\n  if (!_.isString(data)) {\n    this.log.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);\n  }\n  return data;\n};\n\ncommands.getViewportScreenshot = async function getViewportScreenshot () {\n  let statusBarHeight = await this.getStatusBarHeight();\n  const screenshot = await this.getScreenshot();\n\n  // if we don't have a status bar, there's nothing to crop, so we can avoid\n  // extra calls and return straightaway\n  if (statusBarHeight === 0) {\n    return screenshot;\n  }\n\n  const scale = await this.getDevicePixelRatio();\n  // status bar height comes in unscaled, so scale it\n  statusBarHeight = Math.round(statusBarHeight * scale);\n  const windowSize = await this.getWindowSize();\n  let rect = {\n    left: 0,\n    top: statusBarHeight,\n    width: windowSize.width * scale,\n    height: ((windowSize.height * scale) - statusBarHeight)\n  };\n  let newScreenshot = await imageUtil.cropBase64Image(screenshot, rect);\n  return newScreenshot;\n};\n\nexport default commands;\n"],"mappings":"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"}