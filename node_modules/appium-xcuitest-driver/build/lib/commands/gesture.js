"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extensions = exports.default = exports.commands = void 0;
exports.gesturesChainToString = gesturesChainToString;
exports.helpers = void 0;

require("source-map-support/register");

var _driver = require("appium/driver");

var _support = require("appium/support");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

const SUPPORTED_GESTURE_DIRECTIONS = ['up', 'down', 'left', 'right'];
const helpers = {},
      extensions = {},
      commands = {};
exports.commands = commands;
exports.extensions = extensions;
exports.helpers = helpers;

function toElementId(opts = {}) {
  if (opts.element) {
    _logger.default.info(`The 'element' argument name is deprecated. Consider using 'elementId' instead`);
  }

  const el = opts.elementId || opts.element;
  return el ? _support.util.unwrapElement(el) : null;
}

async function toElementOrApplicationId(driver, opts = {}) {
  return toElementId(opts) || _support.util.unwrapElement(await driver.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false));
}

commands.moveTo = async function moveTo(el, xoffset = 0, yoffset = 0) {
  el = _support.util.unwrapElement(el);

  if (this.isWebContext()) {
    let {
      x,
      y
    } = await this.getLocation(el);
    let coords = {
      x: x + xoffset,
      y: y + yoffset
    };
    this.curWebCoords = coords;
    let atomsElement = this.getAtomsElement(el);
    let relCoords = {
      x: xoffset,
      y: yoffset
    };
    await this.executeAtom('move_mouse', [atomsElement, relCoords]);
  } else {
    if (_lodash.default.isNil(el)) {
      if (!this.curCoords) {
        throw new _driver.errors.UnknownException('Current cursor position unknown, please use moveTo with an element the first time.');
      }

      this.curCoords = {
        x: this.curCoords.x + xoffset,
        y: this.curCoords.y + yoffset
      };
    } else {
      let elPos = await this.getLocation(el);
      this.curCoords = {
        x: elPos.x + xoffset,
        y: elPos.y + yoffset
      };
    }
  }
};

function requireFloatParameter(paramName, paramValue, methodName) {
  if (_lodash.default.isUndefined(paramValue)) {
    throw new _driver.errors.InvalidArgumentError(`"${paramName}" parameter is mandatory for "${methodName}" call`);
  }

  const result = parseFloat(paramValue);

  if (isNaN(result)) {
    throw new _driver.errors.InvalidArgumentError(`"${paramName}" parameter should be a valid number. "${paramValue}" is given instead`);
  }

  return result;
}

function requireIntParameter(paramName, paramValue, methodName) {
  if (_lodash.default.isUndefined(paramValue)) {
    throw new _driver.errors.InvalidArgumentError(`"${paramName}" parameter is mandatory for "${methodName}" call`);
  }

  const result = parseInt(paramValue, 10);

  if (isNaN(result)) {
    throw new _driver.errors.InvalidArgumentError(`"${paramName}" parameter should be a valid integer. "${paramValue}" is given instead`);
  }

  return result;
}

commands.mobileShake = async function mobileShake() {
  if (!this.isSimulator()) {
    throw new _driver.errors.UnknownError('Shake is not supported on real devices');
  }

  await this.opts.device.shake();
};

commands.click = async function click(el) {
  if (!this.isWebContext()) {
    return await this.nativeClick(el);
  }

  el = _support.util.unwrapElement(el);

  if ((await this.settings.getSettings()).nativeWebTap || (await this.settings.getSettings()).nativeWebTapStrict) {
    this.log.debug('Using native web tap');
    await this.nativeWebTap(el);
  } else {
    const atomsElement = this.getAtomsElement(el);
    return await this.executeAtom('click', [atomsElement]);
  }
};

function gesturesChainToString(gestures, keysToInclude = ['options']) {
  return gestures.map(item => {
    let otherKeys = _lodash.default.difference(_lodash.default.keys(item), ['action']);

    otherKeys = _lodash.default.isArray(keysToInclude) ? _lodash.default.intersection(otherKeys, keysToInclude) : otherKeys;

    if (otherKeys.length) {
      return `${item.action}` + `(${_lodash.default.map(otherKeys, x => x + '=' + (_lodash.default.isPlainObject(item[x]) ? JSON.stringify(item[x]) : item[x])).join(', ')})`;
    }

    return item.action;
  }).join('-');
}

commands.performActions = async function performActions(actions) {
  this.log.debug(`Received the following W3C actions: ${JSON.stringify(actions, null, '  ')}`);
  const preprocessedActions = actions.map(action => Object.assign({}, action, action.type === 'pointer' ? {
    parameters: {
      pointerType: 'touch'
    }
  } : {})).map(action => {
    const modifiedAction = _lodash.default.clone(action) || {};
    modifiedAction.actions = (action.actions || []).filter(innerAction => !(innerAction.type === 'pause' && innerAction.duration === 0));
    return modifiedAction;
  });
  this.log.debug(`Preprocessed actions: ${JSON.stringify(preprocessedActions, null, '  ')}`);
  return await this.proxyCommand('/actions', 'POST', {
    actions: preprocessedActions
  });
};

commands.releaseActions = function releaseActions() {
  this.log.warn('On this platform, releaseActions is a no-op');
};

commands.performTouch = async function performTouch(gestures) {
  this.log.debug(`Received the following touch action: ${gesturesChainToString(gestures)}`);

  try {
    return await this.proxyCommand('/wda/touch/perform', 'POST', {
      actions: gestures
    });
  } catch (e) {
    if (!this.isWebContext()) {
      throw e;
    }

    this.log.errorAndThrow('The Touch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate touch events being in WEBVIEW context. Original error: ${e.message}`);
  }
};

commands.performMultiAction = async function performMultiAction(actions) {
  this.log.debug(`Received the following multi touch action:`);

  for (let i in actions) {
    this.log.debug(`    ${parseInt(i, 10) + 1}: ${_lodash.default.map(actions[i], 'action').join('-')}`);
  }

  try {
    return await this.proxyCommand('/wda/touch/multi/perform', 'POST', {
      actions
    });
  } catch (e) {
    if (!this.isWebContext()) {
      throw e;
    }

    this.log.errorAndThrow('The MultiTouch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate multitouch events being in WEBVIEW context. Original error: ${e.message}`);
  }
};

commands.nativeClick = async function nativeClick(el) {
  el = _support.util.unwrapElement(el);
  let endpoint = `/element/${el}/click`;
  return await this.proxyCommand(endpoint, 'POST', {});
};

commands.mobileScrollToElement = async function mobileScrollToElement(opts = {}) {
  const elementId = await toElementId(opts);

  if (!elementId) {
    throw new _driver.errors.InvalidArgumentError('Element id must be provided');
  }

  return await this.proxyCommand(`/wda/element/${elementId}/scrollTo`, 'POST', {});
};

helpers.mobileScroll = async function mobileScroll(opts = {}) {
  const {
    name,
    direction,
    predicateString,
    toVisible,
    distance
  } = opts;
  const params = {};

  if (name) {
    params.name = name;
  } else if (direction) {
    if (!SUPPORTED_GESTURE_DIRECTIONS.includes(_lodash.default.toLower(direction))) {
      throw new _driver.errors.InvalidArgumentError(`'direction' must be one of: ${SUPPORTED_GESTURE_DIRECTIONS}`);
    }

    params.direction = direction;
  } else if (predicateString) {
    params.predicateString = predicateString;
  } else if (toVisible) {
    params.toVisible = toVisible;
  } else {
    throw new _driver.errors.InvalidArgumentError('Mobile scroll supports the following strategies: name, direction, predicateString, and toVisible. ' + 'Specify one of these');
  }

  if (!_lodash.default.isNil(distance)) {
    params.distance = distance;
  }

  const elementId = await toElementOrApplicationId(this, opts);
  return await this.proxyCommand(`/wda/element/${elementId}/scroll`, 'POST', params);
};

helpers.mobileSwipe = async function mobileSwipe(opts = {}) {
  const {
    direction,
    velocity
  } = opts;

  if (!SUPPORTED_GESTURE_DIRECTIONS.includes(_lodash.default.toLower(direction))) {
    throw new _driver.errors.InvalidArgumentError(`'direction' must be one of: ${SUPPORTED_GESTURE_DIRECTIONS}`);
  }

  const params = {
    direction
  };

  if (!_lodash.default.isNil(velocity)) {
    params.velocity = velocity;
  }

  const elementId = await toElementOrApplicationId(this, opts);
  return await this.proxyCommand(`/wda/element/${elementId}/swipe`, 'POST', params);
};

helpers.mobilePinch = async function mobilePinch(opts = {}) {
  const params = {
    scale: requireFloatParameter('scale', opts.scale, 'pinch'),
    velocity: requireFloatParameter('velocity', opts.velocity, 'pinch')
  };
  const elementId = await toElementOrApplicationId(this, opts);
  return await this.proxyCommand(`/wda/element/${elementId}/pinch`, 'POST', params);
};

helpers.mobileDoubleTap = async function mobileDoubleTap(opts = {}) {
  const elementId = toElementId(opts);

  if (elementId) {
    return await this.proxyCommand(`/wda/element/${elementId}/doubleTap`, 'POST');
  }

  const params = {
    x: requireFloatParameter('x', opts.x, 'doubleTap'),
    y: requireFloatParameter('y', opts.y, 'doubleTap')
  };
  return await this.proxyCommand('/wda/doubleTap', 'POST', params);
};

helpers.mobileTwoFingerTap = async function mobileTwoFingerTap(opts = {}) {
  const elementId = await toElementOrApplicationId(this, opts);
  return await this.proxyCommand(`/wda/element/${elementId}/twoFingerTap`, 'POST');
};

helpers.mobileTouchAndHold = async function mobileTouchAndHold(opts = {}) {
  const params = {
    duration: requireFloatParameter('duration', opts.duration, 'touchAndHold')
  };
  const elementId = toElementId(opts);

  if (elementId) {
    return await this.proxyCommand(`/wda/element/${elementId}/touchAndHold`, 'POST', params);
  }

  params.x = requireFloatParameter('x', opts.x, 'touchAndHold');
  params.y = requireFloatParameter('y', opts.y, 'touchAndHold');
  return await this.proxyCommand('/wda/touchAndHold', 'POST', params);
};

helpers.mobileTap = async function mobileTap(opts = {}) {
  const params = {
    x: requireFloatParameter('x', opts.x, 'tap'),
    y: requireFloatParameter('y', opts.y, 'tap')
  };
  const elementId = toElementId(opts) || '0';
  return await this.proxyCommand(`/wda/tap/${elementId}`, 'POST', params);
};

helpers.mobileDragFromToForDuration = async function mobileDragFromToForDuration(opts = {}) {
  const params = {
    duration: requireFloatParameter('duration', opts.duration, 'dragFromToForDuration'),
    fromX: requireFloatParameter('fromX', opts.fromX, 'dragFromToForDuration'),
    fromY: requireFloatParameter('fromY', opts.fromY, 'dragFromToForDuration'),
    toX: requireFloatParameter('toX', opts.toX, 'dragFromToForDuration'),
    toY: requireFloatParameter('toY', opts.toY, 'dragFromToForDuration')
  };
  const elementId = toElementId(opts);
  return elementId ? await this.proxyCommand(`/wda/element/${elementId}/dragfromtoforduration`, 'POST', params) : await this.proxyCommand('/wda/dragfromtoforduration', 'POST', params);
};

helpers.mobileDragFromToWithVelocity = async function mobileDragFromToWithVelocity(opts = {}) {
  const params = {
    pressDuration: requireFloatParameter('pressDuration', opts.pressDuration, 'dragFromToWithVelocity'),
    holdDuration: requireFloatParameter('holdDuration', opts.holdDuration, 'dragFromToWithVelocity'),
    velocity: requireFloatParameter('velocity', opts.velocity, 'dragFromToWithVelocity')
  };
  const fromElementId = opts.fromElementId ? _support.util.unwrapElement(opts.fromElementId) : null;

  if (fromElementId) {
    const toElement = opts.toElementId ? _support.util.unwrapElement(opts.toElementId) : null;

    if (!toElement) {
      throw new _driver.errors.InvalidArgumentError(`"toElementId" parameter is mandatory for "dragFromToWithVelocity" call`);
    }

    params.toElement = toElement;
    return await this.proxyCommand(`/wda/element/${fromElementId}/pressAndDragWithVelocity`, 'POST', params);
  }

  params.fromX = requireFloatParameter('fromX', opts.fromX, 'dragFromToWithVelocity');
  params.fromY = requireFloatParameter('fromY', opts.fromY, 'dragFromToWithVelocity');
  params.toX = requireFloatParameter('toX', opts.toX, 'dragFromToWithVelocity');
  params.toY = requireFloatParameter('toY', opts.toY, 'dragFromToWithVelocity');
  return await this.proxyCommand('/wda/pressAndDragWithVelocity', 'POST', params);
};

helpers.mobileTapWithNumberOfTaps = async function mobileTapWithNumberOfTaps(opts = {}) {
  const elementId = toElementId(opts);

  if (!elementId) {
    throw new _driver.errors.InvalidArgumentError('Element id is expected to be set for tapWithNumberOfTaps method');
  }

  const params = {
    numberOfTaps: requireIntParameter('numberOfTaps', opts.numberOfTaps, 'tapWithNumberOfTaps'),
    numberOfTouches: requireIntParameter('numberOfTouches', opts.numberOfTouches, 'tapWithNumberOfTaps')
  };
  return await this.proxyCommand(`/wda/element/${elementId}/tapWithNumberOfTaps`, 'POST', params);
};

helpers.mobileForcePress = async function mobileForcePress(opts = {}) {
  const {
    x,
    y,
    duration,
    pressure
  } = opts;
  const elementId = toElementId(opts);
  const endpoint = elementId ? `/wda/element/${elementId}/forceTouch` : `/wda/forceTouch`;
  return await this.proxyCommand(endpoint, 'POST', {
    x,
    y,
    duration,
    pressure
  });
};

helpers.mobileSelectPickerWheelValue = async function mobileSelectPickerWheelValue(opts = {}) {
  const elementId = toElementId(opts);

  if (!elementId) {
    throw new _driver.errors.InvalidArgumentError('Element id is expected to be set for selectPickerWheelValue method');
  }

  if (!_lodash.default.isString(opts.order) || !['next', 'previous'].includes(opts.order.toLowerCase())) {
    throw new _driver.errors.InvalidArgumentError(`The mandatory 'order' parameter is expected to be equal either to 'next' or 'previous'. ` + `'${opts.order}' is given instead`);
  }

  const params = {
    order: opts.order
  };

  if (opts.offset) {
    params.offset = requireFloatParameter('offset', opts.offset, 'selectPickerWheelValue');
  }

  return await this.proxyCommand(`/wda/pickerwheel/${elementId}/select`, 'POST', params);
};

helpers.mobileRotateElement = async function mobileRotateElement(opts = {}) {
  const elementId = toElementId(opts);

  if (!elementId) {
    throw new _driver.errors.InvalidArgumentError('Element id is expected to be set for rotateElement method');
  }

  const params = {
    rotation: requireFloatParameter('rotation', opts.rotation, 'rotateElement'),
    velocity: requireFloatParameter('velocity', opts.velocity, 'rotateElement')
  };
  return await this.proxyCommand(`/wda/element/${elementId}/rotate`, 'POST', params);
};

helpers.getCoordinates = async function getCoordinates(gesture) {
  let coordinates = {
    x: 0,
    y: 0,
    areOffsets: false
  };
  let optionX = null;

  if (gesture.options.x) {
    optionX = requireFloatParameter('x', gesture.options.x, 'getCoordinates');
  }

  let optionY = null;

  if (gesture.options.y) {
    optionY = requireFloatParameter('y', gesture.options.y, 'getCoordinates');
  }

  const elementId = toElementId(gesture.options);

  if (elementId) {
    let rect = await this.getElementRect(elementId);
    let pos = {
      x: rect.x,
      y: rect.y
    };
    let size = {
      w: rect.width,
      h: rect.height
    };
    let offsetX = 0;
    let offsetY = 0;

    if (optionX || optionY) {
      offsetX = optionX || 0;
      offsetY = optionY || 0;
    } else {
      offsetX = size.w / 2;
      offsetY = size.h / 2;
    }

    coordinates.x = pos.x + offsetX;
    coordinates.y = pos.y + offsetY;
  } else {
    coordinates.areOffsets = gesture.action === 'moveTo';
    coordinates.x = optionX || 0;
    coordinates.y = optionY || 0;
  }

  return coordinates;
};

helpers.applyMoveToOffset = function applyMoveToOffset(firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

Object.assign(extensions, helpers, commands);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,