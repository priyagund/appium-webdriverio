{"version":3,"file":"performance.js","names":["commands","PERF_RECORD_FEAT_NAME","PERF_RECORD_SECURITY_MESSAGE","DEFAULT_TIMEOUT_MS","STOP_TIMEOUT_MS","STARTUP_TIMEOUT_MS","DEFAULT_PROFILE_NAME","DEFAULT_EXT","DEFAULT_PID","INSTRUMENTS","XCRUN","XCTRACE","requireXctrace","xcrunPath","fs","which","e","Error","exec","stderr","message","requireInstruments","PerfRecorder","constructor","reportRoot","udid","opts","_process","_zippedReportPath","_timeout","timeout","_profileName","profileName","_reportPath","path","resolve","replace","Date","now","_pid","pid","_udid","_logger","logger","getLogger","_","truncate","length","substring","_archivePromise","getOriginalReportPath","exists","getZippedReportPath","originalReportPath","zippedReportPath","tempDir","prefix","parse","name","suffix","zip","toArchive","cwd","dirname","rimraf","isRunning","_enforceTermination","debug","stop","ign","performCleanup","B","all","filter","Boolean","map","x","warn","finally","catch","start","binaryPath","args","toolName","basename","push","fullCmd","SubProcess","slice","util","quote","on","stdout","trim","once","code","signal","waitForCondition","waitMs","intervalMs","listProfilesCommand","errorAndThrow","info","force","mobileStartPerfRecord","isFeatureEnabled","isRealDevice","log","isEmpty","_perfRecorders","recorder","device","pull","realPid","toLower","appInfo","proxyCommand","openDir","parseInt","mobileStopPerfRecord","remotePath","recorders","first","resultPath","result","encodeBase64OrUpload"],"sources":["../../../lib/commands/performance.js"],"sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport { fs, zip, logger, util, tempDir } from 'appium/support';\nimport { SubProcess, exec } from 'teen_process';\nimport { encodeBase64OrUpload } from '../utils';\nimport { waitForCondition } from 'asyncbox';\nimport B from 'bluebird';\n\nconst commands = {};\n\nconst PERF_RECORD_FEAT_NAME = 'perf_record';\nconst PERF_RECORD_SECURITY_MESSAGE = 'Performance measurement requires relaxing security for simulator. ' +\n  `Please set '--relaxed-security' or '--allow-insecure' with '${PERF_RECORD_FEAT_NAME}' ` +\n  'referencing https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.';\nconst DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;\nconst STOP_TIMEOUT_MS = 3 * 60 * 1000;\nconst STARTUP_TIMEOUT_MS = 60 * 1000;\nconst DEFAULT_PROFILE_NAME = 'Activity Monitor';\nconst DEFAULT_EXT = '.trace';\nconst DEFAULT_PID = 'current';\nconst INSTRUMENTS = 'instruments';\nconst XCRUN = 'xcrun';\nconst XCTRACE = 'xctrace';\n\n\nasync function requireXctrace () {\n  let xcrunPath;\n  try {\n    xcrunPath = await fs.which(XCRUN);\n  } catch (e) {\n    throw new Error(`${XCRUN} has not been found in PATH. ` +\n      `Please make sure XCode development tools are installed`);\n  }\n  try {\n    await exec(xcrunPath, [XCTRACE, 'help']);\n  } catch (e) {\n    throw new Error(`${XCTRACE} is not available for the active Xcode version. ` +\n      `Please make sure XCode is up to date. Original error: ${e.stderr || e.message}`);\n  }\n  return xcrunPath;\n}\n\nasync function requireInstruments () {\n  try {\n    return await fs.which(INSTRUMENTS);\n  } catch (e) {\n    throw new Error(`${INSTRUMENTS} has not been found in PATH. ` +\n      `Please make sure XCode development tools are installed`);\n  }\n}\n\n\nclass PerfRecorder {\n  constructor (reportRoot, udid, opts = {}) {\n    this._process = null;\n    this._zippedReportPath = '';\n    this._timeout = (opts.timeout && opts.timeout > 0) ? opts.timeout : DEFAULT_TIMEOUT_MS;\n    this._profileName = opts.profileName || DEFAULT_PROFILE_NAME;\n    this._reportPath = path.resolve(reportRoot,\n      `appium_perf__${this._profileName.replace(/\\W/g, '_')}__${Date.now()}${DEFAULT_EXT}`);\n    this._pid = opts.pid;\n    this._udid = udid;\n    this._logger = logger.getLogger(\n      `${_.truncate(this._profileName, {length: 10})}@${this._udid.substring(0, 8)}`);\n    this._archivePromise = null;\n  }\n\n  get profileName () {\n    return this._profileName;\n  }\n\n  async getOriginalReportPath () {\n    return (await fs.exists(this._reportPath)) ? this._reportPath : '';\n  }\n\n  async getZippedReportPath () {\n    // This is to prevent possible race conditions, because the archive operation\n    // could be pretty time-intensive\n    if (!this._archivePromise) {\n      this._archivePromise = (async () => {\n        const originalReportPath = await this.getOriginalReportPath();\n        if (!originalReportPath) {\n          return '';\n        }\n        const zippedReportPath = await tempDir.path({\n          prefix: path.parse(originalReportPath).name,\n          suffix: '.zip'\n        });\n        await zip.toArchive(zippedReportPath, {\n          cwd: path.dirname(this._reportPath),\n        });\n        await fs.rimraf(path.dirname(this._reportPath));\n        this._zippedReportPath = zippedReportPath;\n        return this._zippedReportPath;\n      })();\n    }\n    return await this._archivePromise;\n  }\n\n  isRunning () {\n    return !!(this._process?.isRunning);\n  }\n\n  async _enforceTermination () {\n    if (this._process && this.isRunning()) {\n      this._logger.debug('Force-stopping the currently running perf recording');\n      try {\n        await this._process.stop('SIGKILL');\n      } catch (ign) {}\n    }\n    this._process = null;\n    const performCleanup = async () => {\n      try {\n        await B.all([this._zippedReportPath, path.dirname(this._reportPath)]\n          .filter(Boolean).map((x) => fs.rimraf(x)));\n      } catch (e) {\n        this._logger.warn(e.message);\n      }\n    };\n    if (this._archivePromise) {\n      this._archivePromise\n        // eslint-disable-next-line promise/prefer-await-to-then\n        .finally(async () => {\n          await performCleanup();\n          this._archivePromise = null;\n        })\n        // eslint-disable-next-line promise/prefer-await-to-then\n        .catch(() => {});\n    }\n    await performCleanup();\n    return '';\n  }\n\n  async start () {\n    let binaryPath;\n    try {\n      binaryPath = await requireXctrace();\n    } catch (e) {\n      this._logger.debug(e.message);\n      this._logger.warn(`Defaulting to ${INSTRUMENTS} usage`);\n      binaryPath = await requireInstruments();\n    }\n\n    const args = [];\n    const toolName = path.basename(binaryPath) === XCRUN ? XCTRACE : INSTRUMENTS;\n    if (toolName === XCTRACE) {\n      args.push(\n        XCTRACE, 'record',\n        '--device', this._udid,\n        '--template', this._profileName,\n        '--output', this._reportPath,\n        '--time-limit', `${this._timeout}ms`,\n      );\n      if (this._pid) {\n        args.push('--attach', `${this._pid}`);\n      } else {\n        args.push('--all-processes');\n      }\n    } else {\n      // https://help.apple.com/instruments/mac/current/#/devb14ffaa5\n      args.push(\n        '-w', this._udid,\n        '-t', this._profileName,\n        '-D', this._reportPath,\n        '-l', `${this._timeout}`,\n      );\n      if (this._pid) {\n        args.push('-p', `${this._pid}`);\n      }\n    }\n    const fullCmd = [binaryPath, ...args];\n    this._process = new SubProcess(fullCmd[0], fullCmd.slice(1));\n    this._archivePromise = null;\n    this._logger.debug(`Starting performance recording: ${util.quote(fullCmd)}`);\n    this._process.on('output', (stdout, stderr) => {\n      if (_.trim(stdout || stderr)) {\n        this._logger.debug(`[${toolName}] ${stdout || stderr}`);\n      }\n    });\n    this._process.once('exit', async (code, signal) => {\n      this._process = null;\n      if (code === 0) {\n        this._logger.debug('Performance recording exited without errors');\n        try {\n          // cache zipped report\n          await this.getZippedReportPath();\n        } catch (e) {\n          this._logger.warn(e);\n        }\n      } else {\n        await this._enforceTermination();\n        this._logger.warn(`Performance recording exited with error code ${code}, signal ${signal}`);\n      }\n    });\n    await this._process.start(0);\n    try {\n      await waitForCondition(async () => {\n        if (await this.getOriginalReportPath()) {\n          return true;\n        }\n        if (!this._process) {\n          throw new Error(`${toolName} process died unexpectedly`);\n        }\n        return false;\n      }, {\n        waitMs: STARTUP_TIMEOUT_MS,\n        intervalMs: 500,\n      });\n    } catch (e) {\n      await this._enforceTermination();\n      const listProfilesCommand = toolName === XCTRACE\n        ? `${XCRUN} ${XCTRACE} list templates`\n        : `${INSTRUMENTS} -s`;\n      this._logger.errorAndThrow(`There is no ${DEFAULT_EXT} file found for performance profile ` +\n        `'${this._profileName}'. Make sure the profile is supported on this device. ` +\n        `You could use '${listProfilesCommand}' command to see the list of all available profiles. ` +\n        `Check the server log for more details`);\n    }\n    this._logger.info(`The performance recording has started. Will timeout in ${this._timeout}ms`);\n  }\n\n  async stop (force = false) {\n    if (force) {\n      return await this._enforceTermination();\n    }\n\n    if (!this.isRunning()) {\n      this._logger.debug('Performance recording is not running. Returning the recent result');\n      return await this.getZippedReportPath();\n    }\n\n    try {\n      await this._process.stop('SIGINT', STOP_TIMEOUT_MS);\n    } catch (e) {\n      this._logger.errorAndThrow(`Performance recording has failed to exit after ${STOP_TIMEOUT_MS}ms`);\n    }\n    return await this.getZippedReportPath();\n  }\n}\n\n\n/**\n * @typedef {Object} StartPerfRecordOptions\n *\n * @property {?number|string} timeout [300000] - The maximum count of milliseconds to record the profiling information.\n * @property {?string} profileName [Activity Monitor] - The name of existing performance profile to apply.\n *                                                      Can also contain the full path to the chosen template on the server file system.\n *                                                      Note, that not all profiles are supported on mobile devices.\n * @property {?string|number} pid - The ID of the process to measure the performance for.\n *                                  Set it to `current` in order to measure the performance of\n *                                  the process, which belongs to the currently active application.\n *                                  All processes running on the device are measured if\n *                                  pid is unset (the default setting).\n */\n\n/**\n * Starts performance profiling for the device under test.\n * Relaxing security is mandatory for simulators. It can always work for real devices.\n *\n * Since XCode 14 the method tries to use `xctrace` tool to record performance stats.\n * The `instruments` developer utility is used as a fallback for this purpose if `xctrace`\n * is not available.\n * It is possible to record multiple profiles at the same time.\n * Read https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Recording,Pausing,andStoppingTraces.html\n * for more details.\n *\n * @param {?StartPerfRecordOptions} opts - The set of possible start record options\n */\ncommands.mobileStartPerfRecord = async function mobileStartPerfRecord (opts = {}) {\n  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {\n    this.log.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);\n  }\n\n  const {\n    timeout = DEFAULT_TIMEOUT_MS,\n    profileName = DEFAULT_PROFILE_NAME,\n    pid,\n  } = opts;\n\n  if (!_.isEmpty(this._perfRecorders)) {\n    for (const recorder of this._perfRecorders.filter((x) => x.profileName === profileName)) {\n      if (recorder.isRunning()) {\n        this.log.debug(`Performance recorder for '${profileName}' on device '${this.opts.device.udid}' ` +\n          ` is already running. Doing nothing`);\n        return;\n      }\n      _.pull(this._perfRecorders, recorder);\n      await recorder.stop(true);\n    }\n  }\n\n  let realPid;\n  if (pid) {\n    if (_.toLower(pid) === DEFAULT_PID) {\n      const appInfo = await this.proxyCommand('/wda/activeAppInfo', 'GET');\n      realPid = appInfo.pid;\n    } else {\n      realPid = pid;\n    }\n  }\n  const recorder = new PerfRecorder(await tempDir.openDir(), this.opts.device.udid, {\n    timeout: parseInt(timeout, 10),\n    profileName,\n    pid: parseInt(realPid, 10),\n  });\n  await recorder.start();\n  this._perfRecorders = [...(this._perfRecorders || []), recorder];\n};\n\n/**\n * @typedef {Object} StopRecordingOptions\n *\n * @property {?string} remotePath - The path to the remote location, where the resulting zipped .trace file should be uploaded.\n *                                  The following protocols are supported: http/https, ftp.\n *                                  Null or empty string value (the default setting) means the content of resulting\n *                                  file should be zipped, encoded as Base64 and passed as the endpoint response value.\n *                                  An exception will be thrown if the generated file is too big to\n *                                  fit into the available process memory.\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method [PUT] - The http multipart upload method name. Only works if `remotePath` is provided.\n * @property {?string} profileName [Activity Monitor] - The name of an existing performance profile for which the recording has been made.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n */\n\n/**\n * Stops performance profiling for the device under test.\n * The resulting file in .trace format can be either returned\n * directly as base64-encoded zip archive or uploaded to a remote location\n * (such files can be pretty large). Afterwards it is possible to unarchive and\n * open such file with Xcode Dev Tools.\n *\n * @param {?StopRecordingOptions} opts - The set of possible stop record options\n * @return {string} Either an empty string if the upload was successful or base-64 encoded\n * content of zipped .trace file.\n * @throws {Error} If no performance recording with given profile name/device udid combination\n * has been started before or the resulting .trace file has not been generated properly.\n */\ncommands.mobileStopPerfRecord = async function mobileStopPerfRecord (opts = {}) {\n  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {\n    this.log.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);\n  }\n\n  if (_.isEmpty(this._perfRecorders)) {\n    this.log.info('No performance recorders have been started. Doing nothing');\n    return '';\n  }\n\n  const {\n    profileName = DEFAULT_PROFILE_NAME,\n    remotePath,\n  } = opts;\n\n  const recorders = this._perfRecorders.filter((x) => x.profileName === profileName);\n  if (_.isEmpty(recorders)) {\n    this.log.errorAndThrow(`There are no records for performance profile '${profileName}' ` +\n      `and device ${this.opts.device.udid}. Have you started the profiling before?`);\n  }\n\n  const recorder = _.first(recorders);\n  const resultPath = await recorder.stop();\n  if (!await fs.exists(resultPath)) {\n    this.log.errorAndThrow(`There is no ${DEFAULT_EXT} file found for performance profile '${profileName}' ` +\n      `and device ${this.opts.device.udid}. Make sure the selected profile is supported on this device`);\n  }\n\n  const result = await encodeBase64OrUpload(resultPath, remotePath, opts);\n  _.pull(this._perfRecorders, recorder);\n  await fs.rimraf(resultPath);\n  return result;\n};\n\n\nexport { commands };\nexport default commands;\n"],"mappings":"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"}