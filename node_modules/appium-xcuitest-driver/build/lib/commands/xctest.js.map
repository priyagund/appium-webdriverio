{"version":3,"file":"xctest.js","names":["commands","XCTEST_TIMEOUT","xctestLog","logger","getLogger","assertIDB","opts","device","idb","launchWithIDB","Error","parseXCTestStdout","stdout","parseKey","name","words","split","out","word","substr","toUpperCase","toLowerCase","parseValue","value","isNaN","_","isString","indexOf","parseFloat","parseInt","lines","trim","length","includes","results","line","properties","output","entryIndex","prop","testName","key","push","mobileRunXCTest","runXCTest","testRunnerBundleId","appUnderTestBundleId","xctestBundleId","testType","env","args","timeout","subproc","runXCUITest","B","resolve","reject","mostRecentLogObject","xctestTimeout","setTimeout","on","stderr","err","log","warn","debug","stack","info","error","code","signal","clearTimeout","result","passed","mobileInstallXCTestBundle","installXCTestBundle","xctestApp","errors","InvalidArgumentError","res","helpers","configureApp","mobileListXCTestBundles","listXCTestsInTestBundle","listXCTestBundles","mobileListXCTestsInTestBundle","bundle","Object","assign"],"sources":["../../../lib/commands/xctest.js"],"sourcesContent":["import B from 'bluebird';\nimport { logger } from 'appium/support';\nimport _ from 'lodash';\nimport { errors } from 'appium/driver';\n\n\nconst commands = {};\n\nconst XCTEST_TIMEOUT = 60 * 60 * 1000; // 60 minute timeout\n\nconst xctestLog = logger.getLogger('XCTest');\n\n/**\n * Asserts that IDB is present and that launchWithIDB was used\n *\n * @param {object} opts Opts object from the driver instance\n */\nexport function assertIDB (opts) {\n  if (!opts.device?.idb || !opts.launchWithIDB) {\n    throw new Error(`To use XCTest runner, IDB (https://github.com/facebook/idb) must be installed ` +\n      `and sessions must be run with the \"launchWithIDB\" capability`);\n  }\n  return opts.device.idb;\n}\n\n\n/**\n * @typedef {Object} XCTestResult\n *\n * @property {string} testName Name of the test (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')\n * @property {boolean} passed Did the tests pass?\n * @property {boolean} crashed Did the tests crash?\n * @property {number} duration How long did the tests take (in seconds)\n * @property {string} failureMessage Failure message (if applicable)\n * @property {number} location The geolocation of the tests (if applicable)\n */\n\n/**\n * Parse the stdout of XC test log\n * @param {string} stdout A line of standard out from `idb xctest run ...`\n * @returns {Array<XCTestResult>} results The final output of the XCTest run\n */\nexport function parseXCTestStdout (stdout) {\n  // Parses a 'key' into JSON format\n  function parseKey (name) {\n    const words = name.split(' ');\n    let out = '';\n    for (const word of words) {\n      out += word.substr(0, 1).toUpperCase() + word.substr(1);\n    }\n    return out.substr(0, 1).toLowerCase() + out.substr(1);\n  }\n\n  // Parses a 'value' into JSON format\n  function parseValue (value) {\n    value = value || '';\n    switch (value.toLowerCase()) {\n      case 'true': return true;\n      case 'false': return false;\n      case '': return null;\n      default: break;\n    }\n    if (!isNaN(value)) {\n      if (!_.isString(value)) {\n        return 0;\n      } else if (value.indexOf('.') > 0) {\n        return parseFloat(value);\n      }\n      return parseInt(value, 10);\n    }\n  }\n  if (!stdout) {\n    return [];\n  }\n\n  // Parse each line into an array\n  const lines = stdout.trim().split('\\n');\n\n  // One single string, just return the string\n  if (lines.length === 1 && !lines[0].includes('|')) {\n    return [lines[0]];\n  }\n\n  const results = [];\n  for (const line of lines) {\n    // The properties are split up by pipes and each property\n    // has the format \"Some Key : Some Value\"\n    const properties = line.split('|');\n\n    // Parse each property\n    const output = {};\n    let entryIndex = 0;\n    for (const prop of properties) {\n      if (entryIndex === 0) {\n        // The first property only contains one string that contains\n        // the test name (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')\n        output.testName = prop.trim();\n      } else {\n\n        let [key, value] = prop.split(':');\n        output[parseKey(key.trim())] = parseValue(value ? value.trim() : '');\n      }\n      entryIndex++;\n    }\n    // Add this line to the results\n    results.push(output);\n  }\n  return results;\n}\n\n/**\n * @typedef {Object} RunXCUITestResponse\n *\n * @property {Array<XCTestResult>} results The results of all the tests with information\n * @property {number} code The exit code of the process\n * @property {string} signal The signal that terminated the process (or null) (e.g.: SIGTERM)\n *\n */\n\n/**\n * @typedef {Object} RunXCUITestOptions\n *\n * @property {!string} testRunnerBundleId Test app bundle (e.g.: 'io.appium.XCTesterAppUITests.xctrunner')\n * @property {!string} appUnderTestBundleId App-under-test bundle\n * @property {!string} xcTestBundleID xctest bundle id\n * @property {string} testType [ui] XC test type. 'app', 'ui', or 'logic'\n * @property {object} env Environment variables passed to test\n * @property {Array<String>} args Launch arguments to start the test with (see https://developer.apple.com/documentation/xctest/xcuiapplication/1500477-launcharguments for reference)\n * @property {number} timeout [360000] Timeout if session doesn't complete after given time (in milliseconds)\n */\n\n\n/**\n * @typedef {Error} XCUITestError\n *\n * @property {number} code Subprocess exit code\n * @property {string} signal The signal (SIG*) that caused the process to fail\n * @property {!Array<XCTestResult>} results The output of the failed test (if there is output)\n */\n\n/**\n * Run an XCTest. Launches a subprocess that runs the XC Test and blocks\n * until it is complete. Parses the stdout of the process and returns\n * result as an array\n *\n * See https://fbidb.io/docs/test_execution for reference\n *\n * @param {RunXCUITestOptions} runXCUITestOptions\n * @throws {XCUITestError} Error thrown if subprocess returns non-zero exit code\n * @returns {RunXCUITestResponse}\n */\ncommands.mobileRunXCTest = async function runXCTest ({\n  testRunnerBundleId,\n  appUnderTestBundleId,\n  xctestBundleId,\n  testType = 'ui',\n  env,\n  args,\n  timeout = XCTEST_TIMEOUT,\n}) {\n  const subproc = await assertIDB(this.opts).runXCUITest(\n        testRunnerBundleId, appUnderTestBundleId, xctestBundleId, {env, args, testType},\n  );\n  return await new B((resolve, reject) => {\n    let mostRecentLogObject = null;\n    let xctestTimeout;\n    if (timeout > 0) {\n      xctestTimeout = setTimeout(\n        () => reject(`Timed out after '${timeout}ms' waiting for XCTest to complete`),\n        timeout\n      );\n    }\n\n    subproc.on('output', (stdout, stderr) => {\n      if (stdout) {\n        try {\n          mostRecentLogObject = parseXCTestStdout(stdout);\n        } catch (err) {\n          // Fails if log parsing fails.\n          // This is in case IDB changes the way that logs are formatted and\n          // it breaks 'parseXCTestStdout'. If that happens we still want the process\n          // to finish\n          this.log.warn(`Failed to parse logs from test output: '${stdout}'`);\n          this.log.debug(err.stack);\n        }\n      }\n      stdout && xctestLog.info(stdout);\n      stderr && xctestLog.error(stderr);\n    });\n\n    subproc.on('exit', (code, signal) => {\n      clearTimeout(xctestTimeout);\n      if (code !== 0) {\n        const err = new Error(mostRecentLogObject);\n        err.code = code;\n        if (signal != null) {\n          err.signal = signal;\n        }\n        if (mostRecentLogObject) {\n          err.result = mostRecentLogObject;\n        }\n        return reject(err);\n      }\n      resolve({\n        code, signal, results: mostRecentLogObject, passed: true,\n      });\n    });\n  });\n};\n\n/**\n * @typedef {Object} InstallXCTestBundleOpts\n *\n * @property {xctestApp} xctestBundle Path of the XCTest app (URL or .app)\n */\n\n/**\n * Install an XCTestBundle\n *\n * @param {InstallXCTestBundleOpts!} opts Install xctest bundle opts\n */\ncommands.mobileInstallXCTestBundle = async function installXCTestBundle (opts) {\n  const { xctestApp } = opts;\n  if (!_.isString(xctestApp)) {\n    throw new errors.InvalidArgumentError(`'xctestApp' is a required parameter for 'installXCTestBundle' and ` +\n      `must be a string. Found '${xctestApp}'`);\n  }\n  xctestLog.info(`Installing bundle '${xctestApp}'`);\n  const idb = assertIDB(this.opts);\n  const res = await this.helpers.configureApp(xctestApp, '.xctest');\n  await idb.installXCTestBundle(res);\n};\n\n/**\n * List XCTest bundles that are installed on device\n *\n * @returns {Array<string>} List of XCTest bundles (e.g.: \"XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance\")\n */\ncommands.mobileListXCTestBundles = async function listXCTestsInTestBundle () {\n  return await assertIDB(this.opts).listXCTestBundles();\n};\n\n/**\n * @typedef {Object} ListXCTestsOpts\n *\n * @property {!string} bundle Bundle ID of the XCTest\n */\n\n/**\n * List XCTests in a test bundle\n *\n * @param {!ListXCTestsOpts} opts XCTest list options\n *\n * @returns {Array<string>} The list of xctests in the test bundle\n *    (e.g.: [ 'XCTesterAppUITests.XCTesterAppUITests/testExample',\n                'XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance' ] )\n */\ncommands.mobileListXCTestsInTestBundle = async function listXCTestsInTestBundle (opts) {\n  const { bundle } = opts;\n  if (!_.isString(bundle)) {\n    throw new errors.InvalidArgumentError(`'bundle' is a required parameter for 'listXCTestsInTestBundle' and ` +\n      `must be a string. Found '${bundle}'`);\n  }\n  const idb = assertIDB(this.opts);\n  return await idb.listXCTestsInTestBundle(bundle);\n};\n\nObject.assign(commands);\nexport { commands };\nexport default commands;\n"],"mappings":"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"}