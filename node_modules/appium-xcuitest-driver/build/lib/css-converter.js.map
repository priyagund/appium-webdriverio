{"version":3,"file":"css-converter.js","names":["CssConverter","parser","CssSelectorParser","registerSelectorPseudos","registerNestingOperators","registerAttrEqualityMods","enableSubstitutes","BOOLEAN_ATTRS","NUMERIC_ATTRS","STR_ATTRS","ALL_ATTRS","ATTRIBUTE_ALIASES","toCamelCase","str","tokens","split","map","charAt","toUpperCase","slice","toLowerCase","out","join","requireBoolean","css","val","value","TypeError","name","requireAttributeName","attrName","includes","officialAttr","aliasAttrs","Error","parseAttr","cssAttr","valueType","index","operator","_","escapeRegExp","parsePseudo","cssPseudo","pseudoName","parseCssRule","cssRule","nestingOperator","iosClassChainSelector","classNames","errors","InvalidSelectorError","tagName","startsWith","capitalizedTagName","attrs","id","push","attr","pseudos","pseudo","nonIndexAttrs","filter","isString","length","indexAttr","find","isObject","rule","parseCssObject","type","selectors","selector","toIosClassChainSelector","cssSelector","cssObj","parse","e","message"],"sources":["../../lib/css-converter.js"],"sourcesContent":["import { CssSelectorParser } from 'css-selector-parser';\nimport _ from 'lodash';\nimport { errors } from 'appium/driver';\n\nconst CssConverter = {};\n\nconst parser = new CssSelectorParser();\nparser.registerSelectorPseudos('has');\nparser.registerNestingOperators('>', '+', '~');\nparser.registerAttrEqualityMods('^', '$', '*', '~');\nparser.enableSubstitutes();\n\nconst BOOLEAN_ATTRS = [\n  'visible', 'accessible', 'accessibility-container', 'enabled',\n];\n\nconst NUMERIC_ATTRS = [\n  'index'\n];\n\nconst STR_ATTRS = [\n  'label', 'name', 'value', 'type',\n];\n\nconst ALL_ATTRS = [\n  ...BOOLEAN_ATTRS,\n  ...NUMERIC_ATTRS,\n  ...STR_ATTRS,\n];\n\nconst ATTRIBUTE_ALIASES = [\n  ['name', ['id']],\n  ['index', ['nth-child']],\n];\n\n/**\n * Convert hyphen separated word to camel case\n *\n * @param {string} str\n * @returns {string} The hyphen separated word translated to camel case\n */\nfunction toCamelCase (str) {\n  if (!str) {\n    return '';\n  }\n  const tokens = str.split('-').map((str) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase());\n  const out = tokens.join('');\n  return out.charAt(0).toLowerCase() + out.slice(1);\n}\n\n/**\n * @typedef {Object} CssNameValueObject\n * @property {?name} name The name of the CSS object\n * @property {?string} value The value of the CSS object\n */\n\n/**\n * Get the boolean from a CSS object. If empty, return true. If not true/false/empty, throw exception\n *\n * @param {CssNameValueObject} css A CSS object that has 'name' and 'value'\n * @returns {string} Either 'true' or 'false'. If value is empty, return 'true'\n */\nfunction requireBoolean (css) {\n  const val = css.value?.toLowerCase() || 'true'; // an omitted boolean attribute means 'true' (e.g.: input[checked] means checked is true)\n  switch (val) {\n    case '0':\n    case 'false':\n      return '0';\n    case '1':\n    case 'true':\n      return '1';\n    default:\n      throw new TypeError(`'${css.name}' must be true, false or empty. Found '${css.value}'`);\n  }\n}\n\n/**\n * Get the canonical form of a CSS attribute name\n *\n * Converts to lowercase and if an attribute name is an alias for something else, return\n * what it is an alias for\n *\n * @param {Object} css CSS object\n * @returns {string} The canonical attribute name\n */\nfunction requireAttributeName (css) {\n  const attrName = css.name.toLowerCase();\n\n  // Check if it's supported and if it is, return it\n  if (ALL_ATTRS.includes(attrName)) {\n    return attrName.toLowerCase();\n  }\n\n  // If attrName is an alias for something else, return that\n  for (const [officialAttr, aliasAttrs] of ATTRIBUTE_ALIASES) {\n    if (aliasAttrs.includes(attrName)) {\n      return officialAttr;\n    }\n  }\n  throw new Error(`'${attrName}' is not a valid attribute. ` +\n    `Supported attributes are '${ALL_ATTRS.join(', ')}'`);\n}\n\n/**\n * @typedef {Object} CssAttr\n * @property {?string} valueType Type of attribute (must be string or empty)\n * @property {?string} value Value of the attribute\n * @property {?string} operator The operator between value and value type (=, *=, , ^=, $=)\n */\n\n/**\n * Convert a CSS attribute into a UiSelector method call\n *\n * @param {CssAttr} cssAttr CSS attribute object\n * @returns {string} CSS attribute parsed as UiSelector\n */\nfunction parseAttr (cssAttr) {\n  if (cssAttr.valueType && cssAttr.valueType !== 'string') {\n    throw new TypeError(`'${cssAttr.name}=${cssAttr.value}' is an invalid attribute. ` +\n      `Only 'string' and empty attribute types are supported. Found '${cssAttr.valueType}'`);\n  }\n  const attrName = toCamelCase(requireAttributeName(cssAttr));\n\n  // Validate that it's a supported attribute\n  if (!STR_ATTRS.includes(attrName) && !BOOLEAN_ATTRS.includes(attrName)) {\n    throw new Error(`'${attrName}' is not supported. Supported attributes are ` +\n      `'${[...STR_ATTRS, ...BOOLEAN_ATTRS].join(', ')}'`);\n  }\n\n  // Parse index if it's an index attribute\n  if (attrName === 'index') {\n    return {index: cssAttr.value};\n  }\n  if (BOOLEAN_ATTRS.includes(attrName)) {\n    return `${attrName} == ${requireBoolean(cssAttr)}`;\n  }\n\n  let value = cssAttr.value || '';\n  if (value === '') {\n    return `[${attrName} LIKE ${value}]`;\n  }\n\n  switch (cssAttr.operator) {\n    case '=':\n      return `${attrName} == \"${value}\"`;\n    case '*=':\n      return `${attrName} MATCHES \"${_.escapeRegExp(value)}\"`;\n    case '^=':\n      return `${attrName} BEGINSWITH \"${value}\"`;\n    case '$=':\n      return `${attrName} ENDSWITH \"${value}\"`;\n    case '~=':\n      return `${attrName} CONTAINS \"${value}\"`;\n    default:\n      // Unreachable, but adding error in case a new CSS attribute is added.\n      throw new Error(`Unsupported CSS attribute operator '${cssAttr.operator}'. ` +\n        ` '=', '*=', '^=', '$=' and '~=' are supported.`);\n  }\n}\n\n/**\n * @typedef {Object} CssPseudo\n * @property {?string} valueType The type of CSS pseudo selector (https://www.npmjs.com/package/css-selector-parser for reference)\n * @property {?string} name The name of the pseudo selector\n * @property {?string} value The value of the pseudo selector\n */\n\n/**\n * Convert a CSS pseudo class to a UiSelector\n *\n * @param {CssPseudo} cssPseudo CSS Pseudo class\n * @returns {string} Pseudo selector parsed as UiSelector\n */\nfunction parsePseudo (cssPseudo) {\n  if (cssPseudo.valueType && cssPseudo.valueType !== 'string') {\n    throw new Error(`'${cssPseudo.name}=${cssPseudo.value}'. ` +\n      `Unsupported css pseudo class value type: '${cssPseudo.valueType}'. Only 'string' type or empty is supported.`);\n  }\n\n  const pseudoName = requireAttributeName(cssPseudo);\n\n  if (BOOLEAN_ATTRS.includes(pseudoName)) {\n    return `${toCamelCase(pseudoName)} == ${requireBoolean(cssPseudo)}`;\n  }\n\n  if (pseudoName === 'index') {\n    return {index: cssPseudo.value};\n  }\n}\n\n/**\n * @typedef {Object} CssRule\n * @property {?string} nestingOperator The nesting operator (aka: combinator https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)\n * @property {?string} tagName The tag name (aka: type selector https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors)\n * @property {?string[]} classNames An array of CSS class names\n * @property {?CssAttr[]} attrs An array of CSS attributes\n * @property {?CssPseudo[]} attrs An array of CSS pseudos\n * @property {?string} id CSS identifier\n * @property {?CssRule} rule A descendant of this CSS rule\n */\n\n/**\n * Convert a CSS rule to a UiSelector\n * @param {CssRule} cssRule CSS rule definition\n */\nfunction parseCssRule (cssRule) {\n  const { nestingOperator } = cssRule;\n  if (nestingOperator && nestingOperator !== ' ' && nestingOperator !== '>') {\n    throw new Error(`'${nestingOperator}' is not a supported combinator. ` +\n      `Only child combinator (>) and descendant combinator are supported.`);\n  }\n\n  let iosClassChainSelector = '';\n  if (cssRule.classNames) {\n    throw new errors.InvalidSelectorError(`'${[cssRule || '', ...cssRule.classNames].join('.')}'\n      is not a valid ios class. Must be a single string (e.g.: XCUIElementTypeWindow) without\n      dots separating them`);\n  }\n  if (cssRule.tagName && cssRule.tagName !== '*' && !cssRule.tagName.toLowerCase().startsWith('xcuielementtype')) {\n    const capitalizedTagName = cssRule.tagName.charAt(0).toUpperCase() + cssRule.tagName.slice(1);\n    cssRule.tagName = `XCUIElementType${capitalizedTagName}`;\n  }\n  iosClassChainSelector += (cssRule.tagName || '*');\n\n  let attrs = [];\n  if (cssRule.id) {\n    attrs.push(`name == \"${cssRule.id}\"`);\n  }\n  if (cssRule.attrs) {\n    for (const attr of cssRule.attrs) {\n      attrs.push(parseAttr(attr));\n    }\n  }\n  if (cssRule.pseudos) {\n    for (const pseudo of cssRule.pseudos) {\n      attrs.push(parsePseudo(pseudo));\n    }\n  }\n  const nonIndexAttrs = attrs.filter((attr) => _.isString(attr));\n  if (nonIndexAttrs && nonIndexAttrs.length > 0) {\n    iosClassChainSelector += `[\\`${nonIndexAttrs.join(' AND ')}\\`]`;\n  }\n\n  const indexAttr = attrs.find((attr) => _.isObject(attr) && attr.index);\n  if (indexAttr) {\n    iosClassChainSelector += `[${indexAttr.index}]`;\n  }\n\n  if (cssRule.rule) {\n    iosClassChainSelector += `/${parseCssRule(cssRule.rule)}`;\n  }\n\n  if (cssRule.nestingOperator === '>') {\n    return iosClassChainSelector;\n  } else {\n    return `**/` + iosClassChainSelector;\n  }\n}\n\n/**\n * @typedef {Object} CssObject\n * @property {?string} type Type of CSS object. 'rule', 'ruleset' or 'selectors'\n */\n\n/**\n * Convert CSS object to iOS Class Chain selector\n * @param {CssObject} css CSS object\n * @returns {string} The CSS object parsed as a UiSelector\n */\nfunction parseCssObject (css) {\n  switch (css.type) {\n    case 'rule':\n      return parseCssRule(css);\n    case 'ruleSet':\n      return parseCssObject(css.rule);\n    case 'selectors':\n      return css.selectors.map((selector) => parseCssObject(selector)).join('; ');\n\n    default:\n      // This is never reachable, but if it ever is do this.\n      throw new Error(`iOS Class Chain does not support '${css.type}' css. Only supports 'rule', 'ruleSet', 'selectors'`);\n  }\n}\n\n/**\n * Convert a CSS selector to a iOS Class Chain selector\n * @param {string} cssSelector CSS Selector\n * @returns {string} The CSS selector converted to an iOS Class Chain\n */\nCssConverter.toIosClassChainSelector = function toIosClassChainSelector (cssSelector) {\n  let cssObj;\n  try {\n    cssObj = parser.parse(cssSelector);\n  } catch (e) {\n    throw new errors.InvalidSelectorError(`Invalid CSS selector '${cssSelector}'. Reason: '${e.message}'`);\n  }\n  try {\n    return parseCssObject(cssObj);\n  } catch (e) {\n    throw new errors.InvalidSelectorError(`Unsupported CSS selector '${cssSelector}'. Reason: '${e.message}'`);\n  }\n};\n\nexport default CssConverter;"],"mappings":"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"}