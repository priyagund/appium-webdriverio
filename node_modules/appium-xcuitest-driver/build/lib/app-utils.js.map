{"version":3,"file":"app-utils.js","names":["STRINGSDICT_RESOURCE","STRINGS_RESOURCE","SAFARI_BUNDLE_ID","APP_EXT","IPA_EXT","extractPlistEntry","app","entryName","plistPath","path","resolve","plist","parsePlistFile","err","Error","basename","message","extractBundleId","bundleId","log","debug","fetchSupportedAppPlatforms","result","_","isArray","warn","verifyApplicationPlatform","expectedPlatform","supportedPlatforms","JSON","stringify","isSimulator","isTvOS","prefix","suffix","dstPlatform","includes","readResource","resourcePath","data","key","value","toPairs","isString","parseLocalizableStrings","opts","language","localizableStringsDir","stringFile","strictMode","info","lprojRoot","subfolder","fs","exists","resourcePaths","dstPath","push","isEmpty","resourceFiles","readdir","filter","name","some","x","endsWith","map","length","resultStrings","toAbsolutePath","p","isAbsolute","process","cwd","util","isSubPath","keys","merge","e","isAppBundle","appPath","toLower","stat","isDirectory","join","findApps","archivePath","appExtensions","useSystemUnzipEnv","env","APPIUM_PREFER_SYSTEM_UNZIP","useSystemUnzip","tmpRoot","tempDir","openDir","zip","extractAllTo","globPattern","ext","replace","sortedBundleItems","glob","strict","sort","a","b","split","sep","isolateAppBundle","appRoot","dstRoot","mv","mkdirp"],"sources":["../../lib/app-utils.js"],"sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport { plist, fs, util, tempDir, zip } from 'appium/support';\nimport log from './logger.js';\n\nconst STRINGSDICT_RESOURCE = '.stringsdict';\nconst STRINGS_RESOURCE = '.strings';\nconst SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';\nconst APP_EXT = '.app';\nconst IPA_EXT = '.ipa';\n\nasync function extractPlistEntry (app, entryName) {\n  const plistPath = path.resolve(app, 'Info.plist');\n  try {\n    return (await plist.parsePlistFile(plistPath))[entryName];\n  } catch (err) {\n    throw new Error(`Could not extract Info.plist from '${path.basename(app)}': ${err.message}`);\n  }\n}\n\nasync function extractBundleId (app) {\n  const bundleId = await extractPlistEntry(app, 'CFBundleIdentifier');\n  log.debug(`Getting bundle ID from app '${app}': '${bundleId}'`);\n  return bundleId;\n}\n\nasync function fetchSupportedAppPlatforms (app) {\n  try {\n    const result = await extractPlistEntry(app, 'CFBundleSupportedPlatforms');\n    if (!_.isArray(result)) {\n      log.warn(`${path.basename(app)}': CFBundleSupportedPlatforms is not a valid list`);\n      return [];\n    }\n    return result;\n  } catch (err) {\n    log.warn(\n      `Cannot extract the list of supported platforms from '${path.basename(app)}': ${err.message}`\n    );\n    return [];\n  }\n}\n\n/**\n * @typedef {Object} PlatformOpts\n *\n * @property {boolean} isSimulator - Whether the destination platform is a Simulator\n * @property {boolean} isTvOS - Whether the destination platform is a Simulator\n */\n\n/**\n * Verify whether the given application is compatible to the\n * platform where it is going to be installed and tested.\n *\n * @param {string} app - The actual path to the application bundle\n * @param {PlatformOpts} expectedPlatform\n * @throws {Error} If bundle architecture does not match the expected device architecture.\n */\nasync function verifyApplicationPlatform (app, expectedPlatform) {\n  log.debug('Verifying application platform');\n\n  const supportedPlatforms = await fetchSupportedAppPlatforms(app);\n  log.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(supportedPlatforms)}`);\n\n  const {\n    isSimulator,\n    isTvOS,\n  } = expectedPlatform;\n  const prefix = isTvOS ? 'AppleTV' : 'iPhone';\n  const suffix = isSimulator ? 'Simulator' : 'OS';\n  const dstPlatform = `${prefix}${suffix}`;\n  if (!supportedPlatforms.includes(dstPlatform)) {\n    throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` +\n      `Make sure the correct deployment target has been selected for its compilation in Xcode.`);\n  }\n}\n\nasync function readResource (resourcePath) {\n  const data = await plist.parsePlistFile(resourcePath);\n  const result = {};\n  for (const [key, value] of _.toPairs(data)) {\n    result[key] = _.isString(value) ? value : JSON.stringify(value);\n  }\n  return result;\n}\n\nasync function parseLocalizableStrings (opts) {\n  const {\n    app,\n    language = 'en',\n    localizableStringsDir,\n    stringFile,\n    strictMode,\n  } = opts;\n\n  if (!app) {\n    const message = `Strings extraction is not supported if 'app' capability is not set`;\n    if (strictMode) {\n      throw new Error(message);\n    }\n    log.info(message);\n    return {};\n  }\n\n  let lprojRoot;\n  for (const subfolder of [`${language}.lproj`, localizableStringsDir, '']) {\n    lprojRoot = path.resolve(app, subfolder);\n    if (await fs.exists(lprojRoot)) {\n      break;\n    }\n    const message = `No '${lprojRoot}' resources folder has been found`;\n    if (strictMode) {\n      throw new Error(message);\n    }\n    log.debug(message);\n  }\n  log.info(`Will extract resource strings from '${lprojRoot}'`);\n\n  const resourcePaths = [];\n  if (stringFile) {\n    const dstPath = path.resolve(lprojRoot, stringFile);\n    if (await fs.exists(dstPath)) {\n      resourcePaths.push(dstPath);\n    } else {\n      const message = `No '${dstPath}' resource file has been found for '${app}'`;\n      if (strictMode) {\n        throw new Error(message);\n      }\n      log.info(message);\n      log.info(`Getting all the available strings from '${lprojRoot}'`);\n    }\n  }\n\n  if (_.isEmpty(resourcePaths) && await fs.exists(lprojRoot)) {\n    const resourceFiles = (await fs.readdir(lprojRoot))\n      .filter((name) => _.some([STRINGS_RESOURCE, STRINGSDICT_RESOURCE], (x) => name.endsWith(x)))\n      .map((name) => path.resolve(lprojRoot, name));\n    resourcePaths.push(...resourceFiles);\n  }\n  log.info(`Got ${resourcePaths.length} resource file(s) in '${lprojRoot}'`);\n\n  if (_.isEmpty(resourcePaths)) {\n    return {};\n  }\n\n  const resultStrings = {};\n  const toAbsolutePath = function (p) {\n    return path.isAbsolute(p) ? p : path.resolve(process.cwd(), p);\n  };\n  for (const resourcePath of resourcePaths) {\n    if (!util.isSubPath(toAbsolutePath(resourcePath), toAbsolutePath(app))) {\n      // security precaution\n      throw new Error(`'${resourcePath}' is expected to be located under '${app}'`);\n    }\n    try {\n      const data = await readResource(resourcePath);\n      log.debug(`Parsed ${_.keys(data).length} string(s) from '${resourcePath}'`);\n      _.merge(resultStrings, data);\n    } catch (e) {\n      log.warn(`Cannot parse '${resourcePath}' resource. Original error: ${e.message}`);\n    }\n  }\n\n  log.info(`Got ${_.keys(resultStrings).length} string(s) from '${lprojRoot}'`);\n  return resultStrings;\n}\n\n/**\n * Check whether the given path on the file system points to the .app bundle root\n *\n * @param {string} appPath Possible .app bundle root\n * @returns {boolean} Whether the given path points to an .app bundle\n */\nasync function isAppBundle (appPath) {\n  return _.endsWith(_.toLower(appPath), APP_EXT)\n    && (await fs.stat(appPath)).isDirectory()\n    && await fs.exists(path.join(appPath, 'Info.plist'));\n}\n\n/**\n * Extract the given archive and looks for items with given extensions in it\n *\n * @param {string} archivePath Full path to a .zip archive\n * @param {Array<string>} appExtensions List of matching item extensions\n * @returns {[string, Array<String>]} Tuple, where the first element points to\n * a temporary folder root where the archive has been extracted and the second item\n * contains a list of relative paths to matched items\n */\nasync function findApps (archivePath, appExtensions) {\n  const useSystemUnzipEnv = process.env.APPIUM_PREFER_SYSTEM_UNZIP;\n  const useSystemUnzip = _.isEmpty(useSystemUnzipEnv)\n    || !['0', 'false'].includes(_.toLower(useSystemUnzipEnv));\n  const tmpRoot = await tempDir.openDir();\n  await zip.extractAllTo(archivePath, tmpRoot, {useSystemUnzip});\n  const globPattern = `**/*.+(${appExtensions.map((ext) => ext.replace(/^\\./, '')).join('|')})`;\n  const sortedBundleItems = (await fs.glob(globPattern, {\n    cwd: tmpRoot,\n    strict: false,\n  })).sort((a, b) => a.split(path.sep).length - b.split(path.sep).length);\n  return [tmpRoot, sortedBundleItems];\n}\n\n/**\n * Moves the application bundle to a newly created temporary folder\n *\n * @param {string} appRoot Full path to the .app bundle\n * @returns {string} The new path to the app bundle.\n * The name of the app bundle remains though\n */\nasync function isolateAppBundle (appRoot) {\n  const tmpRoot = await tempDir.openDir();\n  const dstRoot = path.join(tmpRoot, path.basename(appRoot));\n  await fs.mv(appRoot, dstRoot, {mkdirp: true});\n  return dstRoot;\n}\n\nexport {\n  extractBundleId, verifyApplicationPlatform, parseLocalizableStrings,\n  SAFARI_BUNDLE_ID, fetchSupportedAppPlatforms, APP_EXT, IPA_EXT,\n  isAppBundle, findApps, isolateAppBundle,\n};\n"],"mappings":"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"}