{"version":3,"file":"cert-utils.js","names":["doesSupportKeychainApi","_","memoize","device","simctl","exec","args","e","installCertificate","payload","addRootCertificate","raw","hasCertificateLegacy","hasSSLCert","udid","installCertificateLegacy","installSSLCert"],"sources":["../../lib/cert-utils.js"],"sourcesContent":["import _ from 'lodash';\nimport { installSSLCert, hasSSLCert } from 'appium-ios-simulator';\n\n/**\n * Check whether the given Simulator device supports simctl keychain API.\n *\n * @param {object} device Simulator instance created by appium-ios-simulator module\n * @returns {boolean} `true` if the current Simulator SDK supports keychain commands.\n */\nconst doesSupportKeychainApi = _.memoize(async function doesSupportKeychainApi (device) {\n  try {\n    await device.simctl.exec('help', {\n      args: ['keychain']\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n});\n\n/**\n * Adds a certificate to the trusted root store.\n * Simulator must be in BOOTED state for this API to work.\n *\n * @param {object} device Simulator instance created by appium-ios-simulator module\n * @param {string} payload Certificate payload\n */\nasync function installCertificate (device, payload) {\n  await device.simctl.addRootCertificate(payload, {raw: true});\n}\n\n/**\n * Check whether the given certificate is already installed.\n * The function is using hacky calls to make certificate stuff working for older SDKs.\n * Simulator must be in SHUTDOWN state for this API to work.\n *\n * @param {object} device Simulator instance created by appium-ios-simulator module\n * @param {string} payload Certificate payload\n * @returns {boolean} `true` if the certificate is already present in the root store.\n */\nasync function hasCertificateLegacy (device, payload) {\n  return await hasSSLCert(payload, device.udid);\n}\n\n/**\n * Adds a certificate to the trusted root store.\n * The function is using hacky calls to make certificate stuff working for older SDKs.\n * Simulator must be in SHUTDOWN state for this API to work.\n *\n * @param {object} device Simulator instance created by appium-ios-simulator module\n * @param {string} payload Certificate payload\n */\nasync function installCertificateLegacy (device, payload) {\n  await installSSLCert(payload, device.udid);\n}\n\n\nexport {\n  doesSupportKeychainApi, installCertificate, installCertificateLegacy,\n  hasCertificateLegacy\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AAQA,MAAMA,sBAAsB,GAAGC,eAAA,CAAEC,OAAF,CAAU,eAAeF,sBAAf,CAAuCG,MAAvC,EAA+C;EACtF,IAAI;IACF,MAAMA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB,MAAnB,EAA2B;MAC/BC,IAAI,EAAE,CAAC,UAAD;IADyB,CAA3B,CAAN;IAGA,OAAO,IAAP;EACD,CALD,CAKE,OAAOC,CAAP,EAAU;IACV,OAAO,KAAP;EACD;AACF,CAT8B,CAA/B;;;;AAkBA,eAAeC,kBAAf,CAAmCL,MAAnC,EAA2CM,OAA3C,EAAoD;EAClD,MAAMN,MAAM,CAACC,MAAP,CAAcM,kBAAd,CAAiCD,OAAjC,EAA0C;IAACE,GAAG,EAAE;EAAN,CAA1C,CAAN;AACD;;AAWD,eAAeC,oBAAf,CAAqCT,MAArC,EAA6CM,OAA7C,EAAsD;EACpD,OAAO,MAAM,IAAAI,8BAAA,EAAWJ,OAAX,EAAoBN,MAAM,CAACW,IAA3B,CAAb;AACD;;AAUD,eAAeC,wBAAf,CAAyCZ,MAAzC,EAAiDM,OAAjD,EAA0D;EACxD,MAAM,IAAAO,kCAAA,EAAeP,OAAf,EAAwBN,MAAM,CAACW,IAA/B,CAAN;AACD"}