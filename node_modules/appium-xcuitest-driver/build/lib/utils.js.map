{"version":3,"file":"utils.js","names":["DEFAULT_TIMEOUT_KEY","XCTEST_LOG_FILES_PATTERNS","XCTEST_LOGS_CACHE_FOLDER_PREFIX","detectUdid","log","debug","udids","utilities","getConnectedDevices","_","isEmpty","Error","udid","last","length","warn","join","getAndCheckXcodeVersion","version","xcode","getVersion","err","errorAndThrow","message","versionFloat","versionString","getAndCheckIosSdkVersion","getMaxIOSSDK","getGenericSimulatorForIosVersion","platformVersion","deviceName","genericSimulators","iosGenericSimulators","result","compareVersions","simOne","simTwo","util","platformVersionFromList","iosSimulator","sort","translateDeviceName","deviceNameTranslated","toLowerCase","trim","clearLogs","locations","cleanupPromises","location","fs","exists","push","size","stdout","exec","split","ign","rimraf","B","all","derivedDataCleanupMarkers","Map","markSystemFilesForCleanup","wda","retrieveDerivedDataPath","logsRoot","path","resolve","markersCount","has","get","set","clearSystemFiles","info","globPattern","os","tmpdir","dstFolders","glob","dstFolder","scheduledFilesCount","walkDir","itemPath","isDir","fileName","basename","some","p","test","unlink","catch","e","finally","pluralize","checkAppPresent","app","getDriverInfo","stat","__dirname","built","mtime","getTime","pkg","require","__filename","includes","normalizeCommandTimeouts","value","isNaN","toInteger","JSON","parse","isPlainObject","cmd","timeout","toPairs","isInteger","printUser","getPIDsListeningOnPort","port","filteringFunc","isFunction","filter","x","encodeBase64OrUpload","localPath","remotePath","uploadOptions","toReadableSizeString","toInMemoryBase64","toString","user","pass","method","headers","fileFieldName","formFields","options","auth","net","uploadFile","removeAllSessionWebSocketHandlers","server","sessionId","getWebSocketHandlers","activeHandlers","pathname","keys","removeWebSocketHandler","isLocalHost","urlString","hostname","url","normalizePlatformVersion","originalVersion","normalizedVersion","semver","coerce","major","minor","requireArgs","argNames","opts","argName","isArray","errors","InvalidArgumentError"],"sources":["../../lib/utils.js"],"sourcesContent":["import B from 'bluebird';\nimport { utilities } from 'appium-ios-device';\nimport { fs, util, net } from 'appium/support';\nimport path from 'path';\nimport { exec } from 'teen_process';\nimport xcode from 'appium-xcode';\nimport _ from 'lodash';\nimport log from './logger';\nimport iosGenericSimulators from './ios-generic-simulators';\nimport url from 'url';\nimport os from 'os';\nimport semver from 'semver';\nimport { errors } from 'appium/driver';\n\n\nconst DEFAULT_TIMEOUT_KEY = 'default';\nconst XCTEST_LOG_FILES_PATTERNS = [\n  /^Session-WebDriverAgentRunner.*\\.log$/i,\n  /^StandardOutputAndStandardError\\.txt$/i,\n];\nconst XCTEST_LOGS_CACHE_FOLDER_PREFIX = 'com.apple.dt.XCTest';\n\n\nasync function detectUdid () {\n  log.debug('Auto-detecting real device udid...');\n  const udids = await utilities.getConnectedDevices();\n  if (_.isEmpty(udids)) {\n    throw new Error('No device is connected to the host');\n  }\n  const udid = _.last(udids);\n  if (udids.length > 1) {\n    log.warn(`Multiple devices found: ${udids.join(', ')}`);\n    log.warn(`Choosing '${udid}'. If this is wrong, manually set with 'udid' desired capability`);\n  }\n  log.debug(`Detected real device udid: '${udid}'`);\n  return udid;\n}\n\nasync function getAndCheckXcodeVersion () {\n  let version;\n  try {\n    version = await xcode.getVersion(true);\n  } catch (err) {\n    log.debug(err);\n    log.errorAndThrow(`Could not determine Xcode version: ${err.message}`);\n  }\n\n  // we do not support Xcodes < 7.3,\n  if (version.versionFloat < 7.3) {\n    log.errorAndThrow(`Xcode version '${version.versionString}'. Support for ` +\n                      `Xcode ${version.versionString} is not supported. ` +\n                      `Please upgrade to version 7.3 or higher`);\n  }\n  return version;\n}\n\nasync function getAndCheckIosSdkVersion () {\n  try {\n    return await xcode.getMaxIOSSDK();\n  } catch (err) {\n    log.errorAndThrow(`Could not determine iOS SDK version: ${err.message}`);\n  }\n}\n\n/**\n * Get the generic simulator for a given IOS version and device type (iPhone, iPad)\n *\n * @param {string|number} platformVersion IOS version. e.g.) 13.0\n * @param {string} deviceName Type of IOS device. Can be iPhone, iPad (possibly more in the future)\n *\n * @returns {string?} Generic iPhone or iPad simulator (if applicable)\n */\nfunction getGenericSimulatorForIosVersion (platformVersion, deviceName) {\n  const genericSimulators = iosGenericSimulators[deviceName];\n  if (!genericSimulators) {\n    return null;\n  }\n\n  // Find the highest iOS version in the list that is below the provided version\n  let result = null;\n  const compareVersions = ([simOne], [simTwo]) => util.compareVersions(simOne, '<', simTwo) ? -1 : 1;\n  for (const [platformVersionFromList, iosSimulator] of genericSimulators.sort(compareVersions)) {\n    if (util.compareVersions(platformVersionFromList, '>', platformVersion)) {\n      break;\n    }\n    result = iosSimulator;\n  }\n  return result;\n}\n\nfunction translateDeviceName (platformVersion, deviceName) {\n  if (!deviceName) {\n    return deviceName;\n  }\n  const deviceNameTranslated = getGenericSimulatorForIosVersion(platformVersion, `${deviceName}`.toLowerCase().trim());\n  if (!deviceNameTranslated) {\n    return deviceName;\n  }\n\n  log.debug(`Changing deviceName from '${deviceName}' to '${deviceNameTranslated}'`);\n  return deviceNameTranslated;\n}\n\nasync function clearLogs (locations) {\n  log.debug('Clearing log files');\n  const cleanupPromises = [];\n  for (const location of locations) {\n    if (!await fs.exists(location)) {\n      continue;\n    }\n\n    cleanupPromises.push((async () => {\n      let size;\n      try {\n        const {stdout} = await exec('du', ['-sh', location]);\n        size = stdout.trim().split(/\\s+/)[0];\n      } catch (ign) {}\n      try {\n        log.debug(`Deleting '${location}'. ${size ? `Freeing ${size}.` : ''}`);\n        await fs.rimraf(location);\n      } catch (err) {\n        log.warn(`Unable to delete '${location}': ${err.message}`);\n      }\n    })());\n  }\n  if (!_.isEmpty(cleanupPromises)) {\n    await B.all(cleanupPromises);\n  }\n  log.debug('Finished clearing log files');\n}\n\n// This map contains derived data logs folders as keys\n// and values are the count of times the particular\n// folder has been scheduled for removal\nconst derivedDataCleanupMarkers = new Map();\n\nasync function markSystemFilesForCleanup (wda) {\n  if (!wda || !await wda.retrieveDerivedDataPath()) {\n    log.warn('No WebDriverAgent derived data available, so unable to mark system files for cleanup');\n    return;\n  }\n\n  const logsRoot = path.resolve(await wda.retrieveDerivedDataPath(), 'Logs');\n  let markersCount = 0;\n  if (derivedDataCleanupMarkers.has(logsRoot)) {\n    markersCount = derivedDataCleanupMarkers.get(logsRoot);\n  }\n  derivedDataCleanupMarkers.set(logsRoot, ++markersCount);\n}\n\nasync function clearSystemFiles (wda) {\n  // only want to clear the system files for the particular WDA xcode run\n  if (!wda || !await wda.retrieveDerivedDataPath()) {\n    log.warn('No WebDriverAgent derived data available, so unable to clear system files');\n    return;\n  }\n\n  const logsRoot = path.resolve(await wda.retrieveDerivedDataPath(), 'Logs');\n  if (derivedDataCleanupMarkers.has(logsRoot)) {\n    let markersCount = derivedDataCleanupMarkers.get(logsRoot);\n    derivedDataCleanupMarkers.set(logsRoot, --markersCount);\n    if (markersCount > 0) {\n      log.info(`Not cleaning '${logsRoot}' folder, because the other session does not expect it to be cleaned`);\n      return;\n    }\n  }\n  derivedDataCleanupMarkers.set(logsRoot, 0);\n\n  // Cleaning up big temporary files created by XCTest: https://github.com/appium/appium/issues/9410\n  const globPattern = `${os.tmpdir()}/${XCTEST_LOGS_CACHE_FOLDER_PREFIX}*/`;\n  const dstFolders = await fs.glob(globPattern);\n  if (_.isEmpty(dstFolders)) {\n    log.debug(`Did not find the temporary XCTest logs root at '${globPattern}'`);\n  } else {\n    // perform the cleanup asynchronously\n    for (const dstFolder of dstFolders) {\n      let scheduledFilesCount = 0;\n      B.resolve(fs.walkDir(dstFolder, true, (itemPath, isDir) => {\n        if (isDir) {\n          return;\n        }\n        const fileName = path.basename(itemPath);\n        if (!XCTEST_LOG_FILES_PATTERNS.some((p) => p.test(fileName))) {\n          return;\n        }\n\n        // delete the file asynchronously\n        // eslint-disable-next-line promise/prefer-await-to-then\n        fs.unlink(itemPath).catch((e) => {\n          log.info(e.message);\n        });\n        scheduledFilesCount++;\n        // eslint-disable-next-line promise/prefer-await-to-then\n      })).finally(() => {\n        if (scheduledFilesCount > 0) {\n          log.info(`Scheduled ${scheduledFilesCount} temporary XCTest log ` +\n            `${util.pluralize('file', scheduledFilesCount)} for cleanup in '${dstFolder}'`);\n        }\n        // eslint-disable-next-line promise/prefer-await-to-then\n      }).catch((e) => {\n        log.info(e.message);\n      });\n    }\n    log.debug(`Started background XCTest logs cleanup in '${dstFolders}'`);\n  }\n\n  if (await fs.exists(logsRoot)) {\n    log.info(`Cleaning test logs in '${logsRoot}' folder`);\n    await clearLogs([logsRoot]);\n    return;\n  }\n  log.info(`There is no ${logsRoot} folder, so not cleaning files`);\n}\n\nasync function checkAppPresent (app) {\n  log.debug(`Checking whether app '${app}' is actually present on file system`);\n  if (!(await fs.exists(app))) {\n    log.errorAndThrow(`Could not find app at '${app}'`);\n  }\n  log.debug('App is present');\n}\n\nasync function getDriverInfo () {\n  const stat = await fs.stat(path.resolve(__dirname, '..'));\n  const built = stat.mtime.getTime();\n\n  // get the package.json and the version from it\n  const pkg = require(__filename.includes('build/lib/utils') ? '../../package.json' : '../package.json');\n  const version = pkg.version;\n\n  return {\n    built,\n    version,\n  };\n}\n\nfunction normalizeCommandTimeouts (value) {\n  // The value is normalized already\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  let result = {};\n  // Use as default timeout for all commands if a single integer value is provided\n  if (!isNaN(value)) {\n    result[DEFAULT_TIMEOUT_KEY] = _.toInteger(value);\n    return result;\n  }\n\n  // JSON object has been provided. Let's parse it\n  try {\n    result = JSON.parse(value);\n    if (!_.isPlainObject(result)) {\n      throw new Error();\n    }\n  } catch (err) {\n    log.errorAndThrow(`\"commandTimeouts\" capability should be a valid JSON object. \"${value}\" was given instead`);\n  }\n  for (let [cmd, timeout] of _.toPairs(result)) {\n    if (!_.isInteger(timeout) || timeout <= 0) {\n      log.errorAndThrow(`The timeout for \"${cmd}\" should be a valid natural number of milliseconds. \"${timeout}\" was given instead`);\n    }\n  }\n  return result;\n}\n\nasync function printUser () {\n  try {\n    let {stdout} = await exec('whoami');\n    log.debug(`Current user: '${stdout.trim()}'`);\n  } catch (err) {\n    log.debug(`Unable to get username running server: ${err.message}`);\n  }\n}\n\n/**\n * Get the IDs of processes listening on the particular system port.\n * It is also possible to apply additional filtering based on the\n * process command line.\n *\n * @param {string|number} port - The port number.\n * @param {?Function} filteringFunc - Optional lambda function, which\n *                                    receives command line string of the particular process\n *                                    listening on given port, and is expected to return\n *                                    either true or false to include/exclude the corresponding PID\n *                                    from the resulting array.\n * @returns {Array<string>} - the list of matched process ids.\n */\nasync function getPIDsListeningOnPort (port, filteringFunc = null) {\n  const result = [];\n  try {\n    // This only works since Mac OS X El Capitan\n    const {stdout} = await exec('lsof', ['-ti', `tcp:${port}`]);\n    result.push(...(stdout.trim().split(/\\n+/)));\n  } catch (e) {\n    return result;\n  }\n\n  if (!_.isFunction(filteringFunc)) {\n    return result;\n  }\n  return await B.filter(result, async (x) => {\n    const {stdout} = await exec('ps', ['-p', x, '-o', 'command']);\n    return await filteringFunc(stdout);\n  });\n}\n\n/**\n * @typedef {Object} UploadOptions\n *\n * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.\n * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.\n *                              Only works if `remotePath` is provided.\n * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads\n * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for\n *                                            http(s) uploads\n * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads\n */\n\n\n/**\n * Encodes the given local file to base64 and returns the resulting string\n * or uploads it to a remote server using http/https or ftp protocols\n * if `remotePath` is set\n *\n * @param {string} localPath - The path to an existing local file\n * @param {?string} remotePath - The path to the remote location, where\n *                               this file should be uploaded\n * @param {?UploadOptions} uploadOptions - Set of upload options\n * @returns {string} Either an empty string if the upload was successful or\n * base64-encoded file representation if `remotePath` is falsy\n */\nasync function encodeBase64OrUpload (localPath, remotePath = null, uploadOptions = {}) {\n  if (!await fs.exists(localPath)) {\n    log.errorAndThrow(`The file at '${localPath}' does not exist or is not accessible`);\n  }\n\n  if (_.isEmpty(remotePath)) {\n    const {size} = await fs.stat(localPath);\n    log.debug(`The size of the file is ${util.toReadableSizeString(size)}`);\n    return (await util.toInMemoryBase64(localPath)).toString();\n  }\n\n  const {user, pass, method, headers, fileFieldName, formFields} = uploadOptions;\n  const options = {\n    method: method || 'PUT',\n    headers,\n    fileFieldName,\n    formFields,\n  };\n  if (user && pass) {\n    options.auth = {user, pass};\n  }\n  await net.uploadFile(localPath, remotePath, options);\n  return '';\n}\n\n/**\n * Stops and removes all web socket handlers that are listening\n * in scope of the currect session.\n *\n * @param {Object} server - The instance of NodeJs HTTP server,\n * which hosts Appium\n * @param {string} sessionId - The id of the current session\n */\nasync function removeAllSessionWebSocketHandlers (server, sessionId) {\n  if (!server || !_.isFunction(server.getWebSocketHandlers)) {\n    return;\n  }\n\n  const activeHandlers = await server.getWebSocketHandlers(sessionId);\n  for (const pathname of _.keys(activeHandlers)) {\n    await server.removeWebSocketHandler(pathname);\n  }\n}\n\n/**\n * Returns true if the urlString is localhost\n * @param {?string} urlString\n * @returns {boolean} Return true if the urlString is localhost\n */\nfunction isLocalHost (urlString) {\n  try {\n    const {hostname} = url.parse(urlString);\n    return ['localhost', '127.0.0.1', '::1', '::ffff:127.0.0.1'].includes(hostname);\n  } catch (ign) {\n    log.warn(`'${urlString}' cannot be parsed as a valid URL`);\n  }\n  return false;\n}\n\n/**\n * Normalizes platformVersion to a valid iOS version string\n *\n * @param {string} originalVersion - Loose version number, that can be parsed by semver\n * @return {string} iOS version number in <major>.<minor> format\n * @throws {Error} if the version number cannot be parsed\n */\nfunction normalizePlatformVersion (originalVersion) {\n  const normalizedVersion = semver.coerce(originalVersion);\n  if (!normalizedVersion) {\n    throw new Error(`The platform version '${originalVersion}' should be a valid version number`);\n  }\n  return `${normalizedVersion.major}.${normalizedVersion.minor}`;\n}\n\n/**\n  * Assert the presence of particular keys in the given object\n  *\n  * @param {string|Array<string>} argNames one or more key names\n  * @param {Object} opts the object to check\n  * @returns {Object} the same given object\n  */\nfunction requireArgs (argNames, opts = {}) {\n  for (const argName of (_.isArray(argNames) ? argNames : [argNames])) {\n    if (!_.has(opts, argName)) {\n      throw new errors.InvalidArgumentError(`'${argName}' argument must be provided`);\n    }\n  }\n  return opts;\n}\n\n\nexport {\n  detectUdid, getAndCheckXcodeVersion, getAndCheckIosSdkVersion,\n  checkAppPresent, getDriverInfo,\n  clearSystemFiles, translateDeviceName, normalizeCommandTimeouts,\n  DEFAULT_TIMEOUT_KEY, markSystemFilesForCleanup, printUser,\n  getPIDsListeningOnPort, encodeBase64OrUpload, removeAllSessionWebSocketHandlers,\n  isLocalHost, normalizePlatformVersion, clearLogs, requireArgs\n};\n"],"mappings":"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"}