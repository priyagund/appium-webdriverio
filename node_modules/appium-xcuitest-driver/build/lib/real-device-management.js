"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectedDevices = getConnectedDevices;
exports.getOSVersion = getOSVersion;
exports.getRealDeviceObj = getRealDeviceObj;
exports.installToRealDevice = installToRealDevice;
exports.runRealDeviceReset = runRealDeviceReset;

require("source-map-support/register");

var _appiumIosDevice = require("appium-ios-device");

var _iosDeploy = _interopRequireDefault(require("./ios-deploy"));

var _logger = _interopRequireDefault(require("./logger"));

var _appUtils = require("./app-utils");

async function getConnectedDevices() {
  return await _appiumIosDevice.utilities.getConnectedDevices();
}

async function getOSVersion(udid) {
  return await _appiumIosDevice.utilities.getOSVersion(udid);
}

async function resetRealDevice(device, opts) {
  const {
    bundleId,
    fullReset
  } = opts;

  if (!bundleId) {
    return;
  }

  if (bundleId === _appUtils.SAFARI_BUNDLE_ID) {
    _logger.default.debug('Reset requested. About to terminate Safari');

    await device.terminateApp(bundleId);
    return;
  }

  if (!fullReset) {
    return;
  }

  _logger.default.debug(`Reset: fullReset requested. Will try to uninstall the app '${bundleId}'.`);

  if (!(await device.isAppInstalled(bundleId))) {
    _logger.default.debug('Reset: app not installed. No need to uninstall');

    return;
  }

  try {
    await device.remove(bundleId);
  } catch (err) {
    _logger.default.error(`Reset: could not remove '${bundleId}' from device: ${err.message}`);

    throw err;
  }

  _logger.default.debug(`Reset: removed '${bundleId}'`);
}

async function runRealDeviceReset(device, opts) {
  if (!opts.noReset || opts.fullReset) {
    _logger.default.debug('Reset: running ios real device reset flow');

    if (!opts.noReset) {
      await resetRealDevice(device, opts);
    }
  } else {
    _logger.default.debug('Reset: fullReset not set. Leaving as is');
  }
}

async function installToRealDevice(device, app, bundleId, opts = {}) {
  if (!device.udid || !app) {
    _logger.default.debug('No device id or app, not installing to real device.');

    return;
  }

  const {
    noReset = false,
    strategy,
    timeout
  } = opts;

  if (await device.isAppInstalled(bundleId)) {
    if (noReset) {
      _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

      return;
    }

    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

    await device.remove(bundleId);
  }

  _logger.default.debug(`Installing '${app}' on device with UUID '${device.udid}'...`);

  await device.install(app, timeout, strategy);

  _logger.default.debug('The app has been installed successfully.');
}

function getRealDeviceObj(udid) {
  _logger.default.debug(`Creating iDevice object with udid '${udid}'`);

  return new _iosDeploy.default(udid);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRDb25uZWN0ZWREZXZpY2VzIiwidXRpbGl0aWVzIiwiZ2V0T1NWZXJzaW9uIiwidWRpZCIsInJlc2V0UmVhbERldmljZSIsImRldmljZSIsIm9wdHMiLCJidW5kbGVJZCIsImZ1bGxSZXNldCIsIlNBRkFSSV9CVU5ETEVfSUQiLCJsb2ciLCJkZWJ1ZyIsInRlcm1pbmF0ZUFwcCIsImlzQXBwSW5zdGFsbGVkIiwicmVtb3ZlIiwiZXJyIiwiZXJyb3IiLCJtZXNzYWdlIiwicnVuUmVhbERldmljZVJlc2V0Iiwibm9SZXNldCIsImluc3RhbGxUb1JlYWxEZXZpY2UiLCJhcHAiLCJzdHJhdGVneSIsInRpbWVvdXQiLCJpbnN0YWxsIiwiZ2V0UmVhbERldmljZU9iaiIsIklPU0RlcGxveSJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9yZWFsLWRldmljZS1tYW5hZ2VtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcbmltcG9ydCBJT1NEZXBsb3kgZnJvbSAnLi9pb3MtZGVwbG95JztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgU0FGQVJJX0JVTkRMRV9JRCB9IGZyb20gJy4vYXBwLXV0aWxzJztcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWREZXZpY2VzICgpIHtcbiAgcmV0dXJuIGF3YWl0IHV0aWxpdGllcy5nZXRDb25uZWN0ZWREZXZpY2VzKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE9TVmVyc2lvbiAodWRpZCkge1xuICByZXR1cm4gYXdhaXQgdXRpbGl0aWVzLmdldE9TVmVyc2lvbih1ZGlkKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzZXRSZWFsRGV2aWNlIChkZXZpY2UsIG9wdHMpIHtcbiAgY29uc3QgeyBidW5kbGVJZCwgZnVsbFJlc2V0IH0gPSBvcHRzO1xuICBpZiAoIWJ1bmRsZUlkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGJ1bmRsZUlkID09PSBTQUZBUklfQlVORExFX0lEKSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldCByZXF1ZXN0ZWQuIEFib3V0IHRvIHRlcm1pbmF0ZSBTYWZhcmknKTtcbiAgICBhd2FpdCBkZXZpY2UudGVybWluYXRlQXBwKGJ1bmRsZUlkKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWZ1bGxSZXNldCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgUmVzZXQ6IGZ1bGxSZXNldCByZXF1ZXN0ZWQuIFdpbGwgdHJ5IHRvIHVuaW5zdGFsbCB0aGUgYXBwICcke2J1bmRsZUlkfScuYCk7XG4gIGlmICghYXdhaXQgZGV2aWNlLmlzQXBwSW5zdGFsbGVkKGJ1bmRsZUlkKSkge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IGFwcCBub3QgaW5zdGFsbGVkLiBObyBuZWVkIHRvIHVuaW5zdGFsbCcpO1xuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGRldmljZS5yZW1vdmUoYnVuZGxlSWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYFJlc2V0OiBjb3VsZCBub3QgcmVtb3ZlICcke2J1bmRsZUlkfScgZnJvbSBkZXZpY2U6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG4gIGxvZy5kZWJ1ZyhgUmVzZXQ6IHJlbW92ZWQgJyR7YnVuZGxlSWR9J2ApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW5SZWFsRGV2aWNlUmVzZXQgKGRldmljZSwgb3B0cykge1xuICBpZiAoIW9wdHMubm9SZXNldCB8fCBvcHRzLmZ1bGxSZXNldCkge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IHJ1bm5pbmcgaW9zIHJlYWwgZGV2aWNlIHJlc2V0IGZsb3cnKTtcbiAgICBpZiAoIW9wdHMubm9SZXNldCkge1xuICAgICAgYXdhaXQgcmVzZXRSZWFsRGV2aWNlKGRldmljZSwgb3B0cyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IGZ1bGxSZXNldCBub3Qgc2V0LiBMZWF2aW5nIGFzIGlzJyk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFRvUmVhbERldmljZSAoZGV2aWNlLCBhcHAsIGJ1bmRsZUlkLCBvcHRzID0ge30pIHtcbiAgaWYgKCFkZXZpY2UudWRpZCB8fCAhYXBwKSB7XG4gICAgbG9nLmRlYnVnKCdObyBkZXZpY2UgaWQgb3IgYXBwLCBub3QgaW5zdGFsbGluZyB0byByZWFsIGRldmljZS4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgbm9SZXNldCA9IGZhbHNlLFxuICAgIHN0cmF0ZWd5LFxuICAgIHRpbWVvdXQsXG4gIH0gPSBvcHRzO1xuXG4gIGlmIChhd2FpdCBkZXZpY2UuaXNBcHBJbnN0YWxsZWQoYnVuZGxlSWQpKSB7XG4gICAgaWYgKG5vUmVzZXQpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgQXBwICcke2J1bmRsZUlkfScgaXMgYWxyZWFkeSBpbnN0YWxsZWQuIE5vIG5lZWQgdG8gcmVpbnN0YWxsLmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYFJlc2V0IHJlcXVlc3RlZC4gUmVtb3ZpbmcgYXBwIHdpdGggaWQgJyR7YnVuZGxlSWR9JyBmcm9tIHRoZSBkZXZpY2VgKTtcbiAgICBhd2FpdCBkZXZpY2UucmVtb3ZlKGJ1bmRsZUlkKTtcbiAgfVxuICBsb2cuZGVidWcoYEluc3RhbGxpbmcgJyR7YXBwfScgb24gZGV2aWNlIHdpdGggVVVJRCAnJHtkZXZpY2UudWRpZH0nLi4uYCk7XG4gIGF3YWl0IGRldmljZS5pbnN0YWxsKGFwcCwgdGltZW91dCwgc3RyYXRlZ3kpO1xuICBsb2cuZGVidWcoJ1RoZSBhcHAgaGFzIGJlZW4gaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseS4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVhbERldmljZU9iaiAodWRpZCkge1xuICBsb2cuZGVidWcoYENyZWF0aW5nIGlEZXZpY2Ugb2JqZWN0IHdpdGggdWRpZCAnJHt1ZGlkfSdgKTtcbiAgcmV0dXJuIG5ldyBJT1NEZXBsb3kodWRpZCk7XG59XG5cbmV4cG9ydCB7IGdldENvbm5lY3RlZERldmljZXMsIGdldE9TVmVyc2lvbiwgcnVuUmVhbERldmljZVJlc2V0LCBpbnN0YWxsVG9SZWFsRGV2aWNlLFxuICBnZXRSZWFsRGV2aWNlT2JqIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLGVBQWVBLG1CQUFmLEdBQXNDO0VBQ3BDLE9BQU8sTUFBTUMsMEJBQUEsQ0FBVUQsbUJBQVYsRUFBYjtBQUNEOztBQUVELGVBQWVFLFlBQWYsQ0FBNkJDLElBQTdCLEVBQW1DO0VBQ2pDLE9BQU8sTUFBTUYsMEJBQUEsQ0FBVUMsWUFBVixDQUF1QkMsSUFBdkIsQ0FBYjtBQUNEOztBQUVELGVBQWVDLGVBQWYsQ0FBZ0NDLE1BQWhDLEVBQXdDQyxJQUF4QyxFQUE4QztFQUM1QyxNQUFNO0lBQUVDLFFBQUY7SUFBWUM7RUFBWixJQUEwQkYsSUFBaEM7O0VBQ0EsSUFBSSxDQUFDQyxRQUFMLEVBQWU7SUFDYjtFQUNEOztFQUVELElBQUlBLFFBQVEsS0FBS0UsMEJBQWpCLEVBQW1DO0lBQ2pDQyxlQUFBLENBQUlDLEtBQUosQ0FBVSw0Q0FBVjs7SUFDQSxNQUFNTixNQUFNLENBQUNPLFlBQVAsQ0FBb0JMLFFBQXBCLENBQU47SUFDQTtFQUNEOztFQUVELElBQUksQ0FBQ0MsU0FBTCxFQUFnQjtJQUNkO0VBQ0Q7O0VBRURFLGVBQUEsQ0FBSUMsS0FBSixDQUFXLDhEQUE2REosUUFBUyxJQUFqRjs7RUFDQSxJQUFJLEVBQUMsTUFBTUYsTUFBTSxDQUFDUSxjQUFQLENBQXNCTixRQUF0QixDQUFQLENBQUosRUFBNEM7SUFDMUNHLGVBQUEsQ0FBSUMsS0FBSixDQUFVLGdEQUFWOztJQUNBO0VBQ0Q7O0VBQ0QsSUFBSTtJQUNGLE1BQU1OLE1BQU0sQ0FBQ1MsTUFBUCxDQUFjUCxRQUFkLENBQU47RUFDRCxDQUZELENBRUUsT0FBT1EsR0FBUCxFQUFZO0lBQ1pMLGVBQUEsQ0FBSU0sS0FBSixDQUFXLDRCQUEyQlQsUUFBUyxrQkFBaUJRLEdBQUcsQ0FBQ0UsT0FBUSxFQUE1RTs7SUFDQSxNQUFNRixHQUFOO0VBQ0Q7O0VBQ0RMLGVBQUEsQ0FBSUMsS0FBSixDQUFXLG1CQUFrQkosUUFBUyxHQUF0QztBQUNEOztBQUVELGVBQWVXLGtCQUFmLENBQW1DYixNQUFuQyxFQUEyQ0MsSUFBM0MsRUFBaUQ7RUFDL0MsSUFBSSxDQUFDQSxJQUFJLENBQUNhLE9BQU4sSUFBaUJiLElBQUksQ0FBQ0UsU0FBMUIsRUFBcUM7SUFDbkNFLGVBQUEsQ0FBSUMsS0FBSixDQUFVLDJDQUFWOztJQUNBLElBQUksQ0FBQ0wsSUFBSSxDQUFDYSxPQUFWLEVBQW1CO01BQ2pCLE1BQU1mLGVBQWUsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULENBQXJCO0lBQ0Q7RUFDRixDQUxELE1BS087SUFDTEksZUFBQSxDQUFJQyxLQUFKLENBQVUseUNBQVY7RUFDRDtBQUNGOztBQUVELGVBQWVTLG1CQUFmLENBQW9DZixNQUFwQyxFQUE0Q2dCLEdBQTVDLEVBQWlEZCxRQUFqRCxFQUEyREQsSUFBSSxHQUFHLEVBQWxFLEVBQXNFO0VBQ3BFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRixJQUFSLElBQWdCLENBQUNrQixHQUFyQixFQUEwQjtJQUN4QlgsZUFBQSxDQUFJQyxLQUFKLENBQVUscURBQVY7O0lBQ0E7RUFDRDs7RUFFRCxNQUFNO0lBQ0pRLE9BQU8sR0FBRyxLQUROO0lBRUpHLFFBRkk7SUFHSkM7RUFISSxJQUlGakIsSUFKSjs7RUFNQSxJQUFJLE1BQU1ELE1BQU0sQ0FBQ1EsY0FBUCxDQUFzQk4sUUFBdEIsQ0FBVixFQUEyQztJQUN6QyxJQUFJWSxPQUFKLEVBQWE7TUFDWFQsZUFBQSxDQUFJQyxLQUFKLENBQVcsUUFBT0osUUFBUywrQ0FBM0I7O01BQ0E7SUFDRDs7SUFDREcsZUFBQSxDQUFJQyxLQUFKLENBQVcsMENBQXlDSixRQUFTLG1CQUE3RDs7SUFDQSxNQUFNRixNQUFNLENBQUNTLE1BQVAsQ0FBY1AsUUFBZCxDQUFOO0VBQ0Q7O0VBQ0RHLGVBQUEsQ0FBSUMsS0FBSixDQUFXLGVBQWNVLEdBQUksMEJBQXlCaEIsTUFBTSxDQUFDRixJQUFLLE1BQWxFOztFQUNBLE1BQU1FLE1BQU0sQ0FBQ21CLE9BQVAsQ0FBZUgsR0FBZixFQUFvQkUsT0FBcEIsRUFBNkJELFFBQTdCLENBQU47O0VBQ0FaLGVBQUEsQ0FBSUMsS0FBSixDQUFVLDBDQUFWO0FBQ0Q7O0FBRUQsU0FBU2MsZ0JBQVQsQ0FBMkJ0QixJQUEzQixFQUFpQztFQUMvQk8sZUFBQSxDQUFJQyxLQUFKLENBQVcsc0NBQXFDUixJQUFLLEdBQXJEOztFQUNBLE9BQU8sSUFBSXVCLGtCQUFKLENBQWN2QixJQUFkLENBQVA7QUFDRCJ9