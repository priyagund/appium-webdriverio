{"version":3,"file":"chromedriver.js","names":["NEW_CD_VERSION_FORMAT_MAJOR_VERSION","DEFAULT_HOST","MIN_CD_VERSION_WITH_W3C_SUPPORT","DEFAULT_PORT","CHROME_BUNDLE_ID","WEBVIEW_SHELL_BUNDLE_ID","WEBVIEW_BUNDLE_IDS","VERSION_PATTERN","CD_VERSION_TIMEOUT","Chromedriver","events","EventEmitter","constructor","args","host","port","useSystemExecutable","executable","executableDir","getChromedriverDir","bundleId","mappingPath","cmdArgs","adb","verbose","logPath","disableBuildCheck","details","isAutodownloadEnabled","_log","logger","getLogger","generateLogPrefix","proxyHost","proxyPort","proc","chromedriver","executableVerified","state","STATE_STOPPED","jwproxy","JWProxy","server","log","storageClient","ChromedriverStorageClient","chromedriverDir","capabilities","desiredProtocol","PROTOCOLS","MJSONWP","getDriversMapping","mapping","_","cloneDeep","CHROMEDRIVER_CHROME_MAPPING","debug","fs","exists","warn","info","JSON","parse","readFile","err","message","cdVersion","chromeVersion","toPairs","coercedVersion","semver","coerce","version","getChromedrivers","executables","glob","cwd","strict","nodir","absolute","util","pluralize","length","cds","asyncmap","logError","stdout","stderr","errMsg","path","basename","exec","timeout","includes","match","minChromeVersion","major","minor","filter","cd","sort","a","b","compareVersions","isEmpty","getChromeVersion","Browser","versionMatch","apiLevel","getApiLevel","updateDriversMapping","newMapping","shouldUpdateStaticMapping","writeFile","stringify","e","Object","assign","getCompatibleChromedriver","getChromedriverBinaryPath","values","didStorageSync","syncChromedrivers","retrievedMapping","retrieveMapping","driverKeys","syncDrivers","minBrowserVersion","synchronizedDriversMapping","reduce","acc","x","missingVersions","coercedVer","size","errorAndThrow","matchingDrivers","minChromeVersionS","gte","CD_CDN","stack","autodownloadSuggestion","Error","binPath","initChromedriverPath","syncProtocol","W3C","chromeOptions","getCapValue","w3c","toW3cCapNames","start","caps","emitStartingState","loggingPrefs","browser","changeState","STATE_STARTING","adbPort","push","isArray","startDetector","startsWith","processIsAlive","webviewVersion","killAll","SubProcess","on","out","line","trim","split","error","code","signal","STATE_STOPPING","STATE_RESTARTING","msg","join","waitForOnline","startSession","emit","EVENT_ERROR","stop","versionsSupportedByDriver","sessionId","STATE_ONLINE","restart","chromedriverStopped","retryInterval","getStatus","command","sessionCaps","alwaysMatch","desiredCapabilities","prefix","emitStates","runSafeStep","f","EVENT_CHANGED","sendCommand","url","method","body","proxyReq","req","res","proxyReqRes","cmd","system","isWindows","B","promisify","cp","udidIndex","defaultArgs","findIndex","item","udid","conn","getForwardList","params","removePortForward","replace","hasWorkingWebview"],"sources":["../../lib/chromedriver.js"],"sourcesContent":["// transpile:main\n\nimport events from 'events';\nimport { JWProxy, PROTOCOLS } from 'appium/driver';\nimport cp from 'child_process';\nimport { system, fs, logger, util } from 'appium/support';\nimport { retryInterval, asyncmap } from 'asyncbox';\nimport { SubProcess, exec } from 'teen_process';\nimport B from 'bluebird';\nimport {\n  getChromeVersion, getChromedriverDir, CHROMEDRIVER_CHROME_MAPPING,\n  getChromedriverBinaryPath, CD_CDN, generateLogPrefix\n} from './utils';\nimport semver from 'semver';\nimport _ from 'lodash';\nimport path from 'path';\nimport { compareVersions } from 'compare-versions';\nimport ChromedriverStorageClient from './storage-client';\nimport { toW3cCapNames, getCapValue } from './protocol-helpers';\n\nconst NEW_CD_VERSION_FORMAT_MAJOR_VERSION = 73;\nconst DEFAULT_HOST = '127.0.0.1';\nconst MIN_CD_VERSION_WITH_W3C_SUPPORT = 75;\nconst DEFAULT_PORT = 9515;\nconst CHROME_BUNDLE_ID = 'com.android.chrome';\nconst WEBVIEW_SHELL_BUNDLE_ID = 'org.chromium.webview_shell';\nconst WEBVIEW_BUNDLE_IDS = [\n  'com.google.android.webview',\n  'com.android.webview',\n];\nconst VERSION_PATTERN = /([\\d.]+)/;\n\nconst CD_VERSION_TIMEOUT = 5000;\n\nclass Chromedriver extends events.EventEmitter {\n  constructor (args = {}) {\n    super();\n\n    const {\n      host = DEFAULT_HOST,\n      port = DEFAULT_PORT,\n      useSystemExecutable = false,\n      executable,\n      executableDir = getChromedriverDir(),\n      bundleId,\n      mappingPath,\n      cmdArgs,\n      adb,\n      verbose,\n      logPath,\n      disableBuildCheck,\n      details,\n      isAutodownloadEnabled = false,\n    } = args;\n    this._log = logger.getLogger(generateLogPrefix(this));\n\n    this.proxyHost = host;\n    this.proxyPort = port;\n    this.adb = adb;\n    this.cmdArgs = cmdArgs;\n    this.proc = null;\n    this.useSystemExecutable = useSystemExecutable;\n    this.chromedriver = executable;\n    this.executableDir = executableDir;\n    this.mappingPath = mappingPath;\n    this.bundleId = bundleId;\n    this.executableVerified = false;\n    this.state = Chromedriver.STATE_STOPPED;\n    this.jwproxy = new JWProxy({\n      server: this.proxyHost,\n      port: this.proxyPort,\n      log: this._log,\n    });\n    this.verbose = verbose;\n    this.logPath = logPath;\n    this.disableBuildCheck = !!disableBuildCheck;\n    this.storageClient = isAutodownloadEnabled\n      ? new ChromedriverStorageClient({ chromedriverDir: this.executableDir })\n      : null;\n    this.details = details;\n    this.capabilities = {};\n    this.desiredProtocol = PROTOCOLS.MJSONWP;\n  }\n\n  get log () {\n    return this._log;\n  }\n\n  async getDriversMapping () {\n    let mapping = _.cloneDeep(CHROMEDRIVER_CHROME_MAPPING);\n    if (this.mappingPath) {\n      this.log.debug(`Attempting to use Chromedriver->Chrome mapping from '${this.mappingPath}'`);\n      if (!await fs.exists(this.mappingPath)) {\n        this.log.warn(`No file found at '${this.mappingPath}'`);\n        this.log.info('Defaulting to the static Chromedriver->Chrome mapping');\n      } else {\n        try {\n          mapping = JSON.parse(await fs.readFile(this.mappingPath, 'utf8'));\n        } catch (err) {\n          this.log.warn(`Error parsing mapping from '${this.mappingPath}': ${err.message}`);\n          this.log.info('Defaulting to the static Chromedriver->Chrome mapping');\n        }\n      }\n    } else {\n      this.log.debug('Using the static Chromedriver->Chrome mapping');\n    }\n\n    // make sure that the values for minimum chrome version are semver compliant\n    for (const [cdVersion, chromeVersion] of _.toPairs(mapping)) {\n      const coercedVersion = semver.coerce(chromeVersion);\n      if (coercedVersion) {\n        mapping[cdVersion] = coercedVersion.version;\n      } else {\n        this.log.info(`'${chromeVersion}' is not a valid version number. Skipping it`);\n      }\n    }\n    return mapping;\n  }\n\n  async getChromedrivers (mapping) {\n    // go through the versions available\n    const executables = await fs.glob('*', {\n      cwd: this.executableDir,\n      strict: false,\n      nodir: true,\n      absolute: true,\n    });\n    this.log.debug(`Found ${util.pluralize('executable', executables.length, true)} ` +\n      `in '${this.executableDir}'`);\n    const cds = (await asyncmap(executables, async (executable) => {\n      const logError = ({message, stdout = null, stderr = null}) => {\n        let errMsg = `Cannot retrieve version number from '${path.basename(executable)}' Chromedriver binary. ` +\n          `Make sure it returns a valid version string in response to '--version' command line argument. ${message}`;\n        if (stdout) {\n          errMsg += `\\nStdout: ${stdout}`;\n        }\n        if (stderr) {\n          errMsg += `\\nStderr: ${stderr}`;\n        }\n        this.log.warn(errMsg);\n        return null;\n      };\n\n      let stdout;\n      let stderr;\n      try {\n        ({stdout, stderr} = await exec(executable, ['--version'], {\n          timeout: CD_VERSION_TIMEOUT,\n        }));\n      } catch (err) {\n        if (!(err.message || '').includes('timed out') && !(err.stdout || '').includes('Starting ChromeDriver')) {\n          return logError(err);\n        }\n\n        // if this has timed out, it has actually started Chromedriver,\n        // in which case there will also be the version string in the output\n        stdout = err.stdout;\n      }\n\n      const match = /ChromeDriver\\s+\\(?v?([\\d.]+)\\)?/i.exec(stdout); // https://regex101.com/r/zpj5wA/1\n      if (!match) {\n        return logError({message: 'Cannot parse the version string', stdout, stderr});\n      }\n      let version = match[1];\n      let minChromeVersion = mapping[version];\n      const coercedVersion = semver.coerce(version);\n      if (coercedVersion) {\n        // before 2019-03-06 versions were of the form major.minor\n        if (coercedVersion.major < NEW_CD_VERSION_FORMAT_MAJOR_VERSION) {\n          version = `${coercedVersion.major}.${coercedVersion.minor}`;\n          minChromeVersion = mapping[version];\n        }\n        if (!minChromeVersion && coercedVersion.major >= NEW_CD_VERSION_FORMAT_MAJOR_VERSION) {\n          // Assume the major Chrome version is the same as the corresponding driver major version\n          minChromeVersion = `${coercedVersion.major}`;\n        }\n      }\n      return {\n        executable,\n        version,\n        minChromeVersion,\n      };\n    }))\n      .filter((cd) => !!cd)\n      .sort((a, b) => compareVersions(b.version, a.version));\n    if (_.isEmpty(cds)) {\n      this.log.info(`No Chromedrivers were found in '${this.executableDir}'`);\n      return cds;\n    }\n    this.log.debug(`The following Chromedriver executables were found:`);\n    for (const cd of cds) {\n      this.log.debug(`    '${cd.executable}' (version '${cd.version}', minimum Chrome version '${cd.minChromeVersion ? cd.minChromeVersion : 'Unknown'}')`);\n    }\n    return cds;\n  }\n\n  async getChromeVersion () {\n    // Try to retrieve the version from `details` property if it is set\n    // The `info` item must contain the output of /json/version CDP command\n    // where `Browser` field looks like `Chrome/72.0.3601.0``\n    if (this.details?.info) {\n      this.log.debug(`Browser version in the supplied details: ${this.details?.info?.Browser}`);\n    }\n    const versionMatch = VERSION_PATTERN.exec(this.details?.info?.Browser);\n    if (versionMatch) {\n      const coercedVersion = semver.coerce(versionMatch[1]);\n      if (coercedVersion) {\n        return coercedVersion;\n      }\n    }\n\n    let chromeVersion;\n\n    // in case of WebView Browser Tester, simply try to find the underlying webview\n    if (this.bundleId === WEBVIEW_SHELL_BUNDLE_ID) {\n      for (const bundleId of WEBVIEW_BUNDLE_IDS) {\n        chromeVersion = await getChromeVersion(this.adb, bundleId);\n        if (chromeVersion) {\n          this.bundleId = bundleId;\n          return semver.coerce(chromeVersion);\n        }\n      }\n      return null;\n    }\n\n    // on Android 7-9 webviews are backed by the main Chrome, not the system webview\n    if (this.adb) {\n      const apiLevel = await this.adb.getApiLevel();\n      if (apiLevel >= 24 && apiLevel <= 28 &&\n          [WEBVIEW_SHELL_BUNDLE_ID, ...WEBVIEW_BUNDLE_IDS].includes(this.bundleId)) {\n        this.bundleId = CHROME_BUNDLE_ID;\n      }\n    }\n\n    // try out webviews when no bundle id is sent in\n    if (!this.bundleId) {\n      // default to the generic Chrome bundle\n      this.bundleId = CHROME_BUNDLE_ID;\n\n      // we have a webview of some sort, so try to find the bundle version\n      for (const bundleId of WEBVIEW_BUNDLE_IDS) {\n        chromeVersion = await getChromeVersion(this.adb, bundleId);\n        if (chromeVersion) {\n          this.bundleId = bundleId;\n          break;\n        }\n      }\n    }\n\n    // if we do not have a chrome version, it must not be a webview\n    if (!chromeVersion) {\n      chromeVersion = await getChromeVersion(this.adb, this.bundleId);\n    }\n\n    // make sure it is semver, so later checks won't fail\n    return chromeVersion ? semver.coerce(chromeVersion) : null;\n  }\n\n  async updateDriversMapping (newMapping) {\n    let shouldUpdateStaticMapping = true;\n    if (await fs.exists(this.mappingPath)) {\n      try {\n        await fs.writeFile(this.mappingPath, JSON.stringify(newMapping, null, 2), 'utf8');\n        shouldUpdateStaticMapping = false;\n      } catch (e) {\n        this.log.warn(`Cannot store the updated chromedrivers mapping into '${this.mappingPath}'. ` +\n          `This may reduce the performance of further executions. Original error: ${e.message}`);\n      }\n    }\n    if (shouldUpdateStaticMapping) {\n      Object.assign(CHROMEDRIVER_CHROME_MAPPING, newMapping);\n    }\n  }\n\n  async getCompatibleChromedriver () {\n    if (!this.adb) {\n      return await getChromedriverBinaryPath();\n    }\n\n    const mapping = await this.getDriversMapping();\n    if (!_.isEmpty(mapping)) {\n      this.log.debug(`The most recent known Chrome version: ${_.values(mapping)[0]}`);\n    }\n\n    let didStorageSync = false;\n    const syncChromedrivers = async (chromeVersion) => {\n      didStorageSync = true;\n      const retrievedMapping = await this.storageClient.retrieveMapping();\n      this.log.debug('Got chromedrivers mapping from the storage: ' +\n        JSON.stringify(retrievedMapping, null, 2));\n      const driverKeys = await this.storageClient.syncDrivers({\n        minBrowserVersion: chromeVersion.major,\n      });\n      if (_.isEmpty(driverKeys)) {\n        return false;\n      }\n      const synchronizedDriversMapping = driverKeys.reduce((acc, x) => {\n        const {version, minBrowserVersion} = retrievedMapping[x];\n        acc[version] = minBrowserVersion;\n        return acc;\n      }, {});\n      Object.assign(mapping, synchronizedDriversMapping);\n      await this.updateDriversMapping(mapping);\n      return true;\n    };\n\n    do {\n      const cds = await this.getChromedrivers(mapping);\n\n      const missingVersions = {};\n      for (const {version, minChromeVersion} of cds) {\n        if (!minChromeVersion || mapping[version]) {\n          continue;\n        }\n        const coercedVer = semver.coerce(version);\n        if (!coercedVer || coercedVer.major < NEW_CD_VERSION_FORMAT_MAJOR_VERSION) {\n          continue;\n        }\n\n        missingVersions[version] = minChromeVersion;\n      }\n      if (!_.isEmpty(missingVersions)) {\n        this.log.info(`Found ${util.pluralize('Chromedriver', _.size(missingVersions), true)}, ` +\n          `which ${_.size(missingVersions) === 1 ? 'is' : 'are'} missing in the list of known versions: ` +\n          JSON.stringify(missingVersions));\n        await this.updateDriversMapping(Object.assign(mapping, missingVersions));\n      }\n\n      if (this.disableBuildCheck) {\n        if (_.isEmpty(cds)) {\n          this.log.errorAndThrow(`There must be at least one Chromedriver executable available for use if ` +\n            `'chromedriverDisableBuildCheck' capability is set to 'true'`);\n        }\n        const {version, executable} = cds[0];\n        this.log.warn(`Chrome build check disabled. Using most recent Chromedriver version (${version}, at '${executable}')`);\n        this.log.warn(`If this is wrong, set 'chromedriverDisableBuildCheck' capability to 'false'`);\n        return executable;\n      }\n\n      const chromeVersion = await this.getChromeVersion();\n      if (!chromeVersion) {\n        // unable to get the chrome version\n        if (_.isEmpty(cds)) {\n          this.log.errorAndThrow(`There must be at least one Chromedriver executable available for use if ` +\n            `the current Chrome version cannot be determined`);\n        }\n        const {version, executable} = cds[0];\n        this.log.warn(`Unable to discover Chrome version. Using Chromedriver ${version} at '${executable}'`);\n        return executable;\n      }\n      this.log.debug(`Found Chrome bundle '${this.bundleId}' version '${chromeVersion}'`);\n\n      const matchingDrivers = cds.filter(({minChromeVersion}) => {\n        const minChromeVersionS = minChromeVersion && semver.coerce(minChromeVersion);\n        if (!minChromeVersionS) {\n          return false;\n        }\n\n        return chromeVersion.major > NEW_CD_VERSION_FORMAT_MAJOR_VERSION\n          ? minChromeVersionS.major === chromeVersion.major\n          : semver.gte(chromeVersion, minChromeVersionS);\n      });\n      if (_.isEmpty(matchingDrivers)) {\n        if (this.storageClient && !didStorageSync) {\n          try {\n            if (await syncChromedrivers(chromeVersion)) {\n              continue;\n            }\n          } catch (e) {\n            this.log.warn(`Cannot synchronize local chromedrivers with the remote storage at ${CD_CDN}: ` +\n              e.message);\n            this.log.debug(e.stack);\n          }\n        }\n        const autodownloadSuggestion =\n          'You could also try to enable automated chromedrivers download as ' +\n          'a possible workaround.';\n        throw new Error(`No Chromedriver found that can automate Chrome '${chromeVersion}'.` +\n          (this.storageClient ? '' : ` ${autodownloadSuggestion}`));\n      }\n\n      const binPath = matchingDrivers[0].executable;\n      this.log.debug(`Found ${util.pluralize('executable', matchingDrivers.length, true)} ` +\n        `capable of automating Chrome '${chromeVersion}'.\\nChoosing the most recent, '${binPath}'.`);\n      this.log.debug('If a specific version is required, specify it with the `chromedriverExecutable`' +\n        'desired capability.');\n      return binPath;\n    // eslint-disable-next-line no-constant-condition\n    } while (true);\n  }\n\n  async initChromedriverPath () {\n    if (this.executableVerified) return; //eslint-disable-line curly\n\n    // the executable might be set (if passed in)\n    // or we might want to use the basic one installed with this driver\n    // or we want to figure out the best one\n    if (!this.chromedriver) {\n      this.chromedriver = this.useSystemExecutable\n        ? await getChromedriverBinaryPath()\n        : await this.getCompatibleChromedriver();\n    }\n\n    if (!await fs.exists(this.chromedriver)) {\n      throw new Error(`Trying to use a chromedriver binary at the path ` +\n                      `${this.chromedriver}, but it doesn't exist!`);\n    }\n    this.executableVerified = true;\n    this.log.info(`Set chromedriver binary as: ${this.chromedriver}`);\n  }\n\n  syncProtocol (cdVersion = null) {\n    const coercedVersion = semver.coerce(cdVersion);\n    if (!coercedVersion || coercedVersion.major < MIN_CD_VERSION_WITH_W3C_SUPPORT) {\n      this.log.debug(`Chromedriver v. ${cdVersion} does not fully support ${PROTOCOLS.W3C} protocol. ` +\n        `Defaulting to ${PROTOCOLS.MJSONWP}`);\n      return;\n    }\n    const chromeOptions = getCapValue(this.capabilities, 'chromeOptions', {});\n    if (chromeOptions.w3c === false) {\n      this.log.info(`Chromedriver v. ${cdVersion} supports ${PROTOCOLS.W3C} protocol, ` +\n        `but ${PROTOCOLS.MJSONWP} one has been explicitly requested`);\n      return;\n    }\n    this.desiredProtocol = PROTOCOLS.W3C;\n    // given caps might not be properly prefixed\n    // so we try to fix them in order to properly init\n    // the new W3C session\n    this.capabilities = toW3cCapNames(this.capabilities);\n  }\n\n  async start (caps, emitStartingState = true) {\n    this.capabilities = _.cloneDeep(caps);\n\n    // set the logging preferences to ALL the console logs\n    this.capabilities.loggingPrefs = _.cloneDeep(getCapValue(caps, 'loggingPrefs', {}));\n    if (_.isEmpty(this.capabilities.loggingPrefs.browser)) {\n      this.capabilities.loggingPrefs.browser = 'ALL';\n    }\n\n    if (emitStartingState) {\n      this.changeState(Chromedriver.STATE_STARTING);\n    }\n\n    const args = [`--port=${this.proxyPort}`];\n    if (this.adb && this.adb.adbPort) {\n      args.push(`--adb-port=${this.adb.adbPort}`);\n    }\n    if (_.isArray(this.cmdArgs)) {\n      args.push(...this.cmdArgs);\n    }\n    if (this.logPath) {\n      args.push(`--log-path=${this.logPath}`);\n    }\n    if (this.disableBuildCheck) {\n      args.push('--disable-build-check');\n    }\n    args.push('--verbose');\n    // what are the process stdout/stderr conditions wherein we know that\n    // the process has started to our satisfaction?\n    const startDetector = (stdout) => stdout.startsWith('Starting ');\n\n    let processIsAlive = false;\n    let webviewVersion;\n    try {\n      await this.initChromedriverPath();\n      await this.killAll();\n\n      // set up our subprocess object\n      this.proc = new SubProcess(this.chromedriver, args);\n      processIsAlive = true;\n\n      // handle log output\n      this.proc.on('output', (stdout, stderr) => {\n        // if the cd output is not printed, find the chrome version and print\n        // will get a response like\n        //   DevTools response: {\n        //      \"Android-Package\": \"io.appium.sampleapp\",\n        //      \"Browser\": \"Chrome/55.0.2883.91\",\n        //      \"Protocol-Version\": \"1.2\",\n        //      \"User-Agent\": \"...\",\n        //      \"WebKit-Version\": \"537.36\"\n        //   }\n        const out = stdout + stderr;\n        let match = /\"Browser\": \"(.*)\"/.exec(out);\n        if (match) {\n          webviewVersion = match[1];\n          this.log.debug(`Webview version: '${webviewVersion}'`);\n        }\n\n        // also print chromedriver version to logs\n        // will output something like\n        //  Starting ChromeDriver 2.33.506106 (8a06c39c4582fbfbab6966dbb1c38a9173bfb1a2) on port 9515\n        match = /Starting ChromeDriver ([.\\d]+)/.exec(out);\n        if (match) {\n          this.log.debug(`Chromedriver version: '${match[1]}'`);\n          this.syncProtocol(match[1]);\n        }\n\n        // give the output if it is requested\n        if (this.verbose) {\n          for (let line of (stdout || '').trim().split('\\n')) {\n            if (!line.trim().length) continue; // eslint-disable-line curly\n            this.log.debug(`[STDOUT] ${line}`);\n          }\n          for (let line of (stderr || '').trim().split('\\n')) {\n            if (!line.trim().length) continue; // eslint-disable-line curly\n            this.log.error(`[STDERR] ${line}`);\n          }\n        }\n      });\n\n      // handle out-of-bound exit by simply emitting a stopped state\n      this.proc.on('exit', (code, signal) => {\n        processIsAlive = false;\n        if (this.state !== Chromedriver.STATE_STOPPED &&\n            this.state !== Chromedriver.STATE_STOPPING &&\n            this.state !== Chromedriver.STATE_RESTARTING) {\n          const msg = `Chromedriver exited unexpectedly with code ${code}, signal ${signal}`;\n          this.log.error(msg);\n          this.changeState(Chromedriver.STATE_STOPPED);\n        }\n      });\n      this.log.info(`Spawning chromedriver with: ${this.chromedriver} ${args.join(' ')}`);\n      // start subproc and wait for startDetector\n      await this.proc.start(startDetector);\n      await this.waitForOnline();\n      await this.startSession();\n    } catch (e) {\n      this.log.debug(e);\n      this.emit(Chromedriver.EVENT_ERROR, e);\n      // just because we had an error doesn't mean the chromedriver process\n      // finished; we should clean up if necessary\n      if (processIsAlive) {\n        await this.proc.stop();\n      }\n\n      let message = '';\n      // often the user's Chrome version is not supported by the version of Chromedriver\n      if (e.message.includes('Chrome version must be')) {\n        message += 'Unable to automate Chrome version because it is not supported by this version of Chromedriver.\\n';\n        if (webviewVersion) {\n          message += `Chrome version on the device: ${webviewVersion}\\n`;\n        }\n        const versionsSupportedByDriver = /Chrome version must be (.+)/.exec(e.message)?.[1] || '';\n        if (versionsSupportedByDriver) {\n          message += `Chromedriver supports Chrome version(s): ${versionsSupportedByDriver}\\n`;\n        }\n        message += 'Check the driver tutorial for troubleshooting.\\n';\n      }\n\n      message += e.message;\n      this.log.errorAndThrow(message);\n    }\n  }\n\n  sessionId () {\n    return this.state === Chromedriver.STATE_ONLINE ? this.jwproxy.sessionId : null;\n  }\n\n  async restart () {\n    this.log.info('Restarting chromedriver');\n    if (this.state !== Chromedriver.STATE_ONLINE) {\n      throw new Error(\"Can't restart when we're not online\");\n    }\n    this.changeState(Chromedriver.STATE_RESTARTING);\n    await this.stop(false);\n    await this.start(this.capabilities, false);\n  }\n\n  async waitForOnline () {\n    // we need to make sure that CD hasn't crashed\n    let chromedriverStopped = false;\n    await retryInterval(20, 200, async () => {\n      if (this.state === Chromedriver.STATE_STOPPED) {\n        // we are either stopped or stopping, so something went wrong\n        chromedriverStopped = true;\n        return;\n      }\n      await this.getStatus();\n    });\n    if (chromedriverStopped) {\n      throw new Error('ChromeDriver crashed during startup.');\n    }\n  }\n\n  async getStatus () {\n    return await this.jwproxy.command('/status', 'GET');\n  }\n\n  async startSession () {\n    const sessionCaps = this.desiredProtocol === PROTOCOLS.W3C\n      ? {capabilities: {alwaysMatch: this.capabilities}}\n      : {desiredCapabilities: this.capabilities};\n    this.log.info(`Starting ${this.desiredProtocol} Chromedriver session with capabilities: ` +\n      JSON.stringify(sessionCaps, null, 2));\n    await this.jwproxy.command('/session', 'POST', sessionCaps);\n    this.log.prefix = generateLogPrefix(this, this.jwproxy.sessionId);\n    this.changeState(Chromedriver.STATE_ONLINE);\n  }\n\n  async stop (emitStates = true) {\n    if (emitStates) {\n      this.changeState(Chromedriver.STATE_STOPPING);\n    }\n    const runSafeStep = async (f) => {\n      try {\n        return await f();\n      } catch (e) {\n        this.log.warn(e.message);\n        this.log.debug(e.stack);\n      }\n    };\n    await runSafeStep(() => this.jwproxy.command('', 'DELETE'));\n    await runSafeStep(() => this.proc.stop('SIGTERM', 20000));\n    this.log.prefix = generateLogPrefix(this);\n    if (emitStates) {\n      this.changeState(Chromedriver.STATE_STOPPED);\n    }\n  }\n\n  changeState (state) {\n    this.state = state;\n    this.log.debug(`Changed state to '${state}'`);\n    this.emit(Chromedriver.EVENT_CHANGED, {state});\n  }\n\n  async sendCommand (url, method, body) {\n    return await this.jwproxy.command(url, method, body);\n  }\n\n  async proxyReq (req, res) {\n    return await this.jwproxy.proxyReqRes(req, res);\n  }\n\n  async killAll () {\n    let cmd = system.isWindows()\n      ? `wmic process where \"commandline like '%chromedriver.exe%--port=${this.proxyPort}%'\" delete`\n      : `pkill -15 -f \"${this.chromedriver}.*--port=${this.proxyPort}\"`;\n    this.log.debug(`Killing any old chromedrivers, running: ${cmd}`);\n    try {\n      await (B.promisify(cp.exec))(cmd);\n      this.log.debug('Successfully cleaned up old chromedrivers');\n    } catch (err) {\n      this.log.warn('No old chromedrivers seem to exist');\n    }\n\n    if (this.adb) {\n      const udidIndex = this.adb.executable.defaultArgs.findIndex((item) => item === '-s');\n      const udid = udidIndex > -1 ? this.adb.executable.defaultArgs[udidIndex + 1] : null;\n\n      if (udid) {\n        this.log.debug(`Cleaning this device's adb forwarded port socket connections: ${udid}`);\n      } else {\n        this.log.debug(`Cleaning any old adb forwarded port socket connections`);\n      }\n\n      try {\n        for (let conn of await this.adb.getForwardList()) {\n          // chromedriver will ask ADB to forward a port like \"deviceId tcp:port localabstract:webview_devtools_remote_port\"\n          if (!(conn.includes('webview_devtools') && (!udid || conn.includes(udid)))) {\n            continue;\n          }\n\n          let params = conn.split(/\\s+/);\n          if (params.length > 1) {\n            await this.adb.removePortForward(params[1].replace(/[\\D]*/, ''));\n          }\n        }\n      } catch (err) {\n        this.log.warn(`Unable to clean forwarded ports. Error: '${err.message}'. Continuing.`);\n      }\n    }\n  }\n\n  async hasWorkingWebview () {\n    // sometimes chromedriver stops automating webviews. this method runs a\n    // simple command to determine our state, and responds accordingly\n    try {\n      await this.jwproxy.command('/url', 'GET');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nChromedriver.EVENT_ERROR = 'chromedriver_error';\nChromedriver.EVENT_CHANGED = 'stateChanged';\nChromedriver.STATE_STOPPED = 'stopped';\nChromedriver.STATE_STARTING = 'starting';\nChromedriver.STATE_ONLINE = 'online';\nChromedriver.STATE_STOPPING = 'stopping';\nChromedriver.STATE_RESTARTING = 'restarting';\n\nexport { Chromedriver };\nexport default Chromedriver;\n"],"mappings":"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"}